using System.Xml;
using System.Xml.Serialization;
using TripXMLMain;
using System.Web;
using System.Data;
using System.Text;
using System;
using System.Collections;
using System.Text.RegularExpressions;
using System.Threading;
using System.Collections.Generic;
using System.IO;
using System.Globalization;
using TripXMLTools;

public class AirServices
{

    private StringBuilder sb = new StringBuilder();
    public modCore.TripXMLProviderSystems ttProviderSystems;
    private string mstrRequest = "";
    private string mstrVersion = "";
    private string mstrXslPath = "";
    public static int RequestCount = 0;
    public static string ErrorReq = "";
    private int iFinishedPrices = 0;
    private string[,] priceTags = null;
    private string[,] PricingSource = null;
    private string[,] NegoCode = null;
    private string[,] TicketTimeLimit = null;
    private string[,] OutClass = null;
    private string[,] InClass = null;
    private string[,] flSegments = null;
    private int iFareSearches = 0;
    private string firstPriceTotal = "";
    private string[] OTAPriceTotal = null;
    private string[] OTAReqTotal = null;
    private string[] avTempResponseTotal = null;
    private string strRequestTotal = "";
    string[] strReq;
    bool[] bPriceEnd;
    private string strMessage = "";

    public string Request
    {
        get
        {
            return mstrRequest;
        }
        set
        {
            mstrRequest = value;
        }
    }

    public string Version
    {
        get
        {
            return mstrVersion;
        }
        set
        {
            mstrVersion = value;
            if ((mstrVersion.Length > 0))
            {
                mstrVersion = mstrVersion + "_";
            }
        }
    }

    public string XslPath
    {
        get
        {
            return mstrXslPath;
        }
        set
        {
            StringBuilder sbx = new StringBuilder();
            sbx.Append(value).Append("AmadeusWS\\");
            mstrXslPath = sbx.ToString();
            sbx = null;
        }
    }

    public string XslPortalPath
    {
        get
        {
            return mstrXslPath.Replace("AmadeusWS", "Portal");
        }
        set
        {
            StringBuilder sbx = new StringBuilder();
            sbx.Append(value).Append("Portal\\");
            mstrXslPath = sbx.ToString();
            sbx = null;
        }
    }

    public string AirAvail()
    {
        StringBuilder sb1 = new StringBuilder();
        AmadeusWSAdapter ttAA = null;

        XmlDocument oDoc = null;
        XmlElement oRoot = null;
        XmlNode oNode = null;
        XmlDocument oDocResp = null;
        XmlElement oRootResp = null;
        XmlNodeList oNodeResp = null;
        XmlDocument oDocRespN = null;
        XmlElement oRootRespN = null;
        XmlNodeList oNodeRespN = null;
        System.DateTime RequestTime;
        System.DateTime ResponseTime;

        string response = null;
        string Pages = null;
        string ConversationID = "";
        string strRequest = "";
        string strResponse = "";
        string strIniAirReply = "";
        string strNxtAirReply = "";
        string strNxtFlightAirReply = null;
        string strIniFlightAirReply = null;
        int count = 0;



        try
        {
            RequestTime = DateTime.Now;
            try
            {
                mstrRequest = mstrRequest.Replace("<?xml version=\"1.0\" encoding=\"utf-16\"?>", "").Replace("<?xml version=\"1.0\"?>", "");
                strRequest = mstrRequest;
                sb.Append(mstrVersion).Append("AmadeusWS_AirAvailRQ.xsl");
                strRequest = CoreLib.TransformXML(strRequest, mstrXslPath, sb.ToString(), false);
                sb.Remove(0, sb.Length);
            }
            catch (Exception ex)
            {
                throw new Exception(sb.Append("Error Transforming OTA Request. ").Append(ex.Message).ToString());
                sb.Remove(0, sb.Length);
            }

            if (strRequest.Length == 0)
            {
                throw new Exception("Transformation produced empty xml.");
            }
            ////  *******************
            ////  Create Session    *
            ////  *******************
            //try
            //{
            //    if (ttProviderSystems.SessionPool)
            //    {
            //        ttAA = new AmadeusWSAdapter(ttProviderSystems, "V1");
            //        ConversationID = ttAA.CheckSessionV2();
            //    }
            //    else
            //    {
            //        ttAA = new AmadeusWSAdapter(ttProviderSystems);
            //        ConversationID = ttAA.CreateSession();
            //    }
            //}
            //catch (Exception ex)
            //{
            //    throw new Exception(sb.Append("Error Creating Session.").Append("\r\n").Append(ex.Message).ToString());
            //    sb.Remove(0, sb.Length);
            //}
            //// *******************************************************************************
            ////  Get from Transformed Request and Send Fare message to the AmadeusWS Adapter  *
            //// *******************************************************************************

            //try
            //{
            //    oDoc = new XmlDocument();
            //    oDoc.LoadXml(mstrRequest);
            //    oRoot = oDoc.DocumentElement;
            //}
            //catch (Exception ex)
            //{
            //    sb.Append("Error Loading Transformed Request XML Document.").Append("\r\n").Append(ex.Message);
            //    throw new Exception(sb.ToString());
            //    sb.Remove(0, sb.Length);
            //}

            ////*******************************************************************************
            //// Send Transformed Request to the AmadeusWS Adapter and Getting Native Response  *
            ////******************************************************************************* 


            //try
            //{

            //        if (ttProviderSystems.SessionPool)
            //        {
            //            strResponse = ttAA.SendMessageV3(strRequest, "", "http://webservices.amadeus.com/" + ttProviderSystems.Profile + "/" + ttProviderSystems.AmadeusWSSchema.Air_MultiAvailability, ConversationID);
            //        }
            //        else
            //        {
            //            strResponse = ttAA.SendMessage(strRequest, "", "http://webservices.amadeus.com/" + ttProviderSystems.Profile + "/" + ttProviderSystems.AmadeusWSSchema.Air_MultiAvailability, ConversationID);
            //        }
            //        strResponse = strResponse.Replace(" xmlns=\"http://xml.amadeus.com/" + ttProviderSystems.AmadeusWSSchema.Air_MultiAvailabilityReply + "\"", "");
            //        strIniAirReply = strResponse;
            //        ConversationID = UpdateSessionID(ConversationID);


            //        oDocResp = new XmlDocument();
            //        oDocResp.LoadXml(strIniAirReply);
            //        oRootResp = oDocResp.DocumentElement;

            //        oNodeResp = oRootResp.SelectNodes("singleCityPairInfo/flightInfo");

            //        foreach (XmlNode oNode1 in oNodeResp)
            //        {
            //            sb.Append(oNode1.OuterXml);
            //        }

            //        strIniFlightAirReply = sb.ToString();
            //        sb.Remove(0, sb.Length);

            //}

            //catch (Exception ex)
            //{
            //    throw ex;
            //}


            //try
            //{
            //    sb.Append(mstrVersion).Append("AmadeusWS_AirAvailRS.xsl");
            //    strResponse = CoreLib.TransformXML(strResponse, mstrXslPath, sb.ToString(), false);
            //    sb.Remove(0, sb.Length);
            //}
            //catch (Exception ex)
            //{
            //    throw new Exception(sb.Append("Error Transforming Native Response.").Append("\r\n").Append(ex.Message).ToString());
            //    sb = null;
            //}

            if (Version == "v03_")
            {
                //  *******************
                //  Create Session    *
                //  *******************
                try
                {
                    if (ttProviderSystems.SessionPool)
                    {
                        ttAA = new AmadeusWSAdapter(ttProviderSystems, "V1");
                        ttAA.isSOAP2 = ttProviderSystems.SOAP2;
                        ConversationID = ttAA.CheckSessionV2();
                    }
                    else
                    {
                        ttAA = new AmadeusWSAdapter(ttProviderSystems);
                        ttAA.isSOAP2 = ttProviderSystems.SOAP2;
                        ConversationID = ttAA.CreateSession();
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception(sb.Append("Error Creating Session.").Append("\r\n").Append(ex.Message).ToString());
                    sb.Remove(0, sb.Length);
                }
                // *******************************************************************************
                //  Get from Transformed Request and Send Fare message to the AmadeusWS Adapter  *
                // *******************************************************************************

                try
                {
                    oDoc = new XmlDocument();
                    oDoc.LoadXml(mstrRequest);
                    oRoot = oDoc.DocumentElement;
                }
                catch (Exception ex)
                {
                    sb.Append("Error Loading Transformed Request XML Document.").Append("\r\n").Append(ex.Message);
                    throw new Exception(sb.ToString());
                    sb.Remove(0, sb.Length);
                }

                //*******************************************************************************
                // Send Transformed Request to the AmadeusWS Adapter and Getting Native Response  *
                //******************************************************************************* 



                try
                {
                    strMessage = strRequest;
                    if (ttProviderSystems.SessionPool)
                    {
                        strResponse = ttAA.SendMessageV3(strRequest, "", "http://webservices.amadeus.com/" + ttProviderSystems.Profile + "/" + ttProviderSystems.AmadeusWSSchema.Air_MultiAvailability, ConversationID);
                    }
                    else
                    {
                        strResponse = ttAA.SendMessage(strRequest, "", "http://webservices.amadeus.com/" + ttProviderSystems.Profile + "/" + ttProviderSystems.AmadeusWSSchema.Air_MultiAvailability, ConversationID);
                    }
                    strResponse = strResponse.Replace(" xmlns=\"http://xml.amadeus.com/" + ttProviderSystems.AmadeusWSSchema.Air_MultiAvailabilityReply + "\"", "");
                    strIniAirReply = strResponse;
                    ConversationID = UpdateSessionID(ConversationID);

                    sb.Append(strMessage).Append(Environment.NewLine).Append(strResponse);
                    strMessage = sb.ToString();
                    sb.Remove(0, sb.Length);

                    oDocResp = new XmlDocument();
                    oDocResp.LoadXml(strIniAirReply);
                    oRootResp = oDocResp.DocumentElement;

                    oNodeResp = oRootResp.SelectNodes("singleCityPairInfo/flightInfo");

                    foreach (XmlNode oNode1 in oNodeResp)
                    {
                        sb.Append(oNode1.OuterXml);
                    }

                    strIniFlightAirReply = sb.ToString();
                    sb.Remove(0, sb.Length);

                }

                catch (Exception ex)
                {
                    throw ex;
                }

                oNode = oRoot.SelectSingleNode("OriginDestinationInformation/DatePeriod");
                Pages = oNode.Attributes["Pages"].Value;

                count = Convert.ToInt32(Pages);

                if (Pages != null && strResponse.IndexOf("NO FLIGHT FOR THIS CITY PAIR") == -1)
                {
                    sb1.Remove(0, sb1.Length);
                    //*******************************************************************************
                    // Send Transformed Request to the AmadeusWS Adapter and Getting Native Response  *
                    //******************************************************************************* 


                    try
                    {

                        strRequest = mstrRequest;
                        sb.Append(mstrVersion).Append("AmadeusWS_AirAvailRQ1.xsl");
                        strRequest = CoreLib.TransformXML(strRequest, mstrXslPath, sb.ToString(), false);
                        sb.Remove(0, sb.Length);
                    }
                    catch (Exception ex)
                    {
                        throw new Exception(sb.Append("Error Transforming OTA Request. ").Append(ex.Message).ToString());
                        sb.Remove(0, sb.Length);
                    }


                    for (int i = 0; i < count - 1; i++)
                    {

                        try
                        {
                            sb.Append(strMessage).Append(Environment.NewLine).Append(strRequest);
                            strMessage = sb.ToString();
                            sb.Remove(0, sb.Length);

                            if (ttProviderSystems.SessionPool)
                            {
                                strResponse = ttAA.SendMessageV3(strRequest, "", "http://webservices.amadeus.com/" + ttProviderSystems.Profile + "/" + ttProviderSystems.AmadeusWSSchema.Air_MultiAvailability, ConversationID);
                            }
                            else
                            {
                                strResponse = ttAA.SendMessage(strRequest, "", "http://webservices.amadeus.com/" + ttProviderSystems.Profile + "/" + ttProviderSystems.AmadeusWSSchema.Air_MultiAvailability, ConversationID);
                            }
                            strResponse = strResponse.Replace(" xmlns=\"http://xml.amadeus.com/" + ttProviderSystems.AmadeusWSSchema.Air_MultiAvailabilityReply + "\"", "");

                            sb.Append(strMessage).Append(Environment.NewLine).Append(strResponse);
                            strMessage = sb.ToString();
                            sb.Remove(0, sb.Length);

                            strNxtAirReply = strResponse;
                            ConversationID = UpdateSessionID(ConversationID);

                            oDocRespN = new XmlDocument();
                            oDocRespN.LoadXml(strNxtAirReply);
                            oRootRespN = oDocRespN.DocumentElement;
                            oNodeRespN = oRootRespN.SelectNodes("singleCityPairInfo/flightInfo");

                            foreach (XmlNode oNode2 in oNodeRespN)
                            {
                                sb1.Append(oNode2.OuterXml);
                            }

                            if (strResponse.IndexOf("NO LATER FLTS") != -1)
                                break;

                        }
                        catch (Exception ex)
                        {
                            throw ex;
                        }

                    }
                    strNxtFlightAirReply = sb1.ToString();
                    sb1.Remove(0, sb1.Length);

                }
            }
            else
            {
                // *******************************************************************************
                //  Get from Transformed Request and Send Fare message to the AmadeusWS Adapter  *
                // *******************************************************************************

                try
                {
                    oDoc = new XmlDocument();
                    oDoc.LoadXml(mstrRequest);
                    oRoot = oDoc.DocumentElement;
                }
                catch (Exception ex)
                {
                    sb.Append("Error Loading Transformed Request XML Document.").Append("\r\n").Append(ex.Message);
                    throw new Exception(sb.ToString());
                    sb.Remove(0, sb.Length);
                }

                //*******************************************************************************
                // Send Transformed Request to the AmadeusWS Adapter and Getting Native Response  *
                //******************************************************************************* 


                try
                {
                    sb.Append(strMessage).Append(Environment.NewLine).Append(strRequest);
                    strMessage = sb.ToString();
                    sb.Remove(0, sb.Length);

                    if (ttProviderSystems.SessionPool)
                    {
                        ttAA = new AmadeusWSAdapter(ttProviderSystems, "V1");
                        ttAA.isSOAP2 = ttProviderSystems.SOAP2;
                        strResponse = ttAA.SendMessageV3(strRequest, "", "http://webservices.amadeus.com/" + ttProviderSystems.Profile + "/" + ttProviderSystems.AmadeusWSSchema.Air_MultiAvailability, ConversationID);
                    }
                    else
                    {
                        ttAA = new AmadeusWSAdapter(ttProviderSystems);
                        ttAA.isSOAP2 = ttProviderSystems.SOAP2;
                        strResponse = ttAA.SendMessage(strRequest, "", "http://webservices.amadeus.com/" + ttProviderSystems.Profile + "/" + ttProviderSystems.AmadeusWSSchema.Air_MultiAvailability, ConversationID);
                    }
                    strResponse = strResponse.Replace(" xmlns=\"http://xml.amadeus.com/" + ttProviderSystems.AmadeusWSSchema.Air_MultiAvailabilityReply + "\"", "");
                    strIniAirReply = strResponse;

                    sb.Append(strMessage).Append(Environment.NewLine).Append(strResponse);
                    strMessage = sb.ToString();
                    sb.Remove(0, sb.Length);

                    oDocResp = new XmlDocument();
                    oDocResp.LoadXml(strIniAirReply);
                    oRootResp = oDocResp.DocumentElement;

                    oNodeResp = oRootResp.SelectNodes("singleCityPairInfo/flightInfo");

                    foreach (XmlNode oNode1 in oNodeResp)
                    {
                        sb.Append(oNode1.OuterXml);
                    }

                    strIniFlightAirReply = sb.ToString();
                    sb.Remove(0, sb.Length);

                }

                catch (Exception ex)
                {
                    throw ex;
                }
            }

            if (strIniAirReply.IndexOf("<flightInfo>") != -1)
            {
                response = strIniAirReply.Substring(0, strIniAirReply.IndexOf("<flightInfo>"));
                strResponse = sb.Append(response).Append(strIniFlightAirReply).Append(strNxtFlightAirReply).Append("</singleCityPairInfo></Air_MultiAvailabilityReply>").ToString();
                sb.Remove(0, sb.Length);
            }

            //*****************************************************************
            // Transform Native AmadeusWS AirAvail Response into OTA Response   *
            //***************************************************************** 
            try
            {
                sb.Append(mstrVersion).Append("AmadeusWS_AirAvailRS.xsl");
                strResponse = CoreLib.TransformXML(strResponse, mstrXslPath, sb.ToString(), false);
                sb.Remove(0, sb.Length);

                if (Version == "v03_" && strResponse.IndexOf("Errors") == -1)
                {
                    sb.Append(mstrVersion).Append("AmadeusWS_AirAvailRPHRS.xsl");
                    strResponse = CoreLib.TransformXML(strResponse, mstrXslPath, sb.ToString(), false);
                    sb.Remove(0, sb.Length);
                }

            }
            catch (Exception ex)
            {
                throw new Exception(sb.Append("Error Transforming Native Response.").Append("\r\n").Append(ex.Message).ToString());
                sb = null;
            }

            ResponseTime = DateTime.Now;
            if (ttProviderSystems.LogNative)
            {
                //LogMessageToFile("AirPrice", strMessage, RequestTime, ResponseTime);
                TripXMLTools.TripXMLLog.LogMessage("LowFarePlus", ref strMessage, RequestTime, ResponseTime, "Native", ttProviderSystems.Provider.ToString(), ttProviderSystems.System.ToString(), ttProviderSystems.UserName.ToString());
            }
        }

        catch (Exception ex)
        {
            addLog("<EXOR><M>" + mstrRequest + "<BL/>", ttProviderSystems.UserID);
            strResponse = modCore.FormatErrorMessage(modCore.ttServices.AirAvail, ex.Message, "", "", false, "");
        }

        finally
        {
            sb.Remove(0, sb.Length);
            if (!(oNode == null))
            {
                oNode = null;
            }
            if (!(oRoot == null))
            {
                oRoot = null;
            }
            if (!(oDoc == null))
            {
                oDoc = null;
            }

            if (!(oDocResp == null))
            {
                oDocResp = null;
            }
            if (!(oRootResp == null))
            {
                oRootResp = null;
            }
            if (!(oNodeResp == null))
            {
                oNodeResp = null;
            }

            if (!(oDocRespN == null))
            {
                oDocRespN = null;
            }
            if (!(oRootRespN == null))
            {
                oRootRespN = null;
            }
            if (!(oNodeRespN == null))
            {
                oNodeRespN = null;
            }

            if ((!(ConversationID == null) && !(ttAA == null)) && Version == "v03_")
            {
                if (ConversationID.Length > 0)
                {
                    if (ttProviderSystems.SessionPool)
                    {
                        ConversationID = SubSessionID(ConversationID);
                        ttAA.CloseSessionFromPool(ConversationID);
                    }
                    else
                    {
                        ttAA.CloseSession(ConversationID);
                    }
                }
            }
            if (!(ttAA == null))
            {
                ttAA = null;
            }

        }



        return strResponse;
    }



    public string AirFlifo()
    {
        AmadeusWSAdapter ttAA = null;
        string strRequest = "";
        string strResponse = "";
        try
        {
            mstrRequest = mstrRequest.Replace("<?xml version=\"1.0\" encoding=\"utf-16\"?>", "").Replace("<?xml version=\"1.0\"?>", "");
            strRequest = mstrRequest;
            sb.Append(mstrVersion).Append("AmadeusWS_AirFlifoRQ.xsl");
            strRequest = CoreLib.TransformXML(strRequest, mstrXslPath, sb.ToString(), false);
            sb.Remove(0, sb.Length);
        }
        catch (Exception ex)
        {
            throw new Exception(sb.Append("Error Transforming OTA Request. ").Append(ex.Message).ToString());
            sb.Remove(0, sb.Length);
        }
        if ((strRequest.Length == 0))
        {
            throw new Exception("Transformation produced empty xml.");
        }
        // *******************************************************************************
        //  Send Transformed Request to the AmadeusWS Adapter and Getting Native Response  *
        // ******************************************************************************* 
        try
        {
            //ttAA = new AmadeusWSAdapter(ttProviderSystems);
            //strResponse = ttAA.SendMessage(strRequest, "", "http://webservices.amadeus.com/" + ttProviderSystems.Profile + "/" + ttProviderSystems.AmadeusWSSchema.Air_FlightInfo, "");

            if (ttProviderSystems.SessionPool)
            {
                ttAA = new AmadeusWSAdapter(ttProviderSystems, "V1");
                ttAA.isSOAP2 = ttProviderSystems.SOAP2;
                strResponse = ttAA.SendMessageV3(strRequest, "", "http://webservices.amadeus.com/" + ttProviderSystems.Profile + "/" + ttProviderSystems.AmadeusWSSchema.Air_FlightInfo, "");
            }
            else
            {
                ttAA = new AmadeusWSAdapter(ttProviderSystems);
                ttAA.isSOAP2 = ttProviderSystems.SOAP2;
                strResponse = ttAA.SendMessage(strRequest, "", "http://webservices.amadeus.com/" + ttProviderSystems.Profile + "/" + ttProviderSystems.AmadeusWSSchema.Air_FlightInfo, "");
            }

            //ttAA = new AmadeusWSAdapter(ttProviderSystems, "V1");
            //strResponse = ttAA.SendMessageV3(strRequest, "", "http://webservices.amadeus.com/" + ttProviderSystems.Profile + "/" + ttProviderSystems.AmadeusWSSchema.Air_FlightInfo, "");
            //strResponse = ttAA.SendMessageV4(strRequest, "", "http://webservices.amadeus.com/" + ttProviderSystems.Profile + "/" + ttProviderSystems.AmadeusWSSchema.Air_FlightInfo, "");

            strResponse = strResponse.Replace(" xmlns=\"http://xml.amadeus.com/" + ttProviderSystems.AmadeusWSSchema.Air_FlightInfoReply + "\"", "");


        }
        catch (Exception ex)
        {
            addLog("<EXOR><M>" + mstrRequest + "<BL/>", ttProviderSystems.UserID);
            throw ex;
        }
        finally
        {
            ttAA = null;
        }
        // *****************************************************************
        //  Transform Native AmadeusWS AirFlifo Response into OTA Response   *
        // ***************************************************************** 
        try
        {
            sb.Append(mstrVersion).Append("AmadeusWS_AirFlifoRS.xsl");
            strResponse = CoreLib.TransformXML(strResponse, mstrXslPath, sb.ToString(), false);
            sb.Remove(0, sb.Length);
        }
        catch (Exception ex)
        {
            throw new Exception(sb.Append("Error Transforming Native Response.").Append("\r\n").Append(ex.Message).ToString());
            sb = null;
        }
        return strResponse;
    }

    public string AirPrice()
    {
        AmadeusWSAdapter ttAA = null;
        XmlDocument oDoc = null;
        XmlElement oRoot = null;
        XmlNode oNode = null;
        XmlDocument oDocResp = null;
        XmlElement oRootResp = null;
        XmlNode oNodeResp = null;
        string ConversationID = "";
        string strRequest = "";
        string strResponse = "";
        string strPNRReply = "";
        DateTime RequestTime;
        DateTime ResponseTime;
        string strMessage = "";
        bool returnBreakPoint = false;
        try
        {
            // *****************************************************************
            //  Transform OTA AirPrice Request into Several Navite Requests    *
            // ***************************************************************** 
            try
            {
                RequestTime = DateTime.Now;
                mstrRequest = mstrRequest.Replace("<?xml version=\"1.0\" encoding=\"utf-16\"?>", "").Replace("<?xml version=\"1.0\"?>", "");
                strRequest = mstrRequest;
                sb.Append(mstrVersion).Append("AmadeusWS_AirPriceRQ.xsl");
                strRequest = CoreLib.TransformXML(strRequest, mstrXslPath, sb.ToString(), false);
                sb.Remove(0, sb.Length);

                if (mstrRequest.Contains("ReturnBreakPoint=\"true\""))
                    returnBreakPoint = true;
            }
            catch (Exception ex)
            {
                sb.Append("Error Transforming OTA Request.").Append("\r\n").Append(ex.Message);
                throw new Exception(sb.ToString());
                sb.Remove(0, sb.Length);
            }
            if (strRequest.Length == 0)
            {
                throw new Exception("Transformation produced empty xml.");
            }
            //  *******************
            //  Create Session    *
            //  *******************
            //try
            //{
            //    if (ttProviderSystems.SessionPool)
            //    {
            //        ttAA = new AmadeusWSAdapter(ttProviderSystems, "V1");
            //        ConversationID = ttAA.CheckSessionV2();
            //    }
            //    else
            //    {
            //        ttAA = new AmadeusWSAdapter(ttProviderSystems);
            //        ConversationID = ttAA.CreateSession();
            //    }
            //}
            //catch (Exception ex)
            //{
            //    throw new Exception(sb.Append("Error Creating Session.").Append("\r\n").Append(ex.Message).ToString());
            //    sb.Remove(0, sb.Length);
            //}
            //// *******************************************************************************
            ////  Get from Transformed Request and Send Fare message to the AmadeusWS Adapter  *
            //// *******************************************************************************

            //try
            //{
            //    oDoc = new XmlDocument();
            //    oDoc.LoadXml(strRequest);
            //    oRoot = oDoc.DocumentElement;
            //}
            //catch (Exception ex)
            //{
            //    sb.Append("Error Loading Transformed Request XML Document.").Append("\r\n").Append(ex.Message);
            //    throw new Exception(sb.ToString());
            //    sb.Remove(0, sb.Length);
            //}

            if (Version == "v03_")
            {
                try
                {
                    if (ttProviderSystems.SessionPool)
                    {
                        ttAA = new AmadeusWSAdapter(ttProviderSystems, "V1");
                        ttAA.isSOAP2 = ttProviderSystems.SOAP2;
                        ConversationID = ttAA.CheckSessionV2();
                    }
                    else
                    {
                        ttAA = new AmadeusWSAdapter(ttProviderSystems);
                        ttAA.isSOAP2 = ttProviderSystems.SOAP2;
                        ConversationID = ttAA.CreateSession();
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception(sb.Append("Error Creating Session.").Append("\r\n").Append(ex.Message).ToString());
                    sb.Remove(0, sb.Length);
                }
                // *******************************************************************************
                //  Get from Transformed Request and Send Fare message to the AmadeusWS Adapter  *
                // *******************************************************************************

                try
                {
                    oDoc = new XmlDocument();
                    oDoc.LoadXml(strRequest);
                    oRoot = oDoc.DocumentElement;
                }
                catch (Exception ex)
                {
                    sb.Append("Error Loading Transformed Request XML Document.").Append("\r\n").Append(ex.Message);
                    throw new Exception(sb.ToString());
                    sb.Remove(0, sb.Length);
                }

                string strAddMultiElements = "";
                string strSellFlights = "";
                string strFarePlus = "";
                string strIgnore = "";

                oNode = oRoot.SelectSingleNode("AddMultiElements");
                strAddMultiElements = oNode.InnerXml;

                oNode = oRoot.SelectSingleNode("SellFlights");
                strSellFlights = oNode.InnerXml;

                oNode = oRoot.SelectSingleNode("FarePlus");
                strFarePlus = oNode.InnerXml;

                oNode = oRoot.SelectSingleNode("Ignore");
                strIgnore = oNode.InnerXml;

                // this is the logic:
                // - sell flights first so if there is an error, send an ignore and exit with error
                // - add names and then price
                // - ignore everything to release the seats booked
                try
                {
                    if (ttProviderSystems.SessionPool)
                    {
                        strResponse = ttAA.SendMessageV3(strSellFlights, "", "http://webservices.amadeus.com/" + ttProviderSystems.Profile + "/" + ttProviderSystems.AmadeusWSSchema.Air_SellFromRecommendation, ConversationID);
                    }
                    else
                    {
                        strResponse = ttAA.SendMessage(strSellFlights, "", "http://webservices.amadeus.com/" + ttProviderSystems.Profile + "/" + ttProviderSystems.AmadeusWSSchema.Air_SellFromRecommendation, ConversationID);
                    }
                    strResponse = strResponse.Replace(" xmlns=\"http://xml.amadeus.com/" + ttProviderSystems.AmadeusWSSchema.Air_SellFromRecommendationReply + "\"", "");
                    ConversationID = UpdateSessionID(ConversationID);

                    sb.Append(strMessage).Append(strResponse);
                    strMessage = sb.ToString();
                    sb.Remove(0, sb.Length);

                    sb.Append(mstrVersion).Append("AmadeusWS_TB_Errors.xsl");
                    strResponse = CoreLib.TransformXML(strResponse, mstrXslPath, sb.ToString(), false);
                    sb.Remove(0, sb.Length);
                    CoreLib.SendTrace(ttProviderSystems.UserID, "AmadeusWSService", "strResponse", strResponse);
                }
                catch (Exception ex)
                {
                    throw ex;
                }

                //  Log Errors
                if (strResponse.IndexOf("<Error") == -1)
                {
                    try
                    {
                        //  Send Request
                        strMessage = strRequest;

                        if (ttProviderSystems.SessionPool)
                        {
                            strResponse = ttAA.SendMessageV3(strAddMultiElements, "", "http://webservices.amadeus.com/" + ttProviderSystems.Profile + "/" + ttProviderSystems.AmadeusWSSchema.PNR_AddMultiElements, ConversationID);
                        }
                        else
                        {
                            strResponse = ttAA.SendMessage(strAddMultiElements, "", "http://webservices.amadeus.com/" + ttProviderSystems.Profile + "/" + ttProviderSystems.AmadeusWSSchema.PNR_AddMultiElements, ConversationID);
                        }
                        strResponse = strResponse.Replace(" xmlns=\"http://xml.amadeus.com/" + ttProviderSystems.AmadeusWSSchema.PNR_Reply + "\"", "");
                        strPNRReply = strResponse;
                        ConversationID = UpdateSessionID(ConversationID);

                        sb.Append(strMessage).Append(strResponse);
                        strMessage = sb.ToString();
                        sb.Remove(0, sb.Length);

                        sb.Append(mstrVersion).Append("AmadeusWS_TB_Errors.xsl");
                        strResponse = CoreLib.TransformXML(strResponse, mstrXslPath, sb.ToString(), false);
                        sb.Remove(0, sb.Length);
                        CoreLib.SendTrace(ttProviderSystems.UserID, "AmadeusWSService", "strResponse", strResponse);
                    }
                    catch (Exception ex)
                    {
                        throw ex;
                    }

                    if (strResponse.IndexOf("<Error") == -1)
                    {

                        // ************************************************************************************
                        //  Get from Transformed Request and Send FarePlus_DisplayLowestApplicableFare_Query  *
                        // ************************************************************************************
                        try
                        {
                            //  Send Request
                            sb.Append(strMessage).Append(strFarePlus);
                            strMessage = sb.ToString();
                            sb.Remove(0, sb.Length);

                            if (ttProviderSystems.SessionPool)
                            {
                                if (strFarePlus.StartsWith("<Fare_PricePNRWithLowerFares>"))
                                {
                                    strResponse = ttAA.SendMessageV3(strFarePlus, "", "http://webservices.amadeus.com/" + ttProviderSystems.Profile + "/" + ttProviderSystems.AmadeusWSSchema.Fare_PricePNRWithLowerFares, ConversationID);
                                    strResponse = strResponse.Replace(" xmlns=\"http://xml.amadeus.com/" + ttProviderSystems.AmadeusWSSchema.Fare_PricePNRWithLowerFaresReply + "\"", "");
                                }
                                else
                                {
                                    strResponse = ttAA.SendMessageV3(strFarePlus, "", "http://webservices.amadeus.com/" + ttProviderSystems.Profile + "/" + ttProviderSystems.AmadeusWSSchema.Fare_PricePNRWithBookingClass, ConversationID);
                                    strResponse = strResponse.Replace(" xmlns=\"http://xml.amadeus.com/" + ttProviderSystems.AmadeusWSSchema.Fare_PricePNRWithBookingClassReply + "\"", "");
                                }
                            }
                            else
                            {
                                if (strFarePlus.StartsWith("<Fare_PricePNRWithLowerFares>"))
                                {
                                    strResponse = ttAA.SendMessageV3(strFarePlus, "", "http://webservices.amadeus.com/" + ttProviderSystems.Profile + "/" + ttProviderSystems.AmadeusWSSchema.Fare_PricePNRWithLowerFares, ConversationID);
                                    strResponse = strResponse.Replace(" xmlns=\"http://xml.amadeus.com/" + ttProviderSystems.AmadeusWSSchema.Fare_PricePNRWithLowerFaresReply + "\"", "");
                                }
                                else
                                {
                                    strResponse = ttAA.SendMessage(strFarePlus, "", "http://webservices.amadeus.com/" + ttProviderSystems.Profile + "/" + ttProviderSystems.AmadeusWSSchema.Fare_PricePNRWithBookingClass, ConversationID);
                                    strResponse = strResponse.Replace(" xmlns=\"http://xml.amadeus.com/" + ttProviderSystems.AmadeusWSSchema.Fare_PricePNRWithBookingClassReply + "\"", "");
                                }
                            }

                            ConversationID = UpdateSessionID(ConversationID);

                            sb.Append(strMessage).Append(strResponse);
                            strMessage = sb.ToString();
                            sb.Remove(0, sb.Length);

                            // ignore everything
                            if (ttProviderSystems.SessionPool)
                            {
                                strIgnore = ttAA.SendMessageV3(strIgnore, "", "http://webservices.amadeus.com/" + ttProviderSystems.Profile + "/" + ttProviderSystems.AmadeusWSSchema.Command_Cryptic, ConversationID);
                            }
                            else
                            {
                                strIgnore = ttAA.SendMessage(strIgnore, "", "http://webservices.amadeus.com/" + ttProviderSystems.Profile + "/" + ttProviderSystems.AmadeusWSSchema.Command_Cryptic, ConversationID);
                            }
                            strIgnore = strIgnore.Replace(" xmlns=\"http://xml.amadeus.com/" + ttProviderSystems.AmadeusWSSchema.Command_CrypticReply + "\"", "");
                            ConversationID = UpdateSessionID(ConversationID);
                            //  Close Session
                            if (ttProviderSystems.SessionPool)
                            {
                                ConversationID = SubSessionID(ConversationID);
                                ttAA.CloseSessionFromPool(ConversationID);
                            }
                            else
                            {
                                ttAA.CloseSession(ConversationID);
                            }
                            ttAA = null;
                        }
                        catch (Exception ex)
                        {
                            throw ex;
                        }
                        //  *******************************************************************
                        //  Add AirTravelerAvail/PassengerTypeQuantity to AmadeusWS Response    *
                        //  *******************************************************************
                        try
                        {
                            strRequest = oRoot.SelectSingleNode("AirTravelerAvail").InnerXml;
                            oDocResp = new XmlDocument();
                            oDocResp.LoadXml(strResponse);
                            oRootResp = oDocResp.DocumentElement;
                            oNodeResp = oDocResp.CreateNode(XmlNodeType.Element, "", "AirTravelerAvail", "");
                            oNodeResp.InnerXml = strRequest;
                            oRootResp.AppendChild(oNodeResp);
                            strRequest = oRoot.SelectSingleNode("FlightSegments").InnerXml;
                            oNodeResp = oDocResp.CreateNode(XmlNodeType.Element, "", "FlightSegments", "");
                            oNodeResp.InnerXml = strRequest;
                            oRootResp.AppendChild(oNodeResp);
                            strResponse = oDocResp.OuterXml;
                            oDocResp = null;

                            if (strResponse.IndexOf("</Fare_PricePNRWithLowerFaresReply>") != -1)
                            {
                                sb.Append(strPNRReply).Append("</Fare_PricePNRWithLowerFaresReply>");
                                strResponse = strResponse.Replace("</Fare_PricePNRWithLowerFaresReply>", sb.ToString());
                            }
                            else
                            {
                                sb.Append(strPNRReply).Append("</Fare_PricePNRWithBookingClassReply>");
                                strResponse = strResponse.Replace("</Fare_PricePNRWithBookingClassReply>", sb.ToString());
                            }

                            sb.Remove(0, sb.Length);
                        }
                        catch (Exception ex)
                        {
                            sb.Append("Error Loading AirTravelerAvail into Air Price Response.").Append("\r\n").Append(ex.Message);
                            throw new Exception(sb.ToString());
                            sb.Remove(0, sb.Length);
                        }
                    }
                    else
                    {
                        sb.Append("<PNR_Reply>").Append(strResponse).Append("</PNR_Reply>");
                        strResponse = sb.ToString();
                        sb.Remove(0, sb.Length);
                    }
                }
                else
                {
                    // sell segments has failed
                    // ignore flights to release seats and close session
                    // ignore everything
                    if (ttProviderSystems.SessionPool)
                    {
                        strIgnore = ttAA.SendMessageV3(strIgnore, "", "http://webservices.amadeus.com/" + ttProviderSystems.Profile + "/" + ttProviderSystems.AmadeusWSSchema.Command_Cryptic, ConversationID);
                    }
                    else
                    {
                        strIgnore = ttAA.SendMessage(strIgnore, "", "http://webservices.amadeus.com/" + ttProviderSystems.Profile + "/" + ttProviderSystems.AmadeusWSSchema.Command_Cryptic, ConversationID);
                    }
                    strIgnore = strIgnore.Replace(" xmlns=\"http://xml.amadeus.com/" + ttProviderSystems.AmadeusWSSchema.Command_CrypticReply + "\"", "");
                    ConversationID = UpdateSessionID(ConversationID);
                    //  Close Session
                    if (ttProviderSystems.SessionPool)
                    {
                        ConversationID = SubSessionID(ConversationID);
                        ttAA.CloseSessionFromPool(ConversationID);
                    }
                    else
                    {
                        ttAA.CloseSession(ConversationID);
                    }
                    ttAA = null;

                    sb.Append("<PNR_Reply>").Append(strResponse).Append("</PNR_Reply>");
                    strResponse = sb.ToString();
                    sb.Remove(0, sb.Length);
                }
            }
            else
            {
                // *******************************************************************************
                //  Get from Transformed Request and Send Fare message to the AmadeusWS Adapter  *
                // *******************************************************************************
                try
                {
                    if (ttProviderSystems.SessionPool)
                    {
                        ttAA = new AmadeusWSAdapter(ttProviderSystems, "V1");
                        ttAA.isSOAP2 = ttProviderSystems.SOAP2;
                        ConversationID = ttAA.CheckSessionV2();
                    }
                    else
                    {
                        ttAA = new AmadeusWSAdapter(ttProviderSystems);
                        ttAA.isSOAP2 = ttProviderSystems.SOAP2;
                        ConversationID = ttAA.CreateSession();
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception(sb.Append("Error Creating Session.").Append("\r\n").Append(ex.Message).ToString());
                    sb.Remove(0, sb.Length);
                }

                try
                {
                    oDoc = new XmlDocument();
                    oDoc.LoadXml(strRequest);
                    oRoot = oDoc.DocumentElement;
                }
                catch (Exception ex)
                {
                    sb.Append("Error Loading Transformed Request XML Document.").Append("\r\n").Append(ex.Message);
                    throw new Exception(sb.ToString());
                    sb.Remove(0, sb.Length);
                }

                oNode = oRoot.SelectSingleNode("Fare_InformativePricingWithoutPNR");

                if (oNode == null)
                    oNode = oRoot.SelectSingleNode("Fare_InformativeBestPricingWithoutPNR");

                strRequest = oNode.OuterXml;

                try
                {
                    if (ttProviderSystems.SessionPool)
                    {
                        ttAA = new AmadeusWSAdapter(ttProviderSystems, "V1");
                        ttAA.isSOAP2 = ttProviderSystems.SOAP2;
                        if (strRequest.StartsWith("<Fare_InformativePricingWithoutPNR") == true)
                        {
                            strResponse = ttAA.SendMessageV3(strRequest, "", "http://webservices.amadeus.com/" + ttProviderSystems.Profile + "/" + ttProviderSystems.AmadeusWSSchema.Fare_InformativePricingWithoutPNR, ConversationID);
                            strResponse = strResponse.Replace(" xmlns=\"http://xml.amadeus.com/" + ttProviderSystems.AmadeusWSSchema.Fare_InformativePricingWithoutPNRReply + "\"", "");
                            sb.Append(mstrVersion).Append("AmadeusWS_AirPrice1RS.xsl");

                            strResponse = CoreLib.TransformXML("<FIP>" + strRequest + strResponse + "</FIP>", mstrXslPath, sb.ToString(), false);
                            sb.Remove(0, sb.Length);
                        }
                        else
                        {
                            strResponse = ttAA.SendMessageV3(strRequest, "", "http://webservices.amadeus.com/" + ttProviderSystems.Profile + "/" + ttProviderSystems.AmadeusWSSchema.Fare_InformativeBestPricingWithoutPNR, ConversationID);
                            strResponse = strResponse.Replace(" xmlns=\"http://xml.amadeus.com/" + ttProviderSystems.AmadeusWSSchema.Fare_InformativeBestPricingWithoutPNRReply + "\"", "");

                            sb.Append(mstrVersion).Append("AmadeusWS_LowFareFlights1RS.xsl");

                            strResponse = CoreLib.TransformXML("<FIP>" + strRequest + strResponse + "</FIP>", mstrXslPath, sb.ToString(), false);
                            sb.Remove(0, sb.Length);
                        }
                    }
                    else
                    {
                        ttAA = new AmadeusWSAdapter(ttProviderSystems);
                        ttAA.isSOAP2 = ttProviderSystems.SOAP2;
                        if (strRequest.StartsWith("<Fare_InformativePricingWithoutPNR") == true)
                        {
                            strResponse = ttAA.SendMessage(strRequest, "", "http://webservices.amadeus.com/" + ttProviderSystems.Profile + "/" + ttProviderSystems.AmadeusWSSchema.Fare_InformativePricingWithoutPNR, ConversationID);
                            strResponse = strResponse.Replace(" xmlns=\"http://xml.amadeus.com/" + ttProviderSystems.AmadeusWSSchema.Fare_InformativePricingWithoutPNRReply + "\"", "");

                            sb.Append(mstrVersion).Append("AmadeusWS_AirPrice1RS.xsl");

                            strResponse = CoreLib.TransformXML("<FIP>" + strRequest + strResponse + "</FIP>", mstrXslPath, sb.ToString(), false);
                            sb.Remove(0, sb.Length);
                        }
                        else
                        {
                            strResponse = ttAA.SendMessage(strRequest, "", "http://webservices.amadeus.com/" + ttProviderSystems.Profile + "/" + ttProviderSystems.AmadeusWSSchema.Fare_InformativeBestPricingWithoutPNR, ConversationID);
                            strResponse = strResponse.Replace(" xmlns=\"http://xml.amadeus.com/" + ttProviderSystems.AmadeusWSSchema.Fare_InformativeBestPricingWithoutPNRReply + "\"", "");

                            sb.Append(mstrVersion).Append("AmadeusWS_LowFareFlights1RS.xsl");

                            strResponse = CoreLib.TransformXML("<FIP>" + strRequest + strResponse + "</FIP>", mstrXslPath, sb.ToString(), false);
                            sb.Remove(0, sb.Length);
                        }
                    }

                    if (strRequest.StartsWith("<Fare_InformativeBestPricingWithoutPNR") == true
                        && strResponse.IndexOf("<Error>") == -1
                        && returnBreakPoint)
                    {
                        ConversationID = UpdateSessionID(ConversationID);
                        strRequest = "<Command_Cryptic><messageAction><messageFunctionDetails><messageFunction>M</messageFunction></messageFunctionDetails></messageAction><longTextString><textStringDetails>FQH1</textStringDetails></longTextString></Command_Cryptic>";
                        string strCrypticResp = ttAA.SendMessage(strRequest, "", "http://webservices.amadeus.com/" + ttProviderSystems.Profile + "/" + ttProviderSystems.AmadeusWSSchema.Command_Cryptic, ConversationID);
                        strCrypticResp = strCrypticResp.Replace(" xmlns=\"http://xml.amadeus.com/" + ttProviderSystems.AmadeusWSSchema.Command_CrypticReply + "\"", "");

                        XmlDocument oDocCryptic = new XmlDocument();
                        oDocCryptic.LoadXml(strCrypticResp);
                        XmlElement oRootCryptic = oDocCryptic.DocumentElement;
                        string strScreen = oRootCryptic.SelectSingleNode("longTextString/textStringDetails").InnerText;

                        strScreen = formatAmadeus(strScreen);
                        if (strScreen.Length > 0)
                        {
                            strScreen = sb.Append("<Screen>").Append(strScreen).Append("</Screen>").ToString();
                            sb.Remove(0, sb.Length);
                            strScreen = formatBreakPoint(strScreen);
                            strResponse = strResponse.Replace("</Fare_InformativeBestPricingWithoutPNRReply>", strScreen + "</Fare_InformativeBestPricingWithoutPNRReply>");
                        }
                    }

                    ConversationID = UpdateSessionID(ConversationID);

                    if (ttProviderSystems.SessionPool)
                    {
                        ttAA.CloseSessionFromPool(ConversationID);
                    }
                    else
                    {
                        ttAA.CloseSession(ConversationID);
                    }

                    ttAA = null;
                }
                catch (Exception ex)
                {
                    throw ex;
                }
                //  *******************************************************************
                //  Add AirTravelerAvail/PassengerTypeQuantity to AmadeusWS Response    *
                //  *******************************************************************
                try
                {
                    strRequest = oRoot.SelectSingleNode("AirTravelerAvail").InnerXml;
                    oDocResp = new XmlDocument();
                    oDocResp.LoadXml(strResponse);
                    oRootResp = oDocResp.DocumentElement;
                    oNodeResp = oDocResp.CreateNode(XmlNodeType.Element, "", "AirTravelerAvail", "");
                    oNodeResp.InnerXml = strRequest;
                    oRootResp.AppendChild(oNodeResp);
                    strRequest = oRoot.SelectSingleNode("FlightSegments").InnerXml;
                    oNodeResp = oDocResp.CreateNode(XmlNodeType.Element, "", "FlightSegments", "");
                    oNodeResp.InnerXml = strRequest;
                    oRootResp.AppendChild(oNodeResp);
                    strResponse = oDocResp.OuterXml;
                    oDocResp = null;
                }
                catch (Exception ex)
                {
                    sb.Append("Error Loading AirTravelerAvail into Air Price Response.").Append("\r\n").Append(ex.Message);
                    throw new Exception(sb.ToString());
                    sb.Remove(0, sb.Length);
                }
            }

            // *****************************************************************
            //  Transform Native AmadeusWS AirPrice Response into OTA Response   *
            // ***************************************************************** 
            try
            {
                CoreLib.SendTrace(ttProviderSystems.UserID, "AmadeusWSAdapter", "Response to transform", strResponse);
                sb.Append(mstrVersion).Append("AmadeusWS_AirPriceRS.xsl");
                strResponse = CoreLib.TransformXML(strResponse, mstrXslPath, sb.ToString(), false);
                sb.Remove(0, sb.Length);
            }
            catch (Exception ex)
            {
                throw new Exception(sb.Append("Error Transforming Native Response.").Append("\r\n").Append(ex.Message).ToString());
                sb = null;
            }
            ResponseTime = DateTime.Now;
            if (ttProviderSystems.LogNative)
            {
                TripXMLTools.TripXMLLog.LogMessage("AirPrice", ref strMessage, RequestTime, ResponseTime, "Native", ttProviderSystems.Provider, ttProviderSystems.System, ttProviderSystems.UserName);
                //LogMessageToFile("AirPrice", strMessage, RequestTime, ResponseTime);
            }
            return strResponse;
        }
        catch (Exception exx)
        {
            addLog("<EXOR><M>" + mstrRequest + "<BL/>", ttProviderSystems.UserID);
            throw exx;
        }
        finally
        {
            if (!(oNode == null))
            {
                oNode = null;
            }
            if (!(oRoot == null))
            {
                oRoot = null;
            }
            if (!(oDoc == null))
            {
                oDoc = null;
            }
            if (!(ConversationID == null) && !(ttAA == null) && Version == "v03_")
            {
                if (ConversationID.Length > 0)
                {
                    if (ttProviderSystems.SessionPool)
                    {
                        ConversationID = SubSessionID(ConversationID);
                        ttAA.CloseSessionFromPool(ConversationID);
                    }
                    else
                    {
                        ttAA.CloseSession(ConversationID);
                    }
                }
            }
            if (!(ttAA == null))
            {
                ttAA = null;
            }
        }
    }

    public string AirRules()
    {
        AmadeusWSAdapter ttAA = null;
        XmlDocument oDoc = null;
        XmlElement oRoot = null;
        XmlNode oNode = null;
        XmlDocument oDocResp = null;
        XmlElement oRootResp = null;
        XmlNodeList oNodeRespList = null;
        XmlNodeList oNodePaxList = null;
        string ConversationID = "";
        string strRequest = "";
        string strRuleReqInfo = "";
        string strResponse = "";
        string Categories = "";
        string FareBasisCode = "";
        DateTime RequestTime;
        DateTime ResponseTime;
        string strMessage = "";
        string strDepDates = "";
        try
        {
            // *****************************************************************
            //  Transform OTA AirRules Request into Several Navite Requests    *
            // ***************************************************************** 

            RequestTime = DateTime.Now;
            mstrRequest = mstrRequest.Replace("<?xml version=\"1.0\" encoding=\"utf-16\"?>", "").Replace("<?xml version=\"1.0\"?>", "");
            strRequest = mstrRequest;
            sb.Append(mstrVersion).Append("AmadeusWS_AirRulesRQ.xsl");
            strRequest = CoreLib.TransformXML(strRequest, mstrXslPath, sb.ToString(), false);
            sb.Remove(0, sb.Length);

            if ((strRequest.Length == 0))
            {
                throw new Exception("Transformation produced empty xml.");
            }

            //  *******************
            //  Create Session    *
            //  *******************
            //if (ttProviderSystems.SessionPool)
            //{
            //    ttAA = new AmadeusWSAdapter(ttProviderSystems, "V1");
            //    ConversationID = ttAA.CheckSessionV2();
            //}
            //else
            //{
            ttAA = new AmadeusWSAdapter(ttProviderSystems);
            ttAA.isSOAP2 = ttProviderSystems.SOAP2;
            ConversationID = ttAA.CreateSession();
            //}

            if (ConversationID.Length == 0)
            {
                throw new Exception("Cannot open conversion with Amadeus.");
            }


            if (mstrVersion == "v03_")
            {
                try
                {
                    oDoc = new XmlDocument();
                    oDoc.LoadXml(strRequest);
                    oRoot = oDoc.DocumentElement;

                    oNode = oRoot.SelectSingleNode("Fare_InformativePricingWithoutPNR");
                    strRequest = oNode.OuterXml;
                }
                catch (Exception ex)
                {
                    sb.Append("Error Loading Transformed Request XML Document.").Append("\r\n").Append(ex.Message);
                    throw new Exception(sb.ToString());
                }

                // send Informative Pricing request
                //if (ttProviderSystems.SessionPool)
                //{
                //    strResponse = ttAA.SendMessageV3(strRequest, "", "http://webservices.amadeus.com/" + ttProviderSystems.Profile + "/" + ttProviderSystems.AmadeusWSSchema.Fare_InformativePricingWithoutPNR, ConversationID);
                //}
                //else
                //{
                strResponse = ttAA.SendMessage(strRequest, "", "http://webservices.amadeus.com/" + ttProviderSystems.Profile + "/" + ttProviderSystems.AmadeusWSSchema.Fare_InformativePricingWithoutPNR, ConversationID);
                //}
                strResponse = strResponse.Replace(" xmlns=\"http://xml.amadeus.com/" + ttProviderSystems.AmadeusWSSchema.Fare_InformativePricingWithoutPNRReply + "\"", "");
                ConversationID = UpdateSessionID(ConversationID);

                // now we need to find how many different fare basis codes we have in the response
                // we will then send one check rules message per different fare basis code in response
                // finally we will collect all fare rules replies and aggregate into one response back

                oDocResp = new XmlDocument();
                oDocResp.LoadXml(strResponse);
                oRootResp = oDocResp.DocumentElement;

                oNodeRespList = oRootResp.SelectNodes("mainGroup/pricingGroupLevelGroup");
                oNodePaxList = oRoot.SelectNodes("Fare_InformativePricingWithoutPNR/passengersGroup");

                if (oNodeRespList.Count > 0)
                {
                    string FBCodes = "";
                    string FBCode = "";
                    string[] arrFBCode = new string[20];
                    string[] arrDepDate = new string[20];
                    string[] arrDepCity = new string[20];
                    string[] arrArrCity = new string[20];
                    string[] arrFCInd = new string[20];
                    string[] arrPaxInd = new string[20];
                    string[] arrPaxType = new string[20];
                    string[] arrFBExist = new string[20];

                    int i = 0;
                    int Paxnum = 1;
                    string sPaxType = "";

                    foreach (XmlNode oNodeResp in oNodeRespList)
                    {
                        XmlNodeList oNodeSegList = oNodeResp.SelectNodes("fareInfoGroup/segmentLevelGroup");

                        int segnum = 1;
                        int fbcnum = 0;
                        FBCodes = "";

                        strRequest = "<Fare_CheckRules><msgType><messageFunctionDetails><messageFunction>712</messageFunction></messageFunctionDetails></msgType><itemNumber><itemNumberDetails><number>" + Paxnum + "</number></itemNumberDetails></itemNumber><fareRule><tarifFareRule><ruleSectionId>50</ruleSectionId><ruleSectionId>15</ruleSectionId><ruleSectionId>16</ruleSectionId><ruleSectionId>14</ruleSectionId></tarifFareRule></fareRule></Fare_CheckRules>";

                        strResponse = ttAA.SendMessage(strRequest, "", "http://webservices.amadeus.com/" + ttProviderSystems.Profile + "/" + ttProviderSystems.AmadeusWSSchema.Fare_CheckRules, ConversationID);
                        strResponse = strResponse.Replace(" xmlns=\"http://xml.amadeus.com/" + ttProviderSystems.AmadeusWSSchema.Fare_CheckRulesReply + "\"", "");
                        ConversationID = UpdateSessionID(ConversationID);

                        XmlDocument oDocFCR = new XmlDocument();
                        oDocFCR.LoadXml(strResponse);
                        XmlElement oRootFCR = oDocFCR.DocumentElement;
                        XmlNodeList oNodeFCRList = oRootFCR.SelectNodes("flightDetails");
                        string[] arrFCRbasis = new string[20];
                        int iFCR = 0;

                        foreach (XmlNode oNodeFCR in oNodeFCRList)
                        {
                            arrFCRbasis.SetValue(oNodeFCR.SelectSingleNode("qualificationFareDetails/additionalFareDetails/rateClass").InnerText, iFCR);
                            iFCR++;
                        }

                        foreach (XmlNode oNodeSeg in oNodeSegList)
                        {
                            FBCode = oNodeSeg.SelectSingleNode("fareBasis/additionalFareDetails/rateClass").InnerText;

                            if (FBCodes.IndexOf(FBCode) == -1)
                            {
                                arrFBExist.SetValue("N", i);

                                for (int iSearchFB = 0; iSearchFB < arrFCRbasis.Length; iSearchFB++)
                                {
                                    if (arrFCRbasis[iSearchFB] == FBCode
                                        || (FBCode.Contains("CH")
                                            && ((FBCode.Length > 4 && arrFCRbasis[iSearchFB] == FBCode.Substring(0, FBCode.Length - 4) && FBCode.Substring(0, FBCode.Length - 2).Substring(FBCode.Substring(0, FBCode.Length - 2).Length - 2) == "CH")
                                                || (arrFCRbasis[iSearchFB] == FBCode.Substring(0, FBCode.Length - 2) && FBCode.Substring(FBCode.Length - 2) == "CH"))))
                                    {
                                        fbcnum = iSearchFB + 1;
                                        break;
                                    }
                                }
                            }
                            else
                                arrFBExist.SetValue("Y", i);

                            FBCodes = FBCodes + FBCode + "-";
                            arrFBCode.SetValue(FBCode, i);
                            arrFCInd.SetValue(fbcnum.ToString(), i);
                            arrPaxInd.SetValue(Paxnum.ToString(), i);

                            sPaxType = oNodePaxList[Paxnum - 1].SelectSingleNode("ptcGroup/discountPtc/valueQualifier").InnerXml;

                            if (sPaxType == "CNN")
                                sPaxType = "CHD";

                            arrPaxType.SetValue(sPaxType, i);
                            arrDepDate.SetValue(oNode.SelectSingleNode("tripsGroup/segmentGroup[position()=" + segnum.ToString() + "]/segmentInformation/flightDate/departureDate").InnerText, i);
                            arrDepCity.SetValue(oNode.SelectSingleNode("tripsGroup/segmentGroup[position()=" + segnum.ToString() + "]/segmentInformation/boardPointDetails/trueLocationId").InnerText, i);
                            arrArrCity.SetValue(oNode.SelectSingleNode("tripsGroup/segmentGroup[position()=" + segnum.ToString() + "]/segmentInformation/offpointDetails/trueLocationId").InnerText, i);

                            i++;

                            segnum++;
                        }

                        Paxnum++;
                    }

                    oNode = oRoot.SelectSingleNode("Fare_CheckRules");
                    strRequest = oNode.OuterXml;

                    string strResponses = "<Fare_CheckRulesReplies>";
                    string strReq = strRequest;
                    strDepDates = "<DepartureDates>";
                    string strCityPairs = "<CityPairs>";
                    string strPaxTypes = "<PaxTypes>";

                    string[] arrFRResp = new string[20];

                    for (int j = 0; j < i; j++)
                    {
                        strRequest = strReq;
                        strRequest = strRequest.Replace("<number>0x</number>", "<number>0" + arrPaxInd[j] + "</number>");
                        strRequest = strRequest.Replace("<number>n</number>", "<number>" + arrFCInd[j] + "</number>");

                        //if (ttProviderSystems.SessionPool)
                        //{
                        //    strResponse = ttAA.SendMessageV3(strRequest, "", "http://webservices.amadeus.com/" + ttProviderSystems.Profile + "/" + ttProviderSystems.AmadeusWSSchema.Fare_CheckRules, ConversationID);
                        //}
                        //else
                        //{
                        if (arrFBExist[j] == "N")
                        {
                            strResponse = ttAA.SendMessage(strRequest, "", "http://webservices.amadeus.com/" + ttProviderSystems.Profile + "/" + ttProviderSystems.AmadeusWSSchema.Fare_CheckRules, ConversationID);
                            //}
                            strResponse = strResponse.Replace(" xmlns=\"http://xml.amadeus.com/" + ttProviderSystems.AmadeusWSSchema.Fare_CheckRulesReply + "\"", "");
                            ConversationID = UpdateSessionID(ConversationID);
                        }
                        else
                        {
                            int iFBMatch = 0;
                            for (int k = 0; k < j; k++)
                            {
                                if (arrFBCode[j] == arrFBCode[k])
                                {
                                    iFBMatch = k;
                                    strResponse = arrFRResp[k];
                                }
                            }
                        }

                        arrFRResp.SetValue(strResponse, j);
                        strResponses = strResponses + strResponse;
                        strDepDates = strDepDates + "<DepartureDate>" + arrDepDate[j] + "</DepartureDate>";
                        strCityPairs = strCityPairs + "<CityPair><Dep>" + arrDepCity[j] + "</Dep>" + "<Arr>" + arrArrCity[j] + "</Arr></CityPair>";
                        strPaxTypes = strPaxTypes + "<PaxType>" + arrPaxType[j] + "</PaxType>";
                    }

                    strDepDates = strDepDates + "</DepartureDates>";
                    strCityPairs = strCityPairs + "</CityPairs>";
                    strPaxTypes = strPaxTypes + "</PaxTypes>";
                    strResponses = strResponses + strDepDates + strCityPairs + strPaxTypes + "</Fare_CheckRulesReplies>";
                    strResponse = strResponses;
                }
            }
            else
            {
                // ****************************************************************************
                //  Get RuleReqInfo, FareBasisCode and Categories from Transformed Request    * 
                //  and Send Fare_DisplayFaresForCityPairPlus_Query to the AmadeusWS Adapter    *
                // ****************************************************************************
                oDoc = new XmlDocument();
                oDoc.LoadXml(strRequest);
                oRoot = oDoc.DocumentElement;
                //  Get the RuleReqInfo Node
                strRuleReqInfo = oRoot.SelectSingleNode("RuleReqInfo").OuterXml;
                //  Get Categories. If any
                if (oRoot.SelectSingleNode("fareRule") != null)
                    Categories = oRoot.SelectSingleNode("fareRule").OuterXml;
                //  Get FareBasisCode (FareReference)
                FareBasisCode = oRoot.SelectSingleNode("RuleReqInfo/FareReference").InnerText;
                //  Display Fares Request (Fare_DisplayFaresForCityPairPlus_Query)
                oNode = oRoot.SelectSingleNode("Fare_DisplayFaresForCityPair");
                strRequest = oNode.OuterXml;

                if (FareBasisCode.Length == 0)
                {
                    throw new Exception("Fare Reference Code is Missing in the Request.");
                }

                //  Send Request
                strMessage = strRequest;

                //if (ttProviderSystems.SessionPool)
                //{
                //    strResponse = ttAA.SendMessageV3(strRequest, "", "http://webservices.amadeus.com/" + ttProviderSystems.Profile + "/" + ttProviderSystems.AmadeusWSSchema.Fare_DisplayFaresForCityPair, ConversationID);
                //}
                //else
                //{
                strResponse = ttAA.SendMessage(strRequest, "", "http://webservices.amadeus.com/" + ttProviderSystems.Profile + "/" + ttProviderSystems.AmadeusWSSchema.Fare_DisplayFaresForCityPair, ConversationID);
                //}
                strResponse = strResponse.Replace(" xmlns=\"http://xml.amadeus.com/" + ttProviderSystems.AmadeusWSSchema.Fare_DisplayFaresForCityPairReply + "\"", "");
                ConversationID = UpdateSessionID(ConversationID);

                sb.Append(strMessage).Append(strResponse);
                strMessage = sb.ToString();
                sb.Remove(0, sb.Length);

                // *************************************
                //  Find Fare Basis Code in Response   *
                // ************************************* 
                oDoc.LoadXml(strResponse);
                oRoot = oDoc.DocumentElement;
                sb.Append("flightDetails/itemGrp[fareQualifItem/additionalFareDetails/rateClass=\'").Append(FareBasisCode).Append("\']");
                oNode = oRoot.SelectSingleNode(sb.ToString());
                sb.Remove(0, sb.Length);

                //  If FareBasisCode found get the rules
                if (oNode != null)
                {
                    sb.Append("<Fare_CheckRules><msgType><messageFunctionDetails><messageFunction>712</messageFunction></messageFunctionDetails></msgType><itemNumber><itemNumberDetails><number>").Append(oNode.SelectSingleNode("itemNb/itemNumberDetails/number").InnerXml).Append("</number></itemNumberDetails></itemNumber>").Append(Categories).Append("</Fare_CheckRules>");
                    strRequest = sb.ToString();
                    sb.Remove(0, sb.Length);
                    //  Send MoveDown Request
                    sb.Append(strMessage).Append(strRequest);
                    strMessage = sb.ToString();
                    sb.Remove(0, sb.Length);
                    //if (ttProviderSystems.SessionPool)
                    //{
                    //    strResponse = ttAA.SendMessageV3(strRequest, "", "http://webservices.amadeus.com/" + ttProviderSystems.Profile + "/" + ttProviderSystems.AmadeusWSSchema.Fare_CheckRules, ConversationID);
                    //}
                    //else
                    //{
                    strResponse = ttAA.SendMessage(strRequest, "", "http://webservices.amadeus.com/" + ttProviderSystems.Profile + "/" + ttProviderSystems.AmadeusWSSchema.Fare_CheckRules, ConversationID);
                    //}
                    strResponse = strResponse.Replace(" xmlns=\"http://xml.amadeus.com/" + ttProviderSystems.AmadeusWSSchema.Fare_CheckRulesReply + "\"", "");
                    ConversationID = UpdateSessionID(ConversationID);
                    sb.Append(strMessage).Append(strResponse);
                    strMessage = sb.ToString();
                    sb.Remove(0, sb.Length);

                    sb.Append(strRuleReqInfo).Append("</Fare_CheckRulesReply>");
                    strResponse = strResponse.Replace("</Fare_CheckRulesReply>", sb.ToString());
                    sb.Remove(0, sb.Length);
                }
            }

            //  Close Session
            //if (ttProviderSystems.SessionPool)
            //{
            //    ConversationID = SubSessionID(ConversationID);
            //    ttAA.CloseSessionFromPool(ConversationID);
            //}
            //else
            //{
            ttAA.CloseSession(ConversationID);
            //}
            //  Session Closed
            ConversationID = "";

            // *****************************************************************
            //  Transform Native AmadeusWS AirRules Response into OTA Response   *
            // ***************************************************************** 
            sb.Append(mstrVersion).Append("AmadeusWS_AirRulesRS.xsl");
            strResponse = CoreLib.TransformXML(strResponse, mstrXslPath, sb.ToString(), false);
            sb.Remove(0, sb.Length);

            ResponseTime = DateTime.Now;
            if (ttProviderSystems.LogNative)
            {
                TripXMLTools.TripXMLLog.LogMessage("AirRules", ref strMessage, RequestTime, ResponseTime, "Native", ttProviderSystems.Provider, ttProviderSystems.System, ttProviderSystems.UserName);
                //LogMessageToFile("AirRules", strMessage, RequestTime, ResponseTime);
            }
            return strResponse;
        }
        catch (Exception exx)
        {
            addLog("<EXOR><M>" + mstrRequest + "<BL/>", ttProviderSystems.UserID);
            throw exx;
        }
        finally
        {
            if (!(oNode == null))
            {
                oNode = null;
            }
            if (!(oRoot == null))
            {
                oRoot = null;
            }
            if (!(oDoc == null))
            {
                oDoc = null;
            }
            if ((!(ConversationID == null) && !(ttAA == null)))
            {
                if ((ConversationID.Length > 0))
                {
                    //if (ttProviderSystems.SessionPool)
                    //{
                    //    ConversationID = SubSessionID(ConversationID);
                    //    ttAA.CloseSessionFromPool(ConversationID);
                    //}
                    //else
                    //{
                    ttAA.CloseSession(ConversationID);
                    //}
                }
            }
            if (!(ttAA == null))
            {
                ttAA = null;
            }
        }
    }

    public string AirSeatMap()
    {
        AmadeusWSAdapter ttAA = null;
        string strRequest = "";
        string strResponse = "";
        try
        {
            strRequest = mstrRequest;
            sb.Append(mstrVersion).Append("AmadeusWS_AirSeatMapRQ.xsl");
            strRequest = CoreLib.TransformXML(strRequest, mstrXslPath, sb.ToString(), false);
            sb.Remove(0, sb.Length);
        }
        catch (Exception ex)
        {
            sb.Append(sb.Append("Error Transforming OTA Request. ").Append(ex.Message).ToString());
            throw new Exception(sb.ToString());
            sb.Remove(0, sb.Length);
        }
        if ((strRequest.Length == 0))
        {
            throw new Exception("Transformation produced empty xml.");
        }
        // *******************************************************************************
        //  Send Transformed Request to the AmadeusWS Adapter and Getting Native Response  *
        // ******************************************************************************* 
        try
        {
            if (ttProviderSystems.SessionPool)
            {
                ttAA = new AmadeusWSAdapter(ttProviderSystems, "V1");
                ttAA.isSOAP2 = ttProviderSystems.SOAP2;
                strResponse = ttAA.SendMessageV3(strRequest, "", "http://webservices.amadeus.com/" + ttProviderSystems.Profile + "/" + ttProviderSystems.AmadeusWSSchema.Air_RetrieveSeatMap, "");
            }
            else
            {
                ttAA = new AmadeusWSAdapter(ttProviderSystems);
                ttAA.isSOAP2 = ttProviderSystems.SOAP2;
                strResponse = ttAA.SendMessage(strRequest, "", "http://webservices.amadeus.com/" + ttProviderSystems.Profile + "/" + ttProviderSystems.AmadeusWSSchema.Air_RetrieveSeatMap, "");
            }
            strResponse = strResponse.Replace(" xmlns=\"http://xml.amadeus.com/" + ttProviderSystems.AmadeusWSSchema.Air_RetrieveSeatMapReply + "\"", "");
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            ttAA = null;
        }
        // *****************************************************************
        //  Transform Native AmadeusWS AirSeatMap Response into OTA Response   *
        // ***************************************************************** 
        try
        {
            sb.Append(mstrVersion).Append("AmadeusWS_AirSeatMapRS.xsl");
            strResponse = CoreLib.TransformXML(strResponse, mstrXslPath, sb.ToString(), false);
            sb.Remove(0, sb.Length);
            return strResponse;
        }
        catch (Exception ex)
        {
            sb.Append(sb.Append("Error Transforming Native Response.").Append("\r\n").Append(ex.Message).ToString());
            throw new Exception(sb.ToString());
            sb = null;
        }
    }

    public string FareDisplay()
    {
        AmadeusWSAdapter ttAA = null;
        string strRequest = "";
        string strResponse = "";
        // *****************************************************************
        //  Transform OTA AirFareDisplay Request into Native AmadeusWS Request     *
        // ***************************************************************** 
        try
        {
            strRequest = mstrRequest;
            sb.Append(mstrVersion).Append("AmadeusWS_FareDisplayRQ.xsl");
            strRequest = CoreLib.TransformXML(strRequest, mstrXslPath, sb.ToString(), false);
            sb.Remove(0, sb.Length);

            if (strRequest.Length == 0)
            {
                throw new Exception("Transformation produced empty xml.");
            }

            if (ttProviderSystems.SessionPool)
            {
                ttAA = new AmadeusWSAdapter(ttProviderSystems, "V1");
                ttAA.isSOAP2 = ttProviderSystems.SOAP2;
                strResponse = ttAA.SendMessageV3(strRequest, "", "http://webservices.amadeus.com/" + ttProviderSystems.Profile + "/" + ttProviderSystems.AmadeusWSSchema.Fare_DisplayFaresForCityPair, "");
            }
            else
            {
                ttAA = new AmadeusWSAdapter(ttProviderSystems);
                ttAA.isSOAP2 = ttProviderSystems.SOAP2;
                strResponse = ttAA.SendMessage(strRequest, "", "http://webservices.amadeus.com/" + ttProviderSystems.Profile + "/" + ttProviderSystems.AmadeusWSSchema.Fare_DisplayFaresForCityPair, "");
            }
            strResponse = strResponse.Replace(" xmlns=\"http://xml.amadeus.com/" + ttProviderSystems.AmadeusWSSchema.Fare_DisplayFaresForCityPair + "\"", "");

            // *****************************************************************
            //  Transform Native AmadeusWS AirFareDisplay Response into OTA Response   *
            // ***************************************************************** 
            CoreLib.SendTrace(ttProviderSystems.UserID, "AmadeusWSService", "Aggregated fare display response", strResponse);
            sb.Append(mstrVersion).Append("AmadeusWS_FareDisplayRS.xsl");
            strResponse = CoreLib.TransformXML(strResponse, mstrXslPath, sb.ToString(), false);
            sb.Remove(0, sb.Length);

            return strResponse;
        }
        catch (Exception exx)
        {
            throw exx;
        }
        finally
        {
            ttAA = null;
        }
    }

    public string LowFare()
    {
        AmadeusWSAdapter ttAA = null;
        string strRequest = "";
        string strResponse = "";
        XmlDocument oDoc = null;
        XmlElement oRoot = null;
        XmlNode oNode = null;
        XmlNode oBLNode = null;
        DateTime RequestTime;
        DateTime ResponseTime;
        string strMessage = "";
        try
        {
            RequestTime = DateTime.Now;
            mstrRequest = mstrRequest.Replace("<?xml version=\"1.0\" encoding=\"utf-16\"?>", "").Replace("<?xml version=\"1.0\"?>", "");
            strRequest = mstrRequest;

            ttProviderSystems.PCC = ttProviderSystems.PCC.Replace("*", "");

            sb.Append(mstrVersion).Append("AmadeusWS_LowFareRQ.xsl");
            strRequest = CoreLib.TransformXML(strRequest, mstrXslPath, sb.ToString(), false);
            sb.Remove(0, sb.Length);

            strMessage = strRequest;

            if (strRequest.Length == 0)
            {
                throw new Exception("Transformation produced empty xml.");
            }

            // *******************************************************************************
            //  Send Transformed Request to the AmadeusWS Adapter and Getting Native Response  *
            // ******************************************************************************* 
            //ttAA = new AmadeusWSAdapter(ttProviderSystems);
            //strResponse = ttAA.SendMessage(strRequest, "", "http://webservices.amadeus.com/" + ttProviderSystems.Profile + "/" + ttProviderSystems.AmadeusWSSchema.Fare_MasterPricerExpertSearch, "");

            if (ttProviderSystems.SessionPool)
            {
                ttAA = new AmadeusWSAdapter(ttProviderSystems, "V1");
                ttAA.isSOAP2 = ttProviderSystems.SOAP2;
                strResponse = ttAA.SendMessageV3(strRequest, "", "http://webservices.amadeus.com/" + ttProviderSystems.Profile + "/" + ttProviderSystems.AmadeusWSSchema.Fare_MasterPricerExpertSearch, "");
            }
            else
            {
                ttAA = new AmadeusWSAdapter(ttProviderSystems);
                ttAA.isSOAP2 = ttProviderSystems.SOAP2;
                strResponse = ttAA.SendMessage(strRequest, "", "http://webservices.amadeus.com/" + ttProviderSystems.Profile + "/" + ttProviderSystems.AmadeusWSSchema.Fare_MasterPricerExpertSearch, "");
            }

            strResponse = strResponse.Replace(" xmlns=\"http://xml.amadeus.com/" + ttProviderSystems.AmadeusWSSchema.Fare_MasterPricerExpertSearchReply + "\"", "");
            sb.Append(strMessage).Append(strResponse);
            strMessage = sb.ToString();
            sb.Remove(0, sb.Length);

            // ****************************************************
            //  Add AirTravelerAvail Request to Native Response   *
            // ****************************************************
            try
            {
                strRequest = CoreLib.GetNodeInnerText(mstrRequest, "AirTravelerAvail", false);
                oDoc = new XmlDocument();
                oDoc.LoadXml(strResponse);
                oRoot = oDoc.DocumentElement;
                oNode = oDoc.CreateNode(XmlNodeType.Element, "", "AirTravelerAvail", "");
                oNode.InnerXml = strRequest;
                oRoot.AppendChild(oNode);
                strResponse = oDoc.OuterXml;
            }
            catch (Exception ex)
            {
                sb.Append("Error Loading AirTravelerAvail into Native Response.").Append("\r\n").Append(ex.Message);
                throw new Exception(sb.ToString());
                sb.Remove(0, sb.Length);
            }

            try
            {
                // ********************************************************************
                //  Transform Native AmadeusWS LowFarePlus Response into OTA Response   *
                //  This transformation better organizes the AmadeusWS response to make *
                //  easier to create and filter the final response                    *
                // ******************************************************************** 
                sb.Append(mstrVersion).Append("AmadeusWS_LowFare1RS.xsl");
                strResponse = CoreLib.TransformXML(strResponse, mstrXslPath, sb.ToString(), false);
                sb.Remove(0, sb.Length);
                sb.Append(mstrVersion).Append("AmadeusWS_LowFare2RS.xsl");
                strResponse = CoreLib.TransformXML(strResponse, mstrXslPath, sb.ToString(), false);
                sb.Remove(0, sb.Length);

                // ***********************************************
                //  process output business logic if necessary   *
                // *********************************************** 
                sb.Append("TransactionIdentifier=\"Amadeus-").Append(ttProviderSystems.PCC);
                strResponse = strResponse.Replace("TransactionIdentifier=\"Amadeus", sb.ToString());
                sb.Remove(0, sb.Length);

                if (ttProviderSystems.BLFile != "")
                {
                    oDoc = new XmlDocument();
                    //  Load Access Control List into memory
                    try
                    {
                        oDoc.Load(ttProviderSystems.BLFile);
                    }
                    catch (Exception exr)
                    {
                        CoreLib.SendTrace("", "AmadeusWS", "Error Loading LowFare business logic file", exr.Message);
                        throw exr;
                    }
                    oRoot = oDoc.DocumentElement;
                    oNode = oRoot.SelectSingleNode("Message[@Name=\'LowFare\'][@Direction=\'Out\']");
                    if (!(oNode == null))
                    {
                        //  check if non ticketable flights/fares to eliminate
                        sb.Append("NoTktAirline[@Name=\'Amadeus\'][@System=\'").Append(ttProviderSystems.System).Append("\'][@PCC=\'").Append(ttProviderSystems.PCC).Append("\']");
                        oBLNode = oNode.SelectSingleNode(sb.ToString());
                        sb.Remove(0, sb.Length);
                        if (!(oBLNode == null))
                        {
                            sb.Append(modCore.gXslPath).Append("BL\\");
                            strResponse = BusinessLogic(strResponse, oBLNode.OuterXml, sb.ToString(), "BL_LowFareNoTktRS.xsl");
                            sb.Remove(0, sb.Length);
                        }
                        //  check if no mix airline to eliminate
                        sb.Append("NoMixAirline[@Name=\'Amadeus\'][@System=\'").Append(ttProviderSystems.System).Append("\'][@PCC=\'").Append(ttProviderSystems.PCC).Append("\']");
                        oBLNode = oNode.SelectSingleNode(sb.ToString());
                        sb.Remove(0, sb.Length);
                        if (!(oBLNode == null))
                        {
                            sb.Append(modCore.gXslPath).Append("BL\\");
                            strResponse = BusinessLogic(strResponse, oBLNode.OuterXml, sb.ToString(), "BL_LowFareNoMixRS.xsl");
                            sb.Remove(0, sb.Length);
                        }
                        //  add fare markup if needed
                        sb.Append("ProviderBL[@Name=\'Amadeus\'][@System=\'").Append(ttProviderSystems.System).Append("\'][@PCC=\'").Append(ttProviderSystems.PCC).Append("\']");
                        oBLNode = oNode.SelectSingleNode(sb.ToString());
                        sb.Remove(0, sb.Length);
                        if (!(oBLNode == null))
                        {
                            sb.Append(modCore.gXslPath).Append("BL\\");
                            strResponse = BusinessLogic(strResponse, oBLNode.OuterXml, sb.ToString(), "BL_LowFareRS.xsl");
                            sb.Remove(0, sb.Length);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                sb.Append(sb.Append("Error Transforming Native Response.").Append("\r\n").Append(ex.Message).ToString());
                throw new Exception(sb.ToString());
                sb = null;
            }
            ResponseTime = DateTime.Now;

            if (ttProviderSystems.LogNative)
            {
                TripXMLTools.TripXMLLog.LogMessage("LowFare", ref strMessage, RequestTime, ResponseTime, "Native", ttProviderSystems.Provider, ttProviderSystems.System, ttProviderSystems.UserName);
                //LogMessageToFile("LowFare", strMessage, RequestTime, ResponseTime);
            }
            return strResponse;
        }
        finally
        {
            if (!(oNode == null))
            {
                oNode = null;
            }
            if (!(oRoot == null))
            {
                oRoot = null;
            }
            if (!(oDoc == null))
            {
                oDoc = null;
            }
            if (!(ttAA == null))
            {
                ttAA = null;
            }
        }
    }

    public string LowFarePlus()
    {
        AmadeusWSAdapter ttAA = null;
        string strRequest = "";
        string strResponse = "";
        XmlDocument oDoc = null;
        XmlElement oRoot = null;
        XmlNode oNode = null;
        XmlNode oBLNode = null;
        DateTime RequestTime;
        DateTime ResponseTime;
        string strMessage = "";
        StringBuilder sb = new StringBuilder();
        // ************************************************************
        //  Get the Filtering Elements from OTA LowFarePlus Request   *
        // ************************************************************
        try
        {
            RequestTime = DateTime.Now;
            mstrRequest = mstrRequest.Replace("<?xml version=\"1.0\" encoding=\"utf-16\"?>", "").Replace("<?xml version=\"1.0\"?>", "");
            strRequest = mstrRequest;

            ttProviderSystems.PCC = ttProviderSystems.PCC.Replace("*", "");

            oDoc = new XmlDocument();
            oDoc.LoadXml(strRequest);
            oRoot = oDoc.DocumentElement;
            oNode = oRoot.SelectSingleNode("POS/Source/@PseudoCityCode");

            if (!(oNode == null))
            {
                oNode.InnerText = ttProviderSystems.PCC;
                strRequest = oRoot.OuterXml;
            }

            // *****************************************************************
            //  Transform OTA LowFarePlus Request into Native Amadeus Request     *
            // ***************************************************************** 
            sb.Append(mstrVersion).Append("AmadeusWS_LowFarePlusRQ.xsl");
            strRequest = CoreLib.TransformXML(strRequest, mstrXslPath, sb.ToString(), false);
            sb.Remove(0, sb.Length);
            strMessage = strRequest;

            if (strRequest.Length == 0)
            {
                throw new Exception("Transformation produced empty xml.");
            }

            // *******************************************************************************
            //  Send Transformed Request to the Amadeus Adapter and Getting Native Response  *
            // ******************************************************************************* 

            //ttAA = new AmadeusWSAdapter(ttProviderSystems);
            //strResponse = ttAA.SendMessage(strRequest, "", "http://webservices.amadeus.com/" + ttProviderSystems.Profile + "/" + ttProviderSystems.AmadeusWSSchema.Fare_MasterPricerTravelBoardSearch, "");

            //if (!ttProviderSystems.ProviderSession.MultipleAccess)
            //{
            //    Thread.Sleep(20);
            //}

            if (ttProviderSystems.SessionPool)
            {
                ttAA = new AmadeusWSAdapter(ttProviderSystems, "V1");
                ttAA.isSOAP2 = ttProviderSystems.SOAP2;

                DateTime myDTFI = default(DateTime);
                myDTFI = DateTime.Now;

                strResponse = ttAA.SendMessageV3(strRequest, "", "http://webservices.amadeus.com/" + ttProviderSystems.Profile + "/" + ttProviderSystems.AmadeusWSSchema.Fare_MasterPricerTravelBoardSearch, "");

                if (ttProviderSystems.AddLFPStat)
                {
                    DateTime myDTFIR = default(DateTime);
                    myDTFIR = DateTime.Now;

                    TimeSpan dur = default(TimeSpan);
                    dur = myDTFIR - myDTFI;

                    addLogStat(strRequest, ttProviderSystems.UserID, ttProviderSystems.PCC, myDTFI, myDTFIR, dur);
                }
            }
            else
            {
                ttAA = new AmadeusWSAdapter(ttProviderSystems);
                ttAA.isSOAP2 = ttProviderSystems.SOAP2;

                strResponse = ttAA.SendMessage(strRequest, "", "http://webservices.amadeus.com/" + ttProviderSystems.Profile + "/" + ttProviderSystems.AmadeusWSSchema.Fare_MasterPricerTravelBoardSearch, "");
            }

            strResponse = strResponse.Replace(" xmlns=\"http://xml.amadeus.com/" + ttProviderSystems.AmadeusWSSchema.Fare_MasterPricerTravelBoardSearchReply + "\"", "");
            sb.Append(strMessage).Append(strResponse);
            strMessage = sb.ToString();
            sb.Remove(0, sb.Length);

            if (ttProviderSystems.LFPLight)
            {
                strResponse = strResponse.Replace("</Fare_MasterPricerTravelBoardSearchReply>", "<LFPLight>Y</LFPLight></Fare_MasterPricerTravelBoardSearchReply>");
            }
            // ********************************************************************
            //  Transform Native Amadeus LowFarePlus Response into OTA Response   *
            //  This transformation better organizes the Amadeus response to make *
            //  easier to create and filter the final response                    *
            // ******************************************************************** 
            sb.Append(mstrVersion).Append("AmadeusWS_LowFarePlus1RS.xsl");
            strResponse = CoreLib.TransformXML(strResponse, mstrXslPath, sb.ToString(), false);
            sb.Remove(0, sb.Length);
            CoreLib.SendTrace(ttProviderSystems.UserID, "AmadeusWSService", "After 1st transform", "");
            // ********************************************************************
            //  Transform Native Amadeus LowFarePlus Response into OTA Response   *
            // ******************************************************************** 
            sb.Append(mstrVersion).Append("AmadeusWS_LowFarePlus2RS.xsl");
            strResponse = CoreLib.TransformXML(strResponse, mstrXslPath, sb.ToString(), false);
            sb.Remove(0, sb.Length);
            CoreLib.SendTrace(ttProviderSystems.UserID, "AmadeusWSService", "After 2nd transform", "");
            // ***********************************************
            //  process output business logic if necessary   *
            // *********************************************** 
            sb.Append("TransactionIdentifier=\"Amadeus-").Append(ttProviderSystems.PCC);
            strResponse = strResponse.Replace("TransactionIdentifier=\"Amadeus", sb.ToString());
            sb.Remove(0, sb.Length);

            if (!ttProviderSystems.LFPLight)
            {
                # region business logic
                if (ttProviderSystems.BLFile != "" && strResponse.IndexOf("<Error") == -1)
                {
                    oDoc = new XmlDocument();
                    //  Load Access Control List into memory
                    oDoc.Load(ttProviderSystems.BLFile);

                    oRoot = oDoc.DocumentElement;
                    oNode = oRoot.SelectSingleNode("Message[@Name=\'LowFare\'][@Direction=\'Out\']");

                    if (!(oNode == null))
                    {
                        //  check if non ticketable flights/fares to eliminate
                        sb.Append("NoTktAirline[@Name=\'Amadeus\'][@System=\'").Append(ttProviderSystems.System).Append("\'][@PCC=\'").Append(ttProviderSystems.PCC).Append("\']");
                        oBLNode = oNode.SelectSingleNode(sb.ToString());
                        sb.Remove(0, sb.Length);

                        if (!(oBLNode == null))
                        {
                            sb.Append(modCore.gXslPath).Append("BL\\");
                            strResponse = BusinessLogic(strResponse, oBLNode.OuterXml, sb.ToString(), "BL_LowFareNoTktRS.xsl");
                            sb.Remove(0, sb.Length);
                        }

                        //  check if no mix airline to eliminate
                        sb.Append("NoMixAirline[@Name=\'Amadeus\'][@System=\'").Append(ttProviderSystems.System).Append("\'][@PCC=\'").Append(ttProviderSystems.PCC).Append("\']");
                        oBLNode = oNode.SelectSingleNode(sb.ToString());
                        sb.Remove(0, sb.Length);

                        if (!(oBLNode == null))
                        {
                            sb.Append(modCore.gXslPath).Append("BL\\");
                            strResponse = BusinessLogic(strResponse, oBLNode.OuterXml, sb.ToString(), "BL_LowFareNoMixRS.xsl");
                            sb.Remove(0, sb.Length);
                        }

                        //  check if no fare type to eliminate
                        sb.Append("NoFareType[@Name=\'Amadeus\'][@System=\'").Append(ttProviderSystems.System).Append("\'][@PCC=\'").Append(ttProviderSystems.PCC).Append("\']");
                        oBLNode = oNode.SelectSingleNode(sb.ToString());
                        sb.Remove(0, sb.Length);

                        if (!(oBLNode == null))
                        {
                            sb.Append(modCore.gXslPath).Append("BL\\");
                            strResponse = BusinessLogic(strResponse, oBLNode.OuterXml, sb.ToString(), "BL_LowFareNoFareTypeRS.xsl");
                            sb.Remove(0, sb.Length);
                        }

                        //  add fare markup if needed
                        sb.Append("ProviderBL[@Name=\'Amadeus\'][@System=\'").Append(ttProviderSystems.System).Append("\'][@PCC=\'").Append(ttProviderSystems.PCC).Append("\']");
                        oBLNode = oNode.SelectSingleNode(sb.ToString());
                        sb.Remove(0, sb.Length);

                        if (!(oBLNode == null))
                        {
                            sb.Append(modCore.gXslPath).Append("BL\\");
                            strResponse = BusinessLogic(strResponse, oBLNode.OuterXml, sb.ToString(), "BL_LowFareRS.xsl");
                            sb.Remove(0, sb.Length);
                        }
                    }
                }

                # endregion
            }

            ResponseTime = DateTime.Now;

            if (ttProviderSystems.LogNative)
            {
                TripXMLTools.TripXMLLog.LogMessage("LowFarePlus", ref strMessage, RequestTime, ResponseTime, "Native", ttProviderSystems.Provider, ttProviderSystems.System, ttProviderSystems.UserName);
                //LogMessageToFile("LowFarePlus", strMessage, RequestTime, ResponseTime);
            }

            return strResponse;
        }
        catch (Exception ex)
        {
            sb.Append(sb.Append("Exception Error.").Append("\r\n").Append(ex.Message).ToString()).Append("\r\n").Append(ex.InnerException).ToString();
            addLog("<EXOR><M>" + mstrRequest + "<BL/>", ttProviderSystems.UserID);
            throw new Exception(sb.ToString());
        }
        finally
        {
            if (!(oNode == null))
            {
                oNode = null;
            }
            if (!(oRoot == null))
            {
                oRoot = null;
            }
            if (!(oDoc == null))
            {
                oDoc = null;
            }
            if (!(ttAA == null))
            {
                ttAA = null;
            }
            oBLNode = null;
        }
    }
    public string LowFareMatrix()
    {
        AmadeusWSAdapter ttAA = null;
        string strRequest = "";
        string strResponse = "";
        XmlDocument oDoc = null;
        XmlElement oRoot = null;
        XmlNode oNode = null;
        XmlNode oBLNode = null;
        DateTime RequestTime;
        DateTime ResponseTime;
        string strMessage = "";
        StringBuilder sb = new StringBuilder();
        // ************************************************************
        //  Get the Filtering Elements from OTA LowFareMatrix Request   *
        // ************************************************************
        try
        {
            RequestTime = DateTime.Now;
            strRequest = mstrRequest;
            oDoc = new XmlDocument();
            oDoc.LoadXml(strRequest);
            oRoot = oDoc.DocumentElement;
            oNode = oRoot.SelectSingleNode("POS/Source/@PseudoCityCode");

            if (!(oNode == null))
            {
                oNode.InnerText = ttProviderSystems.PCC;
                strRequest = oRoot.OuterXml;
            }

            // *****************************************************************
            //  Transform OTA LowFareMatrix Request into Native Amadeus Request     *
            // ***************************************************************** 
            sb.Append(mstrVersion).Append("AmadeusWS_LowFareMatrixRQ.xsl");
            strRequest = CoreLib.TransformXML(strRequest, mstrXslPath, sb.ToString(), false);
            sb.Remove(0, sb.Length);
            strMessage = strRequest;

            if (strRequest.Length == 0)
            {
                throw new Exception("Transformation produced empty xml.");
            }

            // *******************************************************************************
            //  Send Transformed Request to the Amadeus Adapter and Getting Native Response  *
            // ******************************************************************************* 

            //ttAA = new AmadeusWSAdapter(ttProviderSystems);
            //strResponse = ttAA.SendMessage(strRequest, "", "http://webservices.amadeus.com/" + ttProviderSystems.Profile + "/" + ttProviderSystems.AmadeusWSSchema.Fare_MasterPricerTravelBoardSearch, "");

            //if (!ttProviderSystems.ProviderSession.MultipleAccess)
            //{
            //    Thread.Sleep(20);
            //}

            if (ttProviderSystems.SessionPool)
            {
                ttAA = new AmadeusWSAdapter(ttProviderSystems, "V1");
                ttAA.isSOAP2 = ttProviderSystems.SOAP2;
                strResponse = ttAA.SendMessageV3(strRequest, "", "http://webservices.amadeus.com/" + ttProviderSystems.Profile + "/" + ttProviderSystems.AmadeusWSSchema.Fare_MasterPricerCalendar, "");
            }
            else
            {
                ttAA = new AmadeusWSAdapter(ttProviderSystems);
                ttAA.isSOAP2 = ttProviderSystems.SOAP2;
                strResponse = ttAA.SendMessage(strRequest, "", "http://webservices.amadeus.com/" + ttProviderSystems.Profile + "/" + ttProviderSystems.AmadeusWSSchema.Fare_MasterPricerCalendar, "");
            }

            strResponse = strResponse.Replace(" xmlns=\"http://xml.amadeus.com/" + ttProviderSystems.AmadeusWSSchema.Fare_MasterPricerCalendarReply + "\"", "");
            sb.Append(strMessage).Append(strResponse);
            strMessage = sb.ToString();
            sb.Remove(0, sb.Length);

            // ********************************************************************
            //  Transform Native Amadeus LowFareMatrix Response into OTA Response   *
            //  This transformation better organizes the Amadeus response to make *
            //  easier to create and filter the final response                    *
            // ******************************************************************** 
            sb.Append(mstrVersion).Append("AmadeusWS_LowFareMatrix1RS.xsl");
            strResponse = CoreLib.TransformXML(strResponse, mstrXslPath, sb.ToString(), false);
            sb.Remove(0, sb.Length);

            // ********************************************************************
            //  Transform Native Amadeus LowFareMatrix Response into OTA Response   *
            // ******************************************************************** 
            sb.Append(mstrVersion).Append("AmadeusWS_LowFareMatrix2RS.xsl");
            strResponse = CoreLib.TransformXML(strResponse, mstrXslPath, sb.ToString(), false);
            sb.Remove(0, sb.Length);

            // ***********************************************
            //  process output business logic if necessary   *
            // *********************************************** 
            sb.Append("TransactionIdentifier=\"Amadeus-").Append(ttProviderSystems.PCC);
            strResponse = strResponse.Replace("TransactionIdentifier=\"Amadeus", sb.ToString());
            sb.Remove(0, sb.Length);

            if (ttProviderSystems.BLFile != "")
            {
                oDoc = new XmlDocument();
                //  Load Access Control List into memory
                oDoc.Load(ttProviderSystems.BLFile);

                oRoot = oDoc.DocumentElement;
                oNode = oRoot.SelectSingleNode("Message[@Name=\'LowFare\'][@Direction=\'Out\']");

                if (!(oNode == null))
                {
                    //  check if non ticketable flights/fares to eliminate
                    sb.Append("NoTktAirline[@Name=\'Amadeus\'][@System=\'").Append(ttProviderSystems.System).Append("\'][@PCC=\'").Append(ttProviderSystems.PCC).Append("\']");
                    oBLNode = oNode.SelectSingleNode(sb.ToString());
                    sb.Remove(0, sb.Length);

                    if (!(oBLNode == null))
                    {
                        sb.Append(modCore.gXslPath).Append("BL\\");
                        strResponse = BusinessLogic(strResponse, oBLNode.OuterXml, sb.ToString(), "BL_LowFareNoTktRS.xsl");
                        sb.Remove(0, sb.Length);
                    }

                    //  check if no mix airline to eliminate
                    sb.Append("NoMixAirline[@Name=\'Amadeus\'][@System=\'").Append(ttProviderSystems.System).Append("\'][@PCC=\'").Append(ttProviderSystems.PCC).Append("\']");
                    oBLNode = oNode.SelectSingleNode(sb.ToString());
                    sb.Remove(0, sb.Length);

                    if (!(oBLNode == null))
                    {
                        sb.Append(modCore.gXslPath).Append("BL\\");
                        strResponse = BusinessLogic(strResponse, oBLNode.OuterXml, sb.ToString(), "BL_LowFareNoMixRS.xsl");
                        sb.Remove(0, sb.Length);
                    }

                    //  add fare markup if needed
                    sb.Append("ProviderBL[@Name=\'Amadeus\'][@System=\'").Append(ttProviderSystems.System).Append("\'][@PCC=\'").Append(ttProviderSystems.PCC).Append("\']");
                    oBLNode = oNode.SelectSingleNode(sb.ToString());
                    sb.Remove(0, sb.Length);

                    if (!(oBLNode == null))
                    {
                        sb.Append(modCore.gXslPath).Append("BL\\");
                        strResponse = BusinessLogic(strResponse, oBLNode.OuterXml, sb.ToString(), "BL_LowFareRS.xsl");
                        sb.Remove(0, sb.Length);
                    }
                }
            }

            ResponseTime = DateTime.Now;

            if (ttProviderSystems.LogNative)
            {
                TripXMLTools.TripXMLLog.LogMessage("LowFareMatrix", ref strMessage, RequestTime, ResponseTime, "Native", ttProviderSystems.Provider, ttProviderSystems.System, ttProviderSystems.UserName);
                //LogMessageToFile("LowFareMatrix", strMessage, RequestTime, ResponseTime);
            }

            return strResponse;
        }
        catch (Exception ex)
        {
            sb.Append(sb.Append("Exception Error.").Append("\r\n").Append(ex.Message).ToString());
            throw new Exception(sb.ToString());
        }
        finally
        {
            if (!(oNode == null))
            {
                oNode = null;
            }
            if (!(oRoot == null))
            {
                oRoot = null;
            }
            if (!(oDoc == null))
            {
                oDoc = null;
            }
            if (!(ttAA == null))
            {
                ttAA = null;
            }
            oBLNode = null;
        }
    }

    public string LowOfferMatrix()
    {
        AmadeusWSAdapter ttAA = null;
        string strRequest = "";
        string strResponse = "";
        XmlDocument oDoc = null;
        XmlElement oRoot = null;
        XmlNode oNode = null;
        XmlNode oBLNode = null;
        DateTime RequestTime;
        DateTime ResponseTime;
        string strMessage = "";
        StringBuilder sb = new StringBuilder();
        // ************************************************************
        //  Get the Filtering Elements from OTA LowOfferMatrix Request   *
        // ************************************************************
        try
        {
            RequestTime = DateTime.Now;
            strRequest = mstrRequest;
            oDoc = new XmlDocument();
            oDoc.LoadXml(strRequest);
            oRoot = oDoc.DocumentElement;
            oNode = oRoot.SelectSingleNode("POS/Source/@PseudoCityCode");

            if (!(oNode == null))
            {
                oNode.InnerText = ttProviderSystems.PCC;
                strRequest = oRoot.OuterXml;
            }

            // *****************************************************************
            //  Transform OTA LowOfferMatrix Request into Native Amadeus Request     *
            // ***************************************************************** 
            sb.Append(mstrVersion).Append("AmadeusWS_LowOfferMatrixRQ.xsl");
            strRequest = CoreLib.TransformXML(strRequest, mstrXslPath, sb.ToString(), false);
            sb.Remove(0, sb.Length);
            strMessage = strRequest;

            if (strRequest.Length == 0)
            {
                throw new Exception("Transformation produced empty xml.");
            }

            // *******************************************************************************
            //  Send Transformed Request to the Amadeus Adapter and Getting Native Response  *
            // ******************************************************************************* 

            //ttAA = new AmadeusWSAdapter(ttProviderSystems);
            //strResponse = ttAA.SendMessage(strRequest, "", "http://webservices.amadeus.com/" + ttProviderSystems.Profile + "/" + ttProviderSystems.AmadeusWSSchema.Fare_MasterPricerTravelBoardSearch, "");

            //if (!ttProviderSystems.ProviderSession.MultipleAccess)
            //{
            //    Thread.Sleep(20);
            //}

            if (ttProviderSystems.SessionPool)
            {
                ttAA = new AmadeusWSAdapter(ttProviderSystems, "V1");
                ttAA.isSOAP2 = ttProviderSystems.SOAP2;
                strResponse = ttAA.SendMessageV3(strRequest, "", "http://webservices.amadeus.com/" + ttProviderSystems.Profile + "/" + ttProviderSystems.AmadeusWSSchema.Fare_SellByFareCalendar, "");
            }
            else
            {
                ttAA = new AmadeusWSAdapter(ttProviderSystems);
                ttAA.isSOAP2 = ttProviderSystems.SOAP2;
                strResponse = ttAA.SendMessage(strRequest, "", "http://webservices.amadeus.com/" + ttProviderSystems.Profile + "/" + ttProviderSystems.AmadeusWSSchema.Fare_SellByFareCalendar, "");
            }

            strResponse = strResponse.Replace(" xmlns=\"http://xml.amadeus.com/" + ttProviderSystems.AmadeusWSSchema.Fare_SellByFareCalendarReply + "\"", "");
            sb.Append(strMessage).Append(strResponse);
            strMessage = sb.ToString();
            sb.Remove(0, sb.Length);

            // ********************************************************************
            //  Transform Native Amadeus LowOfferMatrix Response into OTA Response   *
            //  This transformation better organizes the Amadeus response to make *
            //  easier to create and filter the final response                    *
            // ******************************************************************** 
            sb.Append(mstrVersion).Append("AmadeusWS_LowOfferMatrix1RS.xsl");
            strResponse = CoreLib.TransformXML(strResponse, mstrXslPath, sb.ToString(), false);
            sb.Remove(0, sb.Length);

            // ********************************************************************
            //  Transform Native Amadeus LowOfferMatrix Response into OTA Response   *
            // ******************************************************************** 
            sb.Append(mstrVersion).Append("AmadeusWS_LowOfferMatrix2RS.xsl");
            strResponse = CoreLib.TransformXML(strResponse, mstrXslPath, sb.ToString(), false);
            sb.Remove(0, sb.Length);

            // ***********************************************
            //  process output business logic if necessary   *
            // *********************************************** 
            sb.Append("TransactionIdentifier=\"Amadeus-").Append(ttProviderSystems.PCC);
            strResponse = strResponse.Replace("TransactionIdentifier=\"Amadeus", sb.ToString());
            sb.Remove(0, sb.Length);

            if (ttProviderSystems.BLFile != "")
            {
                oDoc = new XmlDocument();
                //  Load Access Control List into memory
                oDoc.Load(ttProviderSystems.BLFile);

                oRoot = oDoc.DocumentElement;
                oNode = oRoot.SelectSingleNode("Message[@Name=\'LowFare\'][@Direction=\'Out\']");

                if (!(oNode == null))
                {
                    //  check if non ticketable flights/fares to eliminate
                    sb.Append("NoTktAirline[@Name=\'Amadeus\'][@System=\'").Append(ttProviderSystems.System).Append("\'][@PCC=\'").Append(ttProviderSystems.PCC).Append("\']");
                    oBLNode = oNode.SelectSingleNode(sb.ToString());
                    sb.Remove(0, sb.Length);

                    if (!(oBLNode == null))
                    {
                        sb.Append(modCore.gXslPath).Append("BL\\");
                        strResponse = BusinessLogic(strResponse, oBLNode.OuterXml, sb.ToString(), "BL_LowFareNoTktRS.xsl");
                        sb.Remove(0, sb.Length);
                    }

                    //  check if no mix airline to eliminate
                    sb.Append("NoMixAirline[@Name=\'Amadeus\'][@System=\'").Append(ttProviderSystems.System).Append("\'][@PCC=\'").Append(ttProviderSystems.PCC).Append("\']");
                    oBLNode = oNode.SelectSingleNode(sb.ToString());
                    sb.Remove(0, sb.Length);

                    if (!(oBLNode == null))
                    {
                        sb.Append(modCore.gXslPath).Append("BL\\");
                        strResponse = BusinessLogic(strResponse, oBLNode.OuterXml, sb.ToString(), "BL_LowFareNoMixRS.xsl");
                        sb.Remove(0, sb.Length);
                    }

                    //  add fare markup if needed
                    sb.Append("ProviderBL[@Name=\'Amadeus\'][@System=\'").Append(ttProviderSystems.System).Append("\'][@PCC=\'").Append(ttProviderSystems.PCC).Append("\']");
                    oBLNode = oNode.SelectSingleNode(sb.ToString());
                    sb.Remove(0, sb.Length);

                    if (!(oBLNode == null))
                    {
                        sb.Append(modCore.gXslPath).Append("BL\\");
                        strResponse = BusinessLogic(strResponse, oBLNode.OuterXml, sb.ToString(), "BL_LowFareRS.xsl");
                        sb.Remove(0, sb.Length);
                    }
                }
            }

            ResponseTime = DateTime.Now;

            if (ttProviderSystems.LogNative)
            {
                TripXMLTools.TripXMLLog.LogMessage("LowOfferMatrix", ref strMessage, RequestTime, ResponseTime, "Native", ttProviderSystems.Provider, ttProviderSystems.System, ttProviderSystems.UserName);
                //LogMessageToFile("LowOfferMatrix", strMessage, RequestTime, ResponseTime);
            }

            return strResponse;
        }
        catch (Exception ex)
        {
            sb.Append(sb.Append("Exception Error.").Append("\r\n").Append(ex.Message).ToString());
            throw new Exception(sb.ToString());
        }
        finally
        {
            if (!(oNode == null))
            {
                oNode = null;
            }
            if (!(oRoot == null))
            {
                oRoot = null;
            }
            if (!(oDoc == null))
            {
                oDoc = null;
            }
            if (!(ttAA == null))
            {
                ttAA = null;
            }
            oBLNode = null;
        }
    }

    public string LowOfferSearch()
    {
        AmadeusWSAdapter ttAA = null;
        string strRequest = "";
        string strResponse = "";
        XmlDocument oDoc = null;
        XmlElement oRoot = null;
        XmlNode oNode = null;
        XmlNode oBLNode = null;
        DateTime RequestTime;
        DateTime ResponseTime;
        string strMessage = "";
        StringBuilder sb = new StringBuilder();
        // ************************************************************
        //  Get the Filtering Elements from OTA LowOfferSearch Request   *
        // ************************************************************
        try
        {
            RequestTime = DateTime.Now;
            strRequest = mstrRequest;
            oDoc = new XmlDocument();
            oDoc.LoadXml(strRequest);
            oRoot = oDoc.DocumentElement;
            oNode = oRoot.SelectSingleNode("POS/Source/@PseudoCityCode");

            if (!(oNode == null))
            {
                oNode.InnerText = ttProviderSystems.PCC;
                strRequest = oRoot.OuterXml;
            }

            // *****************************************************************
            //  Transform OTA LowOfferSearch Request into Native Amadeus Request     *
            // ***************************************************************** 
            sb.Append(mstrVersion).Append("AmadeusWS_LowOfferSearchRQ.xsl");
            strRequest = CoreLib.TransformXML(strRequest, mstrXslPath, sb.ToString(), false);
            sb.Remove(0, sb.Length);
            strMessage = strRequest;

            if (strRequest.Length == 0)
            {
                throw new Exception("Transformation produced empty xml.");
            }

            // *******************************************************************************
            //  Send Transformed Request to the Amadeus Adapter and Getting Native Response  *
            // ******************************************************************************* 

            //ttAA = new AmadeusWSAdapter(ttProviderSystems);
            //strResponse = ttAA.SendMessage(strRequest, "", "http://webservices.amadeus.com/" + ttProviderSystems.Profile + "/" + ttProviderSystems.AmadeusWSSchema.Fare_MasterPricerTravelBoardSearch, "");

            //if (!ttProviderSystems.ProviderSession.MultipleAccess)
            //{
            //    Thread.Sleep(20);
            //}

            if (ttProviderSystems.SessionPool)
            {
                ttAA = new AmadeusWSAdapter(ttProviderSystems, "V1");
                ttAA.isSOAP2 = ttProviderSystems.SOAP2;
                strResponse = ttAA.SendMessageV3(strRequest, "", "http://webservices.amadeus.com/" + ttProviderSystems.Profile + "/" + ttProviderSystems.AmadeusWSSchema.Fare_SellByFareSearch, "");
            }
            else
            {
                ttAA = new AmadeusWSAdapter(ttProviderSystems);
                ttAA.isSOAP2 = ttProviderSystems.SOAP2;
                strResponse = ttAA.SendMessage(strRequest, "", "http://webservices.amadeus.com/" + ttProviderSystems.Profile + "/" + ttProviderSystems.AmadeusWSSchema.Fare_SellByFareSearch, "");
            }

            strResponse = strResponse.Replace(" xmlns=\"http://xml.amadeus.com/" + ttProviderSystems.AmadeusWSSchema.Fare_SellByFareSearchReply + "\"", "");
            sb.Append(strMessage).Append(strResponse);
            strMessage = sb.ToString();
            sb.Remove(0, sb.Length);

            // ********************************************************************
            //  Transform Native Amadeus LowOfferSearch Response into OTA Response   *
            //  This transformation better organizes the Amadeus response to make *
            //  easier to create and filter the final response                    *
            // ******************************************************************** 
            sb.Append(mstrVersion).Append("AmadeusWS_LowOfferSearch1RS.xsl");
            strResponse = CoreLib.TransformXML(strResponse, mstrXslPath, sb.ToString(), false);
            sb.Remove(0, sb.Length);

            // ********************************************************************
            //  Transform Native Amadeus LowOfferSearch Response into OTA Response   *
            // ******************************************************************** 
            sb.Append(mstrVersion).Append("AmadeusWS_LowOfferSearch2RS.xsl");
            strResponse = CoreLib.TransformXML(strResponse, mstrXslPath, sb.ToString(), false);
            sb.Remove(0, sb.Length);

            // ***********************************************
            //  process output business logic if necessary   *
            // *********************************************** 
            sb.Append("TransactionIdentifier=\"Amadeus-").Append(ttProviderSystems.PCC);
            strResponse = strResponse.Replace("TransactionIdentifier=\"Amadeus", sb.ToString());
            sb.Remove(0, sb.Length);

            if (ttProviderSystems.BLFile != "")
            {
                oDoc = new XmlDocument();
                //  Load Access Control List into memory
                oDoc.Load(ttProviderSystems.BLFile);

                oRoot = oDoc.DocumentElement;
                oNode = oRoot.SelectSingleNode("Message[@Name=\'LowFare\'][@Direction=\'Out\']");

                if (!(oNode == null))
                {
                    //  check if non ticketable flights/fares to eliminate
                    sb.Append("NoTktAirline[@Name=\'Amadeus\'][@System=\'").Append(ttProviderSystems.System).Append("\'][@PCC=\'").Append(ttProviderSystems.PCC).Append("\']");
                    oBLNode = oNode.SelectSingleNode(sb.ToString());
                    sb.Remove(0, sb.Length);

                    if (!(oBLNode == null))
                    {
                        sb.Append(modCore.gXslPath).Append("BL\\");
                        strResponse = BusinessLogic(strResponse, oBLNode.OuterXml, sb.ToString(), "BL_LowFareNoTktRS.xsl");
                        sb.Remove(0, sb.Length);
                    }

                    //  check if no mix airline to eliminate
                    sb.Append("NoMixAirline[@Name=\'Amadeus\'][@System=\'").Append(ttProviderSystems.System).Append("\'][@PCC=\'").Append(ttProviderSystems.PCC).Append("\']");
                    oBLNode = oNode.SelectSingleNode(sb.ToString());
                    sb.Remove(0, sb.Length);

                    if (!(oBLNode == null))
                    {
                        sb.Append(modCore.gXslPath).Append("BL\\");
                        strResponse = BusinessLogic(strResponse, oBLNode.OuterXml, sb.ToString(), "BL_LowFareNoMixRS.xsl");
                        sb.Remove(0, sb.Length);
                    }

                    //  add fare markup if needed
                    sb.Append("ProviderBL[@Name=\'Amadeus\'][@System=\'").Append(ttProviderSystems.System).Append("\'][@PCC=\'").Append(ttProviderSystems.PCC).Append("\']");
                    oBLNode = oNode.SelectSingleNode(sb.ToString());
                    sb.Remove(0, sb.Length);

                    if (!(oBLNode == null))
                    {
                        sb.Append(modCore.gXslPath).Append("BL\\");
                        strResponse = BusinessLogic(strResponse, oBLNode.OuterXml, sb.ToString(), "BL_LowFareRS.xsl");
                        sb.Remove(0, sb.Length);
                    }
                }
            }

            ResponseTime = DateTime.Now;

            if (ttProviderSystems.LogNative)
            {
                TripXMLTools.TripXMLLog.LogMessage("LowOfferSearch", ref strMessage, RequestTime, ResponseTime, "Native", ttProviderSystems.Provider, ttProviderSystems.System, ttProviderSystems.UserName);
                //LogMessageToFile("LowOfferSearch", strMessage, RequestTime, ResponseTime);
            }

            return strResponse;
        }
        catch (Exception ex)
        {
            sb.Append(sb.Append("Exception Error.").Append("\r\n").Append(ex.Message).ToString());
            throw new Exception(sb.ToString());
        }
        finally
        {
            if (!(oNode == null))
            {
                oNode = null;
            }
            if (!(oRoot == null))
            {
                oRoot = null;
            }
            if (!(oDoc == null))
            {
                oDoc = null;
            }
            if (!(ttAA == null))
            {
                ttAA = null;
            }
            oBLNode = null;
        }
    }

    public string LowFareFlights()
    {
        AmadeusWSAdapter ttAA = null;
        string strRequest = "";
        string strSecondRequest = "";
        string strResponse = "";
        string strNewResponse = "";
        string strFirstResponse = "";
        XmlDocument oDoc = null;
        XmlElement oRoot = null;
        XmlNode oNode = null;
        XmlDocument oDocResp = null;
        XmlElement oRootResp = null;
        XmlElement oRootNewResp = null;
        XmlElement oRootFinal = null;
        XmlNode oBLNode = null;
        string strMessage = "";
        StringBuilder sb = new StringBuilder();
        string strAvailResponses = "";
        string ConversationID = "";
        string strFirstFlight = "";
        string strFinalResponse = "";
        XmlDocument oDocIP = null;
        XmlElement oRootIP = null;
        XmlNode oNodeIPMG = null;
        int count = 0;
        int NCount = 0;
        int FilterCount = 0;
        int RNCount = 0;
        List<string> AClasses = new List<string>();
        List<string> FiltClasses = new List<string>();
        List<string> IndexFiltClass = new List<string>();
        string PricedItinerary = "";
        int iNIP = 0;
        bool isNotEnough = false;
        string FlexToken = "";
        string EchoToken = "";
        string avTempResponse = "";
        string avFinalResponse = "";
        string avFinalRequest = "";
        int outboundcnt = 5;
        int inboundcnt = 5;
        string OTAPrice = "";
        string firstPrice = "";
        int outBoundCntTemp, inBoundCntTemp;
        List<XmlNode> fareBasisCodes = new List<XmlNode>();

        XmlDocument oPDoc = null;
        XmlElement oPRoot = null;
        XmlDocument oPriceDoc = null;
        XmlElement oPriceRoot = null;
        XmlNode oPNode = null;
        string cabinpref = "Economy";
        bool isReturn = true;
        int tempNoOfFlights = 0;
        // ************************************************************
        //  Get the Filtering Elements from OTA LowFareFlights Request   *
        // ************************************************************
        try
        {
            if (ttProviderSystems.NoOfLowFareFlights != "" && (Int32.TryParse(ttProviderSystems.NoOfLowFareFlights.ToString(), out tempNoOfFlights)))
            {
                outboundcnt = tempNoOfFlights;
                inboundcnt = tempNoOfFlights;
            }

            strRequest = mstrRequest;
            oDoc = new XmlDocument();
            oDoc.LoadXml(strRequest);
            oRoot = oDoc.DocumentElement;

            iNIP = Convert.ToInt32(oRoot.SelectSingleNode("TravelerInfoSummary/SeatsRequested").InnerText);

            strSecondRequest = strRequest;

            foreach (XmlNode oNodeResp in oRoot.SelectNodes("SpecificFlightInfo/BookingClassPref[@ResBookDesigCode!='']"))
            {
                AClasses.Add(oNodeResp.SelectSingleNode("@ResBookDesigCode").InnerText);

            }
            try
            {
                cabinpref = oRoot.SelectSingleNode("TravelPreferences").SelectSingleNode("CabinPref").Attributes["Cabin"].Value;
            }
            catch (Exception)
            {
                cabinpref = "Economy";
            }
            if (oRoot.SelectNodes("OriginDestinationInformation").Count > 1)
            {
                isReturn = true;
            }
            else
            {
                isReturn = false;
            }
            // *****************************************************************
            //  Transform OTA LowFareFlights Request into Native Amadeus Request     *
            // ***************************************************************** 
            sb.Append(mstrVersion).Append("AmadeusWS_LowFareFlightsRQ.xsl");
            strResponse = CoreLib.TransformXML(strRequest, mstrXslPath, sb.ToString(), false);
            sb.Remove(0, sb.Length);
            strMessage = strRequest;

            if (strResponse.Length == 0)
            {
                throw new Exception("Transformation produced empty xml.");
            }

            // *******************************************************************************
            //  Send Transformed Request to the Amadeus Adapter and Getting Native Response  *
            // ******************************************************************************* 

            oDocResp = new XmlDocument();
            oDocResp.LoadXml(strResponse);
            oRootResp = oDocResp.DocumentElement;

            //  *******************
            //  Create Session    *
            //  *******************
            try
            {
                //if (ttProviderSystems.SessionPool)
                //{
                //    ttAA = new AmadeusWSAdapter(ttProviderSystems, "V1");
                //    ConversationID = ttAA.CheckSessionV2();
                //}
                //else
                //{
                ttAA = new AmadeusWSAdapter(ttProviderSystems);
                ttAA.isSOAP2 = ttProviderSystems.SOAP2;
                ConversationID = ttAA.CreateSession();
                //}
            }
            catch (Exception ex)
            {
                throw new Exception(sb.Append("Error Creating Session.").Append("\r\n").Append(ex.Message).ToString());
                sb.Remove(0, sb.Length);
            }


            foreach (XmlNode oNodeResp in oRootResp)
            {
                //if (ttProviderSystems.SessionPool)
                //{
                //    strResponse = ttAA.SendMessageV3(oNodeResp.OuterXml, "", "http://webservices.amadeus.com/" + ttProviderSystems.Profile + "/" + ttProviderSystems.AmadeusWSSchema.Air_MultiAvailability, ConversationID);
                //}
                //else
                //{
                string s1 = oNodeResp.OuterXml;
                strResponse = ttAA.SendMessage(oNodeResp.OuterXml, "", "http://webservices.amadeus.com/" + ttProviderSystems.Profile + "/" + ttProviderSystems.AmadeusWSSchema.Air_MultiAvailability, ConversationID);
                //} 
                strResponse = strResponse.Replace(" xmlns=\"http://xml.amadeus.com/" + ttProviderSystems.AmadeusWSSchema.Air_MultiAvailabilityReply + "\"", "");
                XmlDocument oDocRespN1 = new XmlDocument();
                oDocRespN1.LoadXml(strResponse);
                XmlElement oRootRespN1 = oDocRespN1.DocumentElement;

                string strResponse2 = "";

                //if ((oRoot.SelectSingleNode("TravelPreferences/VendorPref").Attributes["Code"].Value.ToUpper() == "AV") || (oRoot.SelectSingleNode("TravelPreferences/VendorPref").Attributes["Code"].Value.ToUpper() == "TA"))
                //{
                //    if (strResponse.IndexOf("NO FLIGHT FOR THIS CITY PAIR") == -1)
                //    {
                //        for (int i = 0; i < 3; i++)
                //        {

                //            try
                //            {
                //                ConversationID = UpdateSessionID(ConversationID);
                //                s1 = s1.Replace("<actionCode>44</actionCode>", "<actionCode>55</actionCode>");
                //                    strResponse2 = ttAA.SendMessage(s1, "", "http://webservices.amadeus.com/" + ttProviderSystems.Profile + "/" + ttProviderSystems.AmadeusWSSchema.Air_MultiAvailability, ConversationID);

                //                strResponse2 = strResponse2.Replace(" xmlns=\"http://xml.amadeus.com/" + ttProviderSystems.AmadeusWSSchema.Air_MultiAvailabilityReply + "\"", "");

                //                //strNxtAirReply = strResponse2;
                //               // ConversationID = UpdateSessionID(ConversationID);

                //                if (strResponse2.IndexOf("NO LATER FLTS") != -1)
                //                    break;

                //                XmlDocument oDocRespN = new XmlDocument();
                //                oDocRespN.LoadXml(strResponse2);
                //                XmlElement oRootRespN = oDocRespN.DocumentElement;
                //                XmlNodeList oNodeRespN = oRootRespN.SelectNodes("singleCityPairInfo/flightInfo");

                //                foreach (XmlNode oNode2 in oNodeRespN)
                //                {
                //                    strResponse = strResponse.Replace("</singleCityPairInfo>", oNode2.OuterXml + "</singleCityPairInfo>");
                //                }



                //            }
                //            catch (Exception ex)
                //            {
                //                //throw ex;
                //            }

                //        }
                //        //strResponse = oRootRespN1.OuterXml;
                //    }
                //}
                strAvailResponses += strResponse.Replace(" xmlns=\"http://xml.amadeus.com/" + ttProviderSystems.AmadeusWSSchema.Air_MultiAvailabilityReply + "\"", "");
                ConversationID = UpdateSessionID(ConversationID);
            }

            //if (strAvailResponses.IndexOf("<Errors>") != 0)
            //{
            strAvailResponses = "<AirAvail>" + strAvailResponses + "</AirAvail>";
            //strAvailResponses = "<AirAvail><Air_MultiAvailabilityReply><messageActionDetails><functionDetails><businessFunction>1</businessFunction><actionCode>45</actionCode></functionDetails><responseType>3</responseType></messageActionDetails><singleCityPairInfo><locationDetails><origin>RUH</origin><destination>BAH</destination></locationDetails><cityPairFreeFlowText><freeTextQualification><codedIndicator>4</codedIndicator><typeOfInfo>50</typeOfInfo></freeTextQualification><freeText>** AMADEUS NEGOTIATED SPACE AVAILABILITY - AT **  191 SA 01OCT 0000</freeText></cityPairFreeFlowText><cityPairFreeFlowText><freeTextQualification><codedIndicator>4</codedIndicator><typeOfInfo>51</typeOfInfo></freeTextQualification><freeText>** NO MORE NEGOTIATED SPACE FLIGHTS **</freeText></cityPairFreeFlowText><flightInfo><basicFlightInfo><flightDetails><departureDate>011011</departureDate><departureTime>1555</departureTime><arrivalDate>011011</arrivalDate><arrivalTime>1700</arrivalTime></flightDetails><departureLocation><cityAirport>RUH</cityAirport></departureLocation><arrivalLocation><cityAirport>BAH</cityAirport></arrivalLocation><marketingCompany><identifier>SV</identifier></marketingCompany><flightIdentification><number>520</number></flightIdentification><productTypeDetail><productIndicators>D</productIndicators></productTypeDetail><lineItemNumber>1</lineItemNumber></basicFlightInfo><infoOnClasses><productClassDetail><serviceClass>S</serviceClass><availabilityStatus>4</availabilityStatus></productClassDetail></infoOnClasses><infoOnClasses><productClassDetail><serviceClass>F</serviceClass><availabilityStatus>20</availabilityStatus></productClassDetail></infoOnClasses><additionalFlightInfo><flightDetails><typeOfAircraft>E70</typeOfAircraft><numberOfStops>0</numberOfStops><legDuration>0105</legDuration></flightDetails><departureStation><terminal>2</terminal></departureStation><productFacilities><type>1A</type></productFacilities></additionalFlightInfo><negoSpaceDetails><ownerDetails><code>SWHEG01</code></ownerDetails><tourName>SAUDIAWORLD</tourName><negoStatus>INTERACTIVE</negoStatus></negoSpaceDetails></flightInfo></singleCityPairInfo></Air_MultiAvailabilityReply><Air_MultiAvailabilityReply><messageActionDetails><functionDetails><businessFunction>1</businessFunction><actionCode>45</actionCode></functionDetails><responseType>3</responseType></messageActionDetails><singleCityPairInfo><locationDetails><origin>BAH</origin><destination>RUH</destination></locationDetails><cityPairFreeFlowText><freeTextQualification><codedIndicator>4</codedIndicator><typeOfInfo>50</typeOfInfo></freeTextQualification><freeText>** AMADEUS NEGOTIATED SPACE AVAILABILITY - AT **  194 TU 04OCT 0000</freeText></cityPairFreeFlowText><cityPairFreeFlowText><freeTextQualification><codedIndicator>4</codedIndicator><typeOfInfo>51</typeOfInfo></freeTextQualification><freeText>** NO MORE NEGOTIATED SPACE FLIGHTS **</freeText></cityPairFreeFlowText><flightInfo><basicFlightInfo><flightDetails><departureDate>041011</departureDate><departureTime>0900</departureTime><arrivalDate>041011</arrivalDate><arrivalTime>1005</arrivalTime></flightDetails><departureLocation><cityAirport>BAH</cityAirport></departureLocation><arrivalLocation><cityAirport>RUH</cityAirport></arrivalLocation><marketingCompany><identifier>SV</identifier></marketingCompany><flightIdentification><number>523</number></flightIdentification><productTypeDetail><productIndicators>D</productIndicators></productTypeDetail><lineItemNumber>1</lineItemNumber></basicFlightInfo><infoOnClasses><productClassDetail><serviceClass>D</serviceClass><availabilityStatus>4</availabilityStatus></productClassDetail></infoOnClasses><infoOnClasses><productClassDetail><serviceClass>F</serviceClass><availabilityStatus>20</availabilityStatus></productClassDetail></infoOnClasses><additionalFlightInfo><flightDetails><typeOfAircraft>E70</typeOfAircraft><numberOfStops>0</numberOfStops><legDuration>0105</legDuration></flightDetails><arrivalStation><terminal>2</terminal></arrivalStation><productFacilities><type>1A</type></productFacilities></additionalFlightInfo><negoSpaceDetails><ownerDetails><code>SWHEG01</code></ownerDetails><tourName>SAUDIAWORLD</tourName><negoStatus>INTERACTIVE</negoStatus></negoSpaceDetails></flightInfo></singleCityPairInfo></Air_MultiAvailabilityReply></AirAvail>";

            #region Filtering Request Classes

            if (oRoot.SelectSingleNode("SpecificFlightInfo/BookingClassPref") != null)
            {
                oDocResp.LoadXml(strAvailResponses);
                oRootResp = oDocResp.DocumentElement;
                oRootNewResp = oDocResp.DocumentElement;

                foreach (XmlNode oNodeResp in oRootResp)
                {
                    NCount++;
                    int FCount = oNodeResp.SelectNodes("singleCityPairInfo/flightInfo").Count;

                    for (int k = 1; k <= FCount; k++)
                    {

                        string tst1 = oNodeResp.OuterXml;
                        int FClassCount = oNodeResp.SelectNodes("singleCityPairInfo/flightInfo[position()=" + k.ToString() + "]/infoOnClasses").Count;


                        if (FClassCount > 0)
                        {
                            for (int i = 1; i <= FClassCount; i++)
                            {
                                string test7 = oNodeResp.SelectSingleNode("singleCityPairInfo/flightInfo[position()=" + k.ToString() + "]/infoOnClasses[position()=" + i.ToString() + "]/productClassDetail/serviceClass").InnerText;
                                if (!AClasses.Contains(oNodeResp.SelectSingleNode("singleCityPairInfo/flightInfo[position()=" + k.ToString() + "]/infoOnClasses[position()=" + i.ToString() + "]/productClassDetail/serviceClass").InnerText))
                                {
                                    oRootNewResp.SelectSingleNode("Air_MultiAvailabilityReply[position()=" + NCount.ToString() + "]/singleCityPairInfo/flightInfo[position()=" + k.ToString() + "]/infoOnClasses[position()=" + i.ToString() + "]").RemoveAll();
                                    RNCount++;
                                    strAvailResponses = oRootNewResp.OuterXml;
                                }
                                else
                                {
                                    int iAS = 0;
                                    iAS = Convert.ToInt32(oNodeResp.SelectSingleNode("singleCityPairInfo/flightInfo[position()=" + k.ToString() + "]/infoOnClasses[position()=" + i.ToString() + "]/productClassDetail/availabilityStatus").InnerText);

                                    if (iNIP > iAS)
                                    {
                                        oRootNewResp.SelectSingleNode("Air_MultiAvailabilityReply[position()=" + NCount.ToString() + "]/singleCityPairInfo/flightInfo[position()=" + k.ToString() + "]/infoOnClasses[position()=" + i.ToString() + "]").RemoveAll();
                                        RNCount++;
                                        strAvailResponses = oRootNewResp.OuterXml;
                                        //isNotEnough = true;
                                    }
                                }
                            }

                            if (FClassCount == RNCount)
                            {
                                oRootNewResp.SelectSingleNode("Air_MultiAvailabilityReply[position()=" + NCount.ToString() + "]/singleCityPairInfo/flightInfo[position()=" + k.ToString() + "]").RemoveAll();
                            }

                            RNCount = 0;
                        }
                        else
                            break;

                    }
                }

                strAvailResponses = oRootNewResp.OuterXml;
            }
            #endregion
            strAvailResponses = strAvailResponses.Replace("<flightInfo></flightInfo>", "");
            oDocResp.LoadXml(strAvailResponses);
            oRootResp = oDocResp.DocumentElement;
            //}

            //&& oRootResp.SelectSingleNode("Air_MultiAvailabilityReply/singleCityPairInfo/flightInfo").InnerXml!=""
            //if (oRootResp.SelectSingleNode("Air_MultiAvailabilityReply/singleCityPairInfo") != null
            //    && oRootResp.SelectSingleNode("Air_MultiAvailabilityReply/singleCityPairInfo/cityPairErrorOrWarning/cityPairErrorOrWarningText[freeTextQualification/codedIndicator='3']") == null
            //    && oRootResp.SelectSingleNode("Air_MultiAvailabilityReply/singleCityPairInfo/flightInfo/basicFlightInfo/flightDetails") != null
            if (oRootResp.SelectSingleNode("Air_MultiAvailabilityReply/singleCityPairInfo/flightInfo/basicFlightInfo/flightDetails") != null
                && strAvailResponses.IndexOf("NO NEGOTIATED SPACE IS AVAILABLE") == -1 && strAvailResponses.IndexOf("NO AVAILABILITY FOR SELECTED PREFERENCE") == -1
                //&& strAvailResponses.IndexOf("NO MORE NEGOTIATED SPACE FLIGHTS") == -1
                && (strAvailResponses.IndexOf("<Air_MultiAvailabilityReply/>") == -1 && strAvailResponses.IndexOf("<Air_MultiAvailabilityReply></Air_MultiAvailabilityReply>") == -1))
            // && !isNotEnough)
            {
                #region "Avianca change"

                if (oRoot.SelectSingleNode("TravelPreferences/VendorPref") != null && oRoot.SelectSingleNode("TravelPreferences/VendorPref").Attributes["Code"] != null && ((oRoot.SelectSingleNode("TravelPreferences/VendorPref").Attributes["Code"].Value.ToUpper() == "AV") || (oRoot.SelectSingleNode("TravelPreferences/VendorPref").Attributes["Code"].Value.ToUpper() == "TA") || (oRoot.SelectSingleNode("TravelPreferences/VendorPref").Attributes["Code"].Value.ToUpper() == "UL")))
                {

                    if (oRootResp.SelectSingleNode("Air_MultiAvailabilityReply/singleCityPairInfo/flightInfo").InnerXml != "")
                    {
                        string tt = oRootResp.SelectSingleNode("Air_MultiAvailabilityReply/singleCityPairInfo/flightInfo").InnerXml;
                        //foreach (XmlNode oNodeResp in oRootResp)
                        //{
                        //    strFirstFlight += "<OD>";
                        //    oNode = oNodeResp.SelectSingleNode("singleCityPairInfo/flightInfo[1]");
                        //    strFirstFlight += oNode.OuterXml;

                        //    if (oNode.SelectSingleNode("basicFlightInfo") != null)
                        //    {
                        //        if (oNode.SelectSingleNode("basicFlightInfo/productTypeDetail/productIndicators").InnerText == "S")
                        //        {
                        //            strFirstFlight += oNodeResp.SelectSingleNode("singleCityPairInfo/flightInfo[position()=2]").OuterXml;

                        //            if (oNodeResp.SelectSingleNode("singleCityPairInfo/flightInfo[position()=2]/basicFlightInfo/productTypeDetail/productIndicators").InnerText == "S"
                        //                || oNodeResp.SelectSingleNode("singleCityPairInfo/flightInfo[position()=2]/basicFlightInfo/productTypeDetail/productIndicators").InnerText == "C")
                        //            {
                        //                strFirstFlight += oNodeResp.SelectSingleNode("singleCityPairInfo/flightInfo[position()=3]").OuterXml;

                        //                if (oNodeResp.SelectSingleNode("singleCityPairInfo/flightInfo[position()=3]/basicFlightInfo/productTypeDetail/productIndicators").InnerText == "S"
                        //                    || oNodeResp.SelectSingleNode("singleCityPairInfo/flightInfo[position()=3]/basicFlightInfo/productTypeDetail/productIndicators").InnerText == "C")
                        //                {
                        //                    strFirstFlight += oNodeResp.SelectSingleNode("singleCityPairInfo/flightInfo[position()=4]").OuterXml;
                        //                }
                        //            }
                        //        }
                        //    }
                        //    strFirstFlight += "</OD>";
                        //}

                        int outBoundCnt = 0;
                        int inBoundCnt = 0;

                        outBoundCnt = oRootResp.SelectNodes("Air_MultiAvailabilityReply[1]/singleCityPairInfo/flightInfo[basicFlightInfo/productTypeDetail/productIndicators='D' or basicFlightInfo/productTypeDetail/productIndicators='S']").Count;
                        if (isReturn)
                            inBoundCnt = oRootResp.SelectNodes("Air_MultiAvailabilityReply[2]/singleCityPairInfo/flightInfo[basicFlightInfo/productTypeDetail/productIndicators='D' or basicFlightInfo/productTypeDetail/productIndicators='S']").Count;

                        if (outBoundCnt > outboundcnt)
                        {
                            outBoundCntTemp = outboundcnt;
                        }
                        else
                        {
                            outBoundCntTemp = outBoundCnt;
                        }
                        if (isReturn)
                        {


                            if (inBoundCnt > inboundcnt)
                            {
                                inBoundCntTemp = inboundcnt;
                            }
                            else
                            {
                                inBoundCntTemp = inBoundCnt;
                            }
                        }
                        else
                        {
                            inBoundCnt = 1;
                            inBoundCntTemp = inBoundCnt;
                        }


                        priceTags = new string[outboundcnt, inboundcnt];
                        PricingSource = new string[outboundcnt, inboundcnt];
                        NegoCode = new string[outboundcnt, inboundcnt];
                        TicketTimeLimit = new string[outboundcnt, inboundcnt];
                        OutClass = new string[outboundcnt, inboundcnt];
                        InClass = new string[outboundcnt, inboundcnt];
                        flSegments = new string[outboundcnt, inboundcnt];

                        strReq = new string[26];
                        bPriceEnd = new bool[26];
                        OTAPriceTotal = new string[25];
                        OTAReqTotal = new string[25];
                        avTempResponseTotal = new string[25];


                        XmlNode[,] BaseFare = new XmlNode[outboundcnt, inboundcnt];
                        XmlNode[,] TotalTax = new XmlNode[outboundcnt, inboundcnt];
                        XmlNode[,] TotalFare = new XmlNode[outboundcnt, inboundcnt];
                        XmlNode[,] PriceBreakDown = new XmlNode[outboundcnt, inboundcnt];

                        string query = "<OTA_AirLowFareSearchFlightsRS><PricedItineraries><PricedItinerary SequenceNumber=\"0\"><AirItinerary DirectionInd=\"Circle\"><OriginDestinationOptions><OriginDestinationOption SectorSequence=\"1\"><FlightSegment DepartureDateTime=\"2000-01-07T10:15:00\" ArrivalDateTime=\"2000-01-07T13:50:00\" StopQuantity=\"0\" RPH=\"D\" FlightNumber=\"38\" ResBookDesigCode=\"111111\" NumberInParty=\"1\" E_TicketEligibility=\"Eligible\">" +
                                         "<DepartureAirport LocationCode=\"CLO\"/><ArrivalAirport LocationCode=\"MIA\"/><OperatingAirline Code=\"AV\"/><Equipment AirEquipType=\"000\"/><MarketingAirline Code=\"AV\"/><TPA_Extensions><CabinType Cabin=\"Economy\"/><JourneyTotalDuration>03:35</JourneyTotalDuration>" +
                                         "</TPA_Extensions></FlightSegment></OriginDestinationOption><OriginDestinationOption SectorSequence=\"2\"><FlightSegment DepartureDateTime=\"2000-01-07T10:15:00\" ArrivalDateTime=\"2000-01-07T13:50:00\" StopQuantity=\"0\" RPH=\"D\" FlightNumber=\"38\" ResBookDesigCode=\"Q\" NumberInParty=\"1\" E_TicketEligibility=\"Eligible\">" +
                                         "<DepartureAirport LocationCode=\"CLO\"/><ArrivalAirport LocationCode=\"MIA\"/><OperatingAirline Code=\"AV\"/><Equipment AirEquipType=\"000\"/><MarketingAirline Code=\"AV\"/><TPA_Extensions><CabinType Cabin=\"Economy\"/><JourneyTotalDuration>03:35</JourneyTotalDuration>" +
                                         "</TPA_Extensions></FlightSegment></OriginDestinationOption></OriginDestinationOptions></AirItinerary><AirItineraryPricingInfo PricingSource=\"Published\" ValidatingAirlineCode=\"AV\"><ItinTotalFare><BaseFare Amount=\"00000\" CurrencyCode=\"COP\" DecimalPlaces=\"0\"/><Taxes><Tax TaxCode=\"TotalTax\" Amount=\"00000\" CurrencyCode=\"COP\" DecimalPlaces=\"0\"/>" +
                                         "</Taxes><TotalFare Amount=\"00000\" CurrencyCode=\"COP\" DecimalPlaces=\"0\"/></ItinTotalFare><FareInfos><FareInfo><DepartureDate/><FareReference>Q</FareReference><FilingAirline/><DepartureAirport LocationCode=\"\"/><ArrivalAirport LocationCode=\"\"/></FareInfo><FareInfo><DepartureDate/><FareReference>V</FareReference><FilingAirline/><DepartureAirport LocationCode=\"\"/><ArrivalAirport LocationCode=\"\"/></FareInfo></FareInfos></AirItineraryPricingInfo><TicketingInfo TicketTimeLimit=\"2000-12-11T23:59:00\"/></PricedItinerary></PricedItineraries></OTA_AirLowFareSearchFlightsRS>";

                        if (isReturn)
                        {
                            Thread[] oDbThread = new Thread[25];

                            for (int i = 1; i <= outBoundCntTemp; i++)
                            {
                                for (int j = 1; j <= inBoundCntTemp; j++)
                                {
                                    strFirstFlight = "";
                                    int segmentCount = 1;
                                    //// outbound ////////
                                    strFirstFlight += "<OD>";
                                    XmlNode oNodeResp = oRootResp.SelectSingleNode("Air_MultiAvailabilityReply[1]");

                                    oNode = oNodeResp.SelectSingleNode("singleCityPairInfo/flightInfo[basicFlightInfo/productTypeDetail/productIndicators='D' or basicFlightInfo/productTypeDetail/productIndicators='S'][" + i.ToString() + "]");
                                    strFirstFlight += oNode.OuterXml;

                                    if (oNode.SelectSingleNode("basicFlightInfo/productTypeDetail/productIndicators").InnerText == "S")
                                    {
                                        XmlNodeList oFlightInfoList = oNodeResp.SelectNodes("singleCityPairInfo/flightInfo");
                                        int fiIndex = 1;

                                        foreach (XmlNode oFlightInfo in oFlightInfoList)
                                        {
                                            if (oFlightInfo.SelectSingleNode("basicFlightInfo/productTypeDetail/productIndicators").InnerText == "S")
                                            {
                                                if (oNode.InnerXml == oFlightInfo.InnerXml)
                                                {
                                                    for (int m = fiIndex; m <= oFlightInfoList.Count; m++)
                                                    {
                                                        strFirstFlight += oFlightInfoList[m].OuterXml;
                                                        segmentCount += 1;

                                                        if (oFlightInfoList[m].SelectSingleNode("basicFlightInfo/productTypeDetail/productIndicators").InnerText == "E")
                                                        {
                                                            break;
                                                        }
                                                    }

                                                    break;
                                                }
                                            }

                                            fiIndex += 1;
                                        }
                                    }

                                    flSegments[i - 1, j - 1] = segmentCount.ToString();
                                    segmentCount = 1;

                                    //if (oNode.SelectSingleNode("basicFlightInfo") != null)
                                    //{
                                    //    if (oNode.SelectSingleNode("basicFlightInfo/productTypeDetail/productIndicators").InnerText == "S")
                                    //    {
                                    //        strFirstFlight += oNodeResp.SelectSingleNode("singleCityPairInfo/flightInfo[position()=2]").OuterXml;

                                    //        if (oNodeResp.SelectSingleNode("singleCityPairInfo/flightInfo[position()=2]/basicFlightInfo/productTypeDetail/productIndicators").InnerText == "S"
                                    //            || oNodeResp.SelectSingleNode("singleCityPairInfo/flightInfo[position()=2]/basicFlightInfo/productTypeDetail/productIndicators").InnerText == "C")
                                    //        {
                                    //            strFirstFlight += oNodeResp.SelectSingleNode("singleCityPairInfo/flightInfo[position()=3]").OuterXml;

                                    //            if (oNodeResp.SelectSingleNode("singleCityPairInfo/flightInfo[position()=3]/basicFlightInfo/productTypeDetail/productIndicators").InnerText == "S"
                                    //                || oNodeResp.SelectSingleNode("singleCityPairInfo/flightInfo[position()=3]/basicFlightInfo/productTypeDetail/productIndicators").InnerText == "C")
                                    //            {
                                    //                strFirstFlight += oNodeResp.SelectSingleNode("singleCityPairInfo/flightInfo[position()=4]").OuterXml;
                                    //            }
                                    //        }
                                    //    }
                                    //}
                                    strFirstFlight += "</OD>";
                                    /////////////

                                    //// inbound ////////
                                    strFirstFlight += "<OD>";
                                    oNodeResp = oRootResp.SelectSingleNode("Air_MultiAvailabilityReply[2]");
                                    oNode = oNodeResp.SelectSingleNode("singleCityPairInfo/flightInfo[basicFlightInfo/productTypeDetail/productIndicators='D' or basicFlightInfo/productTypeDetail/productIndicators='S'][" + j.ToString() + "]");
                                    strFirstFlight += oNode.OuterXml;

                                    if (oNode.SelectSingleNode("basicFlightInfo/productTypeDetail/productIndicators").InnerText == "S")
                                    {
                                        XmlNodeList oFlightInfoList = oNodeResp.SelectNodes("singleCityPairInfo/flightInfo");
                                        int fiIndex = 1;

                                        foreach (XmlNode oFlightInfo in oFlightInfoList)
                                        {
                                            if (oFlightInfo.SelectSingleNode("basicFlightInfo/productTypeDetail/productIndicators").InnerText == "S")
                                            {
                                                if (oNode.InnerXml == oFlightInfo.InnerXml)
                                                {
                                                    for (int m = fiIndex; m <= oFlightInfoList.Count; m++)
                                                    {
                                                        strFirstFlight += oFlightInfoList[m].OuterXml;
                                                        segmentCount += 1;

                                                        if (oFlightInfoList[m].SelectSingleNode("basicFlightInfo/productTypeDetail/productIndicators").InnerText == "E")
                                                        {
                                                            break;
                                                        }
                                                    }

                                                    break;
                                                }
                                            }

                                            fiIndex += 1;
                                        }
                                    }

                                    //if (oNode.SelectSingleNode("basicFlightInfo") != null)
                                    //{
                                    //    if (oNode.SelectSingleNode("basicFlightInfo/productTypeDetail/productIndicators").InnerText == "S")
                                    //    {
                                    //        strFirstFlight += oNodeResp.SelectSingleNode("singleCityPairInfo/flightInfo[position()=2]").OuterXml;

                                    //        if (oNodeResp.SelectSingleNode("singleCityPairInfo/flightInfo[position()=2]/basicFlightInfo/productTypeDetail/productIndicators").InnerText == "S"
                                    //            || oNodeResp.SelectSingleNode("singleCityPairInfo/flightInfo[position()=2]/basicFlightInfo/productTypeDetail/productIndicators").InnerText == "C")
                                    //        {
                                    //            strFirstFlight += oNodeResp.SelectSingleNode("singleCityPairInfo/flightInfo[position()=3]").OuterXml;

                                    //            if (oNodeResp.SelectSingleNode("singleCityPairInfo/flightInfo[position()=3]/basicFlightInfo/productTypeDetail/productIndicators").InnerText == "S"
                                    //                || oNodeResp.SelectSingleNode("singleCityPairInfo/flightInfo[position()=3]/basicFlightInfo/productTypeDetail/productIndicators").InnerText == "C")
                                    //            {
                                    //                strFirstFlight += oNodeResp.SelectSingleNode("singleCityPairInfo/flightInfo[position()=4]").OuterXml;
                                    //            }
                                    //        }
                                    //    }
                                    //}

                                    flSegments[i - 1, j - 1] += segmentCount.ToString();
                                    strFirstFlight += "</OD>";
                                    /////////////
                                    // ********************************************************************
                                    //  Transform Native Amadeus response into OTA air price request      *
                                    // ******************************************************************** 
                                    strRequest = mstrRequest.Replace("</OTA_AirLowFareSearchFlightsRQ>", strFirstFlight + "</OTA_AirLowFareSearchFlightsRQ>");

                                    sb.Append(mstrVersion).Append("AmadeusWS_LowFareFlights1RQ.xsl");
                                    strRequest = CoreLib.TransformXML(strRequest, mstrXslPath, sb.ToString(), false);
                                    sb.Remove(0, sb.Length);

                                    strRequestTotal = strRequest;
                                    oDbThread[iFareSearches] = new Thread(new ThreadStart(SearchFares));
                                    oDbThread[iFareSearches].Start();

                                    //avTempResponse = ttAA.SendMessage(strRequest, "", "http://webservices.amadeus.com/" + ttProviderSystems.Profile + "/" + ttProviderSystems.AmadeusWSSchema.Fare_InformativeBestPricingWithoutPNR, ConversationID);

                                    //avTempResponse = avTempResponse.Replace(" xmlns=\"http://xml.amadeus.com/" + ttProviderSystems.AmadeusWSSchema.Fare_InformativeBestPricingWithoutPNRReply + "\"", "");

                                    //ConversationID = UpdateSessionID(ConversationID);

                                    while (!oDbThread[iFareSearches].IsAlive) ;
                                    Thread.Sleep(10);

                                    iFareSearches += 1;

                                    //OTAPrice = CoreLib.TransformXML(avTempResponse, mstrXslPath, "AmadeusWS_AirPriceRS.xsl", false);

                                    //avFinalResponse = avFinalResponse + avTempResponse;

                                    //oPDoc = new XmlDocument();
                                    //oPDoc.LoadXml(OTAPrice);
                                    //oPRoot = oPDoc.DocumentElement;
                                    //string strTemp = oPRoot.SelectSingleNode("PricedItineraries").SelectNodes("PricedItinerary").Item(0).SelectSingleNode("AirItineraryPricingInfo").SelectSingleNode("ItinTotalFare").InnerXml;
                                    ////strTemp = oPNode.SelectSingleNode("PricedItineraries").SelectNodes("PricedItinerary").Item(0).SelectSingleNode("AirItineraryPricingInfo").SelectSingleNode("ItinTotalFare").InnerXml;

                                    //priceTags[i - 1, j - 1] = strTemp;
                                    //PricingSource[i - 1, j - 1] = oPRoot.SelectSingleNode("PricedItineraries").SelectNodes("PricedItinerary").Item(0).SelectSingleNode("AirItineraryPricingInfo").Attributes["PricingSource"].Value;
                                    //TicketTimeLimit[i - 1, j - 1] = oPRoot.SelectSingleNode("PricedItineraries").SelectNodes("PricedItinerary").Item(0).SelectSingleNode("TicketingInfo").Attributes["TicketTimeLimit"].Value;
                                    //OutClass[i - 1, j - 1] = oPRoot.SelectSingleNode("PricedItineraries").SelectNodes("PricedItinerary").Item(0).SelectSingleNode("AirItineraryPricingInfo").SelectSingleNode("FareInfos").SelectNodes("FareInfo").Item(0).SelectSingleNode("FareReference").InnerText;
                                    //InClass[i - 1, j - 1] = oPRoot.SelectSingleNode("PricedItineraries").SelectNodes("PricedItinerary").Item(0).SelectSingleNode("AirItineraryPricingInfo").SelectSingleNode("FareInfos").SelectNodes("FareInfo").Item(1).SelectSingleNode("FareReference").InnerText;

                                    ////BaseFare[i - 1, j - 1]=oPRoot.SelectSingleNode("PricedItineraries").SelectNodes("PricedItinerary").Item(0).SelectSingleNode("AirItineraryPricingInfo").SelectSingleNode("ItinTotalFare").SelectSingleNode("BaseFare");
                                    ////TotalTax[i - 1, j - 1]=oPRoot.SelectSingleNode("PricedItineraries").SelectNodes("PricedItinerary").Item(0).SelectSingleNode("AirItineraryPricingInfo").SelectSingleNode("ItinTotalFare").SelectSingleNode("Taxes");
                                    ////TotalFare[i - 1, j - 1]=oPRoot.SelectSingleNode("PricedItineraries").SelectNodes("PricedItinerary").Item(0).SelectSingleNode("AirItineraryPricingInfo").SelectSingleNode("ItinTotalFare").SelectSingleNode("TotalFare");

                                    //if (i == 1 && j == 1)
                                    //{
                                    //    firstPrice = avTempResponse;
                                    //}


                                }
                            }
                            iFareSearches = iFareSearches - 1;
                            DateTime StartCounter = DateTime.Now;

                            while (iFinishedPrices < (outBoundCntTemp * inBoundCntTemp))
                            {
                                if (Convert.ToInt32(DateTime.Now.Subtract(StartCounter).TotalSeconds) > 60)
                                    break;
                                System.Threading.Thread.Sleep(1000);
                            }

                            string ORT = "";
                            string OPT = "";
                            string aTR = "";
                            string OTOT = "";
                            for (int k = 0; k < (outBoundCntTemp * inBoundCntTemp); k++)
                            {
                                ORT += OTAReqTotal[k];
                                OPT += OTAPriceTotal[k];
                                aTR += avTempResponseTotal[k];
                            }

                            OTOT = "<a>" + ORT + aTR + OPT + "</a>";

                            CoreLib.SendTrace(ttProviderSystems.UserID, "AmadeusWSService", "strResponseTotal", OTOT);

                            firstPrice = avTempResponseTotal[0];

                            iFareSearches = 0;


                            for (int i = 1; i <= outBoundCntTemp; i++)
                            {
                                for (int j = 1; j <= inBoundCntTemp; j++)
                                {
                                    if (OTAPriceTotal[iFareSearches] == null || OTAPriceTotal[iFareSearches].Length == 0)
                                    {
                                        OTAPriceTotal[iFareSearches] = "<OTA_AirPriceRS Version=\"2003.2\"><Errors><Error Type=\"Amadeus\" Code=\"911\">NO FARE FOR BOOKING CODE-TRY OTHER PRICING OPTIONS</Error></Errors></OTA_AirPriceRS>";
                                    }
                                    oPDoc = new XmlDocument();
                                    oPDoc.LoadXml(OTAPriceTotal[iFareSearches]);
                                    oPRoot = oPDoc.DocumentElement;
                                    string strTemp = null;
                                    if (oPRoot != null && oPRoot.FirstChild.LocalName != "Errors")
                                    {
                                        sb.Append(mstrVersion).Append("AmadeusWS_LowFareFlights1RS.xsl");

                                        string pRes = CoreLib.TransformXML("<FIP>" + strRequest + avTempResponseTotal[iFareSearches] + "</FIP>", mstrXslPath, sb.ToString(), false);
                                        sb.Remove(0, sb.Length);

                                        pRes = pRes.Replace("</Fare_InformativeBestPricingWithoutPNRReply>", oRoot.SelectSingleNode("TravelerInfoSummary/AirTravelerAvail").OuterXml + strFirstFlight + "</Fare_InformativeBestPricingWithoutPNRReply>");

                                        pRes = "<FS>" + strAvailResponses + pRes + "</FS>";
                                        sb.Append(mstrVersion).Append("AmadeusWS_LowFareFlightsRS.xsl");
                                        string presF = CoreLib.TransformXML(pRes, mstrXslPath, sb.ToString(), false);
                                        sb.Remove(0, sb.Length);

                                        oPriceDoc = new XmlDocument();
                                        oPriceDoc.LoadXml(presF);
                                        oPriceRoot = oPriceDoc.DocumentElement;

                                        strTemp = oPRoot.SelectSingleNode("PricedItineraries").SelectNodes("PricedItinerary").Item(0).SelectSingleNode("AirItineraryPricingInfo").SelectSingleNode("ItinTotalFare").InnerXml;
                                        XmlNodeList fareInfos = oPRoot.SelectSingleNode("PricedItineraries").SelectNodes("PricedItinerary").Item(0).SelectSingleNode("AirItineraryPricingInfo").SelectSingleNode("FareInfos").SelectNodes("FareInfo");
                                        int iOut = int.Parse(flSegments[i - 1, j - 1].Substring(0, 1));

                                        if (oPriceRoot.SelectSingleNode("PricedItineraries").SelectNodes("PricedItinerary").Item(0).SelectSingleNode("AirItineraryPricingInfo/PTC_FareBreakdowns") != null)
                                        {
                                            fareBasisCodes.Add(oPriceRoot.SelectSingleNode("PricedItineraries").SelectNodes("PricedItinerary").Item(0).SelectSingleNode("AirItineraryPricingInfo/PTC_FareBreakdowns"));

                                        }

                                        for (int v = 0; v < iOut; v++)
                                        {
                                            OutClass[i - 1, j - 1] += fareInfos[v].SelectSingleNode("FareReference").InnerText;
                                        }

                                        int iIn = int.Parse(flSegments[i - 1, j - 1].Substring(1)) + iOut;

                                        for (int v = iOut; v < iIn; v++)
                                        {
                                            InClass[i - 1, j - 1] += fareInfos[v].SelectSingleNode("FareReference").InnerText;
                                        }

                                    }
                                    else
                                    {
                                        fareBasisCodes.Add(oPRoot.FirstChild);
                                        XmlDocument tempDoc = new XmlDocument();
                                        tempDoc.LoadXml(query);
                                        oPRoot = tempDoc.DocumentElement;

                                        strTemp = oPRoot.SelectSingleNode("PricedItineraries").SelectNodes("PricedItinerary").Item(0).SelectSingleNode("AirItineraryPricingInfo").SelectSingleNode("ItinTotalFare").InnerXml;
                                        //fareBasisCodes.Add(oPriceRoot.SelectSingleNode("PricedItineraries").SelectNodes("PricedItinerary").Item(0).SelectSingleNode("AirItineraryPricingInfo/PTC_FareBreakdowns"));
                                        //fareBasisCodes.Add(new XmlNode());

                                        OutClass[i - 1, j - 1] = "00000000";
                                        InClass[i - 1, j - 1] = "111111111111111";


                                    }
                                    priceTags[i - 1, j - 1] = strTemp;
                                    PricingSource[i - 1, j - 1] = oPRoot.SelectSingleNode("PricedItineraries").SelectNodes("PricedItinerary").Item(0).SelectSingleNode("AirItineraryPricingInfo").Attributes["PricingSource"].Value;
                                    if (oPRoot.SelectSingleNode("PricedItineraries").SelectNodes("PricedItinerary").Item(0).SelectSingleNode("AirItineraryPricingInfo").Attributes["NegotiatedFareCode"] != null)
                                    {
                                        NegoCode[i - 1, j - 1] = oPRoot.SelectSingleNode("PricedItineraries").SelectNodes("PricedItinerary").Item(0).SelectSingleNode("AirItineraryPricingInfo").Attributes["NegotiatedFareCode"].Value;
                                    }
                                    else
                                    {
                                        NegoCode[i - 1, j - 1] = "";
                                    }
                                    TicketTimeLimit[i - 1, j - 1] = oPRoot.SelectSingleNode("PricedItineraries").SelectNodes("PricedItinerary").Item(0).SelectSingleNode("TicketingInfo").Attributes["TicketTimeLimit"].Value;





                                    BaseFare[i - 1, j - 1] = oPRoot.SelectSingleNode("PricedItineraries").SelectNodes("PricedItinerary").Item(0).SelectSingleNode("AirItineraryPricingInfo").SelectSingleNode("ItinTotalFare").SelectSingleNode("BaseFare");
                                    TotalTax[i - 1, j - 1] = oPRoot.SelectSingleNode("PricedItineraries").SelectNodes("PricedItinerary").Item(0).SelectSingleNode("AirItineraryPricingInfo").SelectSingleNode("ItinTotalFare").SelectSingleNode("Taxes").SelectSingleNode("Tax");
                                    TotalTax[i - 1, j - 1].Attributes.RemoveNamedItem("TaxCode");
                                    TotalFare[i - 1, j - 1] = oPRoot.SelectSingleNode("PricedItineraries").SelectNodes("PricedItinerary").Item(0).SelectSingleNode("AirItineraryPricingInfo").SelectSingleNode("ItinTotalFare").SelectSingleNode("TotalFare");

                                    //strTemp = oPNode.SelectSingleNode("PricedItineraries").SelectNodes("PricedItinerary").Item(0).SelectSingleNode("AirItineraryPricingInfo").SelectSingleNode("ItinTotalFare").InnerXml;



                                    //if (i == 1 && j == 1)
                                    //{
                                    //    firstPrice = avTempResponse;
                                    //}



                                    iFareSearches += 1;
                                }
                            }
                        }
                        else
                        {
                            for (int i = 1; i <= outBoundCntTemp; i++)
                            {
                                strFirstFlight = "";


                                //// outbound ////////
                                strFirstFlight += "<OD>";
                                //XmlNode oNodeResp = oRootResp.SelectSingleNode("Air_MultiAvailabilityReply[1]");
                                //oNode = oNodeResp.SelectSingleNode("singleCityPairInfo/flightInfo[" + i.ToString() + "]");
                                //strFirstFlight += oNode.OuterXml;

                                XmlNode oNodeResp = oRootResp.SelectSingleNode("Air_MultiAvailabilityReply[1]");

                                oNode = oNodeResp.SelectSingleNode("singleCityPairInfo/flightInfo[basicFlightInfo/productTypeDetail/productIndicators='D' or basicFlightInfo/productTypeDetail/productIndicators='S'][" + i.ToString() + "]");
                                strFirstFlight += oNode.OuterXml;

                                if (oNode.SelectSingleNode("basicFlightInfo/productTypeDetail/productIndicators").InnerText == "S")
                                {
                                    XmlNodeList oFlightInfoList = oNodeResp.SelectNodes("singleCityPairInfo/flightInfo");
                                    int fiIndex = 1;

                                    foreach (XmlNode oFlightInfo in oFlightInfoList)
                                    {
                                        if (oFlightInfo.SelectSingleNode("basicFlightInfo/productTypeDetail/productIndicators").InnerText == "S")
                                        {
                                            if (oNode.InnerXml == oFlightInfo.InnerXml)
                                            {
                                                for (int m = fiIndex; m <= oFlightInfoList.Count; m++)
                                                {
                                                    strFirstFlight += oFlightInfoList[m].OuterXml;
                                                    //segmentCount += 1;

                                                    if (oFlightInfoList[m].SelectSingleNode("basicFlightInfo/productTypeDetail/productIndicators").InnerText == "E")
                                                    {
                                                        break;
                                                    }
                                                }

                                                break;
                                            }
                                        }

                                        fiIndex += 1;
                                    }
                                }

                                //flSegments[i - 1, j - 1] = segmentCount.ToString();
                                //segmentCount = 1;

                                strFirstFlight += "</OD>";
                                /////////////
                                // ********************************************************************
                                //  Transform Native Amadeus response into OTA air price request      *
                                // ******************************************************************** 
                                strRequest = mstrRequest.Replace("</OTA_AirLowFareSearchFlightsRQ>", strFirstFlight + "</OTA_AirLowFareSearchFlightsRQ>");

                                sb.Append(mstrVersion).Append("AmadeusWS_LowFareFlights1RQ.xsl");
                                strRequest = CoreLib.TransformXML(strRequest, mstrXslPath, sb.ToString(), false);
                                sb.Remove(0, sb.Length);

                                avTempResponse = ttAA.SendMessage(strRequest, "", "http://webservices.amadeus.com/" + ttProviderSystems.Profile + "/" + ttProviderSystems.AmadeusWSSchema.Fare_InformativeBestPricingWithoutPNR, ConversationID);

                                avTempResponse = avTempResponse.Replace(" xmlns=\"http://xml.amadeus.com/" + ttProviderSystems.AmadeusWSSchema.Fare_InformativeBestPricingWithoutPNRReply + "\"", "");

                                ConversationID = UpdateSessionID(ConversationID);

                                sb.Remove(0, sb.Length);
                                sb.Append(mstrVersion).Append("AmadeusWS_LowFareFlights1RS.xsl");

                                avTempResponse = CoreLib.TransformXML("<FIP>" + strRequest + avTempResponse + "</FIP>", mstrXslPath, sb.ToString(), false);
                                sb.Remove(0, sb.Length);

                                OTAPrice = CoreLib.TransformXML(avTempResponse, mstrXslPath, "AmadeusWS_AirPriceRS.xsl", false);

                                avFinalResponse = avFinalResponse + avTempResponse;

                                oPDoc = new XmlDocument();
                                oPDoc.LoadXml(OTAPrice);
                                oPRoot = oPDoc.DocumentElement;

                                if (oPRoot != null && oPRoot.FirstChild.LocalName != "Errors")
                                {
                                    sb.Append(mstrVersion).Append("AmadeusWS_LowFareFlights1RS.xsl");

                                    string pRes = CoreLib.TransformXML("<FIP>" + strRequest + avTempResponse + "</FIP>", mstrXslPath, sb.ToString(), false);
                                    sb.Remove(0, sb.Length);

                                    pRes = pRes.Replace("</Fare_InformativeBestPricingWithoutPNRReply>", oRoot.SelectSingleNode("TravelerInfoSummary/AirTravelerAvail").OuterXml + strFirstFlight + "</Fare_InformativeBestPricingWithoutPNRReply>");

                                    pRes = "<FS>" + strAvailResponses + pRes + "</FS>";
                                    sb.Append(mstrVersion).Append("AmadeusWS_LowFareFlightsRS.xsl");
                                    string presF = CoreLib.TransformXML(pRes, mstrXslPath, sb.ToString(), false);
                                    sb.Remove(0, sb.Length);

                                    oPriceDoc = new XmlDocument();
                                    oPriceDoc.LoadXml(presF);
                                    oPriceRoot = oPriceDoc.DocumentElement;

                                    XmlNodeList fareInfos = oPRoot.SelectSingleNode("PricedItineraries").SelectNodes("PricedItinerary").Item(0).SelectSingleNode("AirItineraryPricingInfo").SelectSingleNode("FareInfos").SelectNodes("FareInfo");
                                    for (int v = 0; v < fareInfos.Count; v++)
                                    {
                                        OutClass[i - 1, 0] += fareInfos[v].InnerText;

                                    }

                                    if (oPriceRoot.SelectSingleNode("PricedItineraries").SelectNodes("PricedItinerary").Item(0).SelectSingleNode("AirItineraryPricingInfo/PTC_FareBreakdowns") != null)
                                    {
                                        fareBasisCodes.Add(oPriceRoot.SelectSingleNode("PricedItineraries").SelectNodes("PricedItinerary").Item(0).SelectSingleNode("AirItineraryPricingInfo/PTC_FareBreakdowns"));

                                    }
                                }
                                else
                                {
                                    oPDoc = new XmlDocument();
                                    oPDoc.LoadXml(query);
                                    oPRoot = oPDoc.DocumentElement;

                                    OutClass[i - 1, 0] = "0000000000";


                                }
                                string strTemp = oPRoot.SelectSingleNode("PricedItineraries").SelectNodes("PricedItinerary").Item(0).SelectSingleNode("AirItineraryPricingInfo").SelectSingleNode("ItinTotalFare").InnerXml;
                                //strTemp = oPNode.SelectSingleNode("PricedItineraries").SelectNodes("PricedItinerary").Item(0).SelectSingleNode("AirItineraryPricingInfo").SelectSingleNode("ItinTotalFare").InnerXml;

                                priceTags[i - 1, 0] = strTemp;
                                PricingSource[i - 1, 0] = oPRoot.SelectSingleNode("PricedItineraries").SelectNodes("PricedItinerary").Item(0).SelectSingleNode("AirItineraryPricingInfo").Attributes["PricingSource"].Value;
                                if (oPRoot.SelectSingleNode("PricedItineraries").SelectNodes("PricedItinerary").Item(0).SelectSingleNode("AirItineraryPricingInfo").Attributes["NegotiatedFareCode"] != null)
                                {
                                    NegoCode[i - 1, 0] = oPRoot.SelectSingleNode("PricedItineraries").SelectNodes("PricedItinerary").Item(0).SelectSingleNode("AirItineraryPricingInfo").Attributes["NegotiatedFareCode"].Value;
                                }
                                else
                                {
                                    NegoCode[i - 1, 0] = "";
                                }
                                TicketTimeLimit[i - 1, 0] = oPRoot.SelectSingleNode("PricedItineraries").SelectNodes("PricedItinerary").Item(0).SelectSingleNode("TicketingInfo").Attributes["TicketTimeLimit"].Value;




                                BaseFare[i - 1, 0] = oPRoot.SelectSingleNode("PricedItineraries").SelectNodes("PricedItinerary").Item(0).SelectSingleNode("AirItineraryPricingInfo").SelectSingleNode("ItinTotalFare").SelectSingleNode("BaseFare");
                                TotalTax[i - 1, 0] = oPRoot.SelectSingleNode("PricedItineraries").SelectNodes("PricedItinerary").Item(0).SelectSingleNode("AirItineraryPricingInfo").SelectSingleNode("ItinTotalFare").SelectSingleNode("Taxes").SelectSingleNode("Tax");
                                TotalTax[i - 1, 0].Attributes.RemoveNamedItem("TaxCode");
                                TotalFare[i - 1, 0] = oPRoot.SelectSingleNode("PricedItineraries").SelectNodes("PricedItinerary").Item(0).SelectSingleNode("AirItineraryPricingInfo").SelectSingleNode("ItinTotalFare").SelectSingleNode("TotalFare");

                                if (i == 1)
                                {
                                    firstPrice = avTempResponse;
                                }

                            }
                        }



                        sb.Append(mstrVersion).Append("AmadeusWS_LowFareFlights1RS.xsl");

                        int loopcnt2 = 0;
                        if (firstPrice != null && firstPrice != "")
                        {


                            if (firstPrice.ToUpper().IndexOf("NO FARE FOR BOOKING CODE-TRY OTHER PRICING") > -1 || firstPrice.ToUpper().IndexOf("REQUESTED CABIN NOT AVAILABLE") > -1)
                            {
                                for (int i = 1; i < avTempResponseTotal.Length - 1; i++)
                                {
                                    loopcnt2++;
                                    firstPrice = avTempResponseTotal[i];
                                    if (firstPrice != null && firstPrice.Length > 0)
                                    {
                                        if (firstPrice.ToUpper().IndexOf("NO FARE FOR BOOKING CODE-TRY OTHER PRICING") < 0 && firstPrice.ToUpper().IndexOf("REQUESTED CABIN NOT AVAILABLE") < 0)
                                        {
                                            loopcnt2--;
                                            break;
                                        }
                                    }
                                    else
                                    {
                                        firstPrice = avTempResponseTotal[0];
                                    }
                                    if (i == avTempResponseTotal.Length - 1)
                                    {
                                        loopcnt2 = 0;
                                        firstPrice = avTempResponseTotal[0];
                                    }
                                }
                            }
                        }


                        firstPrice = CoreLib.TransformXML("<FIP>" + strRequest + firstPrice + "</FIP>", mstrXslPath, sb.ToString(), false);
                        sb.Remove(0, sb.Length);

                        firstPrice = firstPrice.Replace("</Fare_InformativeBestPricingWithoutPNRReply>", oRoot.SelectSingleNode("TravelerInfoSummary/AirTravelerAvail").OuterXml + strFirstFlight + "</Fare_InformativeBestPricingWithoutPNRReply>");

                        strFinalResponse = "<FS>" + strAvailResponses + firstPrice + "</FS>";
                        sb.Append(mstrVersion).Append("AmadeusWS_LowFareFlightsRS.xsl");
                        strResponse = CoreLib.TransformXML(strFinalResponse, mstrXslPath, sb.ToString(), false);
                        sb.Remove(0, sb.Length);
                        oPDoc = new XmlDocument();
                        oPDoc.LoadXml(strResponse);
                        strResponse = strResponse.Replace("<OTA_AirLowFareSearchFlightsRS", "<OTA_AirLowFareSearchFlightsRS EchoToken=\"FLTS\"");
                        EchoToken = "FLTS";

                        oPRoot = oPDoc.DocumentElement;
                        List<XmlNode> outboundNodes = new List<XmlNode>();
                        List<XmlNode> inboundNodes = new List<XmlNode>();

                        int finalOutCnt = 0;
                        bool fistcount = true;

                        int rph = 1;

                        if (oPRoot.FirstChild.LocalName != "Errors")
                        {
                            foreach (XmlNode nd in oPRoot.SelectSingleNode("PricedItineraries").SelectNodes("PricedItinerary"))
                            {
                                //including first flight segment(from 1st version)
                                if (nd.Attributes["SequenceNumber"].Value == "1")
                                {

                                    if (oPRoot.SelectSingleNode("PricedItineraries").SelectNodes("PricedItinerary").Count == 1)
                                    {
                                        foreach (XmlNode chNonde in nd.SelectSingleNode("AirItinerary").SelectSingleNode("OriginDestinationOptions").SelectNodes("OriginDestinationOption").Item(0).SelectNodes("FlightSegment"))
                                        {

                                            outboundNodes.Add(chNonde);


                                        }
                                        if (isReturn)
                                        {
                                            foreach (XmlNode chNonde in nd.SelectSingleNode("AirItinerary").SelectSingleNode("OriginDestinationOptions").SelectNodes("OriginDestinationOption").Item(1).SelectNodes("FlightSegment"))
                                            {

                                                inboundNodes.Add(chNonde);
                                            }
                                        }
                                    }
                                    //fistcount = true;

                                }
                                else
                                {
                                    foreach (XmlNode chNonde in nd.SelectSingleNode("AirItinerary").SelectSingleNode("OriginDestinationOptions").SelectNodes("OriginDestinationOption").Item(0).SelectNodes("FlightSegment"))
                                    {
                                        //XmlNode outNode = chNonde;
                                        // chNonde.Attributes["RPH"].Value = "1";
                                        outboundNodes.Add(chNonde);

                                        //if (fistcount)
                                        //{
                                        //    finalOutCnt++;
                                        //    fistcount = false;
                                        //}
                                    }
                                    if (isReturn)
                                    {
                                        foreach (XmlNode chNonde in nd.SelectSingleNode("AirItinerary").SelectSingleNode("OriginDestinationOptions").SelectNodes("OriginDestinationOption").Item(1).SelectNodes("FlightSegment"))
                                        {
                                            //XmlNode inNode = chNonde;
                                            //rph=Int32.Parse(inNode.Attributes["RPH"].Value);
                                            //inNode.Attributes["RPH"].Value = rph.ToString();
                                            inboundNodes.Add(chNonde);
                                        }
                                    }
                                }
                            }


                            oPRoot.RemoveChild(oPRoot.SelectSingleNode("PricedItineraries"));

                            string test = "<PricedItineraries>";

                            string prepareChild = "";

                            //int outTraverseCount = 0;
                            string depCity = outboundNodes[0].SelectSingleNode("DepartureAirport").Attributes["LocationCode"].Value;
                            int prevPriceIt = 0;

                            List<string> strOutNodes = new List<string>();
                            List<string> strOriginClasses = new List<string>();
                            List<string> strFareBasisCodes = new List<string>();

                            string[,] strOriginClasses2 = new string[outboundcnt, inboundcnt];


                            string strOC = "<OriginClass Index=\"$\" Cabin=\"" + cabinpref + "\">-</OriginClass>";

                            string depstring = "";
                            depCity = outboundNodes[0].SelectSingleNode("DepartureAirport").Attributes["LocationCode"].Value;
                            int fIndex = 1;
                            int ocIndex = 1;
                            int ocIndex2 = 1;
                            int ocIndex3 = 1;
                            string strOriginClass = "";
                            string strOriginClass2 = "";

                            for (int i = 1; i <= outboundNodes.Count; i++)
                            {
                                if (i == 1 || depCity != outboundNodes[i - 1].SelectSingleNode("DepartureAirport").Attributes["LocationCode"].Value)
                                {
                                    //if (isReturn)
                                    //{
                                    //    if (fIndex <= outBoundCntTemp)
                                    //        outboundNodes[i - 1].Attributes["ResBookDesigCode"].Value = OutClass[fIndex - 1, 0].Substring(ocIndex - 1, 1);
                                    //    else
                                    //        outboundNodes[i - 1].Attributes["ResBookDesigCode"].Value = "";
                                    //}
                                    //else
                                    //{
                                    //    if (fIndex <= outBoundCntTemp)
                                    //        outboundNodes[i - 1].Attributes["ResBookDesigCode"].Value = OutClass[fIndex - 1, 0].Substring(0, 1);
                                    //    else
                                    //        outboundNodes[i - 1].Attributes["ResBookDesigCode"].Value = "";
                                    //}

                                    if (fIndex <= outBoundCntTemp)
                                    {

                                        if (isReturn)
                                            outboundNodes[i - 1].Attributes["ResBookDesigCode"].Value = OutClass[fIndex - 1, 0].Substring(ocIndex2 - 1, 1);
                                        else
                                            outboundNodes[i - 1].Attributes["ResBookDesigCode"].Value = OutClass[fIndex - 1, 0].Substring(0, 1);



                                        ocIndex2 += 1;
                                    }
                                    else
                                        outboundNodes[i - 1].Attributes["ResBookDesigCode"].Value = "";

                                    prepareChild = outboundNodes[i - 1].OuterXml;

                                    if (fIndex <= outBoundCntTemp)
                                    {
                                        if (isReturn)
                                            strOriginClass += strOC.Replace("$", ocIndex.ToString()).Replace("-", OutClass[fIndex - 1, 0].Substring(ocIndex - 1, 1));
                                        else
                                            strOriginClass += strOC.Replace("$", ocIndex.ToString()).Replace("-", OutClass[fIndex - 1, 0].Substring(0, 1));

                                        if (isReturn)
                                        {
                                            for (int j = 0; j < inBoundCntTemp; j++)
                                            {
                                                for (int k = 1; k <= OutClass[fIndex - 1, j].Length; k++)
                                                {
                                                    strOriginClass2 += strOC.Replace("$", k.ToString()).Replace("-", OutClass[fIndex - 1, j].Substring(k - 1, 1));
                                                }
                                                //strOriginClass2 = strOC.Replace("$", ocIndex.ToString()).Replace("-", OutClass[fIndex - 1, j].Substring(ocIndex - 1, 1));
                                                strOriginClasses2[fIndex - 1, j] = strOriginClass2;
                                                strOriginClass2 = "";
                                            }
                                        }
                                        ocIndex += 1;

                                        string fareBasis = "";
                                        //fareBasis = fareBasisCodes[i - 1].OuterXml;
                                        for (int k = 0; k < fareBasisCodes[outBoundCntTemp - 1].SelectNodes("PTC_FareBreakdown").Count; k++)
                                        {
                                            fareBasis += "<FareBasisCodes PassengerType=\"" + fareBasisCodes[outBoundCntTemp - 1].SelectNodes("PTC_FareBreakdown")[k].SelectSingleNode("PassengerTypeQuantity").Attributes["Code"].Value + "\">";
                                            for (int y = 0; y < fareBasisCodes[outBoundCntTemp - 1].SelectNodes("PTC_FareBreakdown")[k].SelectSingleNode("FareBasisCodes").SelectNodes("FareBasisCode").Count; y++)
                                            {
                                                fareBasis += "<FareBasisCode>" + fareBasisCodes[outBoundCntTemp - 1].SelectNodes("PTC_FareBreakdown")[k].SelectSingleNode("FareBasisCodes").SelectNodes("FareBasisCode")[y].InnerText + "</FareBasisCode>";
                                            }
                                            fareBasis += "</FareBasisCodes>";
                                        }

                                        string strFares = BaseFare[fIndex - 1, 0].OuterXml.Replace("BaseFare", "FromTotalBaseFare") + TotalTax[fIndex - 1, 0].OuterXml.Replace("Tax", "FromTotalTax") + TotalFare[fIndex - 1, 0].OuterXml.Replace("TotalFare", "FromTotalFare");
                                        prepareChild = prepareChild.Replace("</TPA_Extensions>", strFares + fareBasis + "</TPA_Extensions>");
                                    }

                                    depstring = depstring + prepareChild;
                                    if (depCity == "")
                                    {
                                        depCity = outboundNodes[i - 1].SelectSingleNode("DepartureAirport").Attributes["LocationCode"].Value;
                                    }
                                }
                                else
                                {
                                    strOutNodes.Add(depstring);
                                    depCity = "";
                                    depstring = "";
                                    fIndex += 1;

                                    //if (isReturn)
                                    //{
                                    //    if (fIndex <= outBoundCntTemp)
                                    //        outboundNodes[i - 1].Attributes["ResBookDesigCode"].Value = OutClass[fIndex - 1, 0].Substring(ocIndex - 1, 1);
                                    //    else
                                    //        outboundNodes[i - 1].Attributes["ResBookDesigCode"].Value = "";
                                    //}
                                    //else
                                    //{
                                    //    if (fIndex <= outBoundCntTemp)
                                    //        outboundNodes[i - 1].Attributes["ResBookDesigCode"].Value = OutClass[fIndex - 1, 0].Substring(0, 1);
                                    //    else
                                    //        outboundNodes[i - 1].Attributes["ResBookDesigCode"].Value = "";
                                    //}
                                    if (fIndex <= outBoundCntTemp)
                                    {

                                        ocIndex2 = 1;
                                        outboundNodes[i - 1].Attributes["ResBookDesigCode"].Value = OutClass[fIndex - 1, 0].Substring(ocIndex2 - 1, 1);
                                        ocIndex2 += 1;
                                    }
                                    else
                                        outboundNodes[i - 1].Attributes["ResBookDesigCode"].Value = "";

                                    prepareChild = outboundNodes[i - 1].OuterXml;

                                    if (fIndex <= outBoundCntTemp)
                                    {
                                        strOriginClasses.Add(strOriginClass);
                                        ocIndex = 1;
                                        strOriginClass = strOC.Replace("$", ocIndex.ToString()).Replace("-", OutClass[fIndex - 1, 0].Substring(ocIndex - 1, 1));

                                        if (isReturn)
                                        {
                                            for (int j = 0; j < inBoundCntTemp; j++)
                                            {
                                                for (int k = 1; k <= OutClass[fIndex - 1, j].Length; k++)
                                                {
                                                    strOriginClass2 += strOC.Replace("$", k.ToString()).Replace("-", OutClass[fIndex - 1, j].Substring(k - 1, 1));
                                                }
                                                //strOriginClass2 = strOC.Replace("$", ocIndex.ToString()).Replace("-", OutClass[fIndex - 1, j].Substring(ocIndex - 1, 1));
                                                strOriginClasses2[fIndex - 1, j] = strOriginClass2;
                                                strOriginClass2 = "";
                                            }
                                        }
                                        ocIndex += 1;

                                        string fareBasis = null;
                                        //string fareBasis = fareBasisCodes[i - 1].OuterXml;
                                        for (int k = 0; k < fareBasisCodes[outBoundCntTemp - 1].SelectNodes("PTC_FareBreakdown").Count; k++)
                                        {
                                            fareBasis += "<FareBasisCodes PassengerType=\"" + fareBasisCodes[outBoundCntTemp - 1].SelectNodes("PTC_FareBreakdown")[k].SelectSingleNode("PassengerTypeQuantity").Attributes["Code"].Value + "\">";
                                            for (int y = 0; y < fareBasisCodes[outBoundCntTemp - 1].SelectNodes("PTC_FareBreakdown")[k].SelectSingleNode("FareBasisCodes").SelectNodes("FareBasisCode").Count; y++)
                                            {
                                                fareBasis += "<FareBasisCode>" + fareBasisCodes[outBoundCntTemp - 1].SelectNodes("PTC_FareBreakdown")[k].SelectSingleNode("FareBasisCodes").SelectNodes("FareBasisCode")[y].InnerText + "</FareBasisCode>";
                                            }
                                            fareBasis += "</FareBasisCodes>";
                                        }

                                        string strFares = BaseFare[fIndex - 1, 0].OuterXml.Replace("BaseFare", "FromTotalBaseFare") + TotalTax[fIndex - 1, 0].OuterXml.Replace("Tax", "FromTotalTax") + TotalFare[fIndex - 1, 0].OuterXml.Replace("TotalFare", "FromTotalFare");
                                        prepareChild = prepareChild.Replace("</TPA_Extensions>", strFares + fareBasis + "</TPA_Extensions>");
                                    }


                                    depstring = depstring + prepareChild;
                                    if (depCity == "")
                                    {
                                        depCity = outboundNodes[i - 1].SelectSingleNode("DepartureAirport").Attributes["LocationCode"].Value;
                                    }
                                }
                            }
                            strOutNodes.Add(depstring);
                            strOriginClasses.Add(strOriginClass);
                            prepareChild = "";
                            for (int i = 1; i <= strOutNodes.Count; i++)
                            {
                                test = test + "<PricedItinerary SequenceNumber=\"" + i.ToString() + "\">";
                                test = test + "<AirItinerary>";
                                test = test + "<OriginDestinationOptions>";
                                test = test + "<OriginDestinationOption>";
                                //outboundNodes[i-1].Attributes["RPH"].Value = i.ToString();
                                prepareChild = strOutNodes[i - 1];
                                if (!isReturn && i <= outboundcnt)
                                {
                                    if (NegoCode[i - 1, 0] != null && NegoCode[i - 1, 0] != "")
                                    {
                                        prepareChild = prepareChild.Replace("<TPA_Extensions>", "<TPA_Extensions PricingSource=\"" + PricingSource[i - 1, 0] + "\" NegotiatedFareCode=\"" + NegoCode[i - 1, 0] + "\">");
                                    }
                                    else
                                    {
                                        prepareChild = prepareChild.Replace("<TPA_Extensions>", "<TPA_Extensions PricingSource=\"" + PricingSource[i - 1, 0] + "\">");
                                    }

                                }
                                test = test + prepareChild;
                                //test = test + strOutNodes[i - 1];

                                //string rph = outboundNodes[i - 1].Attributes["RPH"].Value;

                                //foreach (XmlNode outnode in outboundNodes)
                                //{
                                //    if (outnode.Attributes["RPH"].Value == rph)
                                //    {
                                //        if (i <= outboundcnt && isReturn)
                                //            outboundNodes[i - 1].Attributes["ResBookDesigCode"].Value = OutClass[i - 1, 0];

                                //        //outboundNodes[i - 1].Attributes["RPH"].Value = i.ToString();
                                //        prepareChild = outnode.OuterXml;

                                //        if (!isReturn && i <= outboundcnt)
                                //        {
                                //            prepareChild = prepareChild.Replace("<TPA_Extensions>", "<TPA_Extensions PricingSource=\"" + PricingSource[i - 1, 0] + "\">");
                                //            prepareChild = prepareChild.Replace("</TPA_Extensions>", priceTags[i - 1, 0] + "</TPA_Extensions>");
                                //        }

                                //        test = test + prepareChild;

                                //        i++;
                                //    }
                                //}

                                test = test + "</OriginDestinationOption>";
                                if (isReturn)
                                {
                                    test = test + "<OriginDestinationOption>";

                                    int iClass = 0;
                                    string strRPH = "0";

                                    int loopcnt = inboundNodes.Count; // 
                                    //if (loopcnt > fareBasisCodes.Count)
                                    //{
                                    //    loopcnt = (inBoundCntTemp) * (outBoundCntTemp);
                                    //}

                                    for (int j = 1; j <= loopcnt; j++)
                                    {
                                        //inboundNodes[j - 1].Attributes["RPH"].Value = "1";// j.ToString();

                                        //if (j <= inBoundCntTemp && i <= outBoundCntTemp)

                                        if (Int32.Parse(inboundNodes[j - 1].Attributes["RPH"].Value) <= inBoundCntTemp && i <= outBoundCntTemp)
                                        {
                                            if (strRPH != inboundNodes[j - 1].Attributes["RPH"].Value)
                                            {
                                                iClass = 0;
                                            }
                                            else
                                            {
                                                iClass += 1;
                                            }

                                            strRPH = inboundNodes[j - 1].Attributes["RPH"].Value;

                                            inboundNodes[j - 1].Attributes["ResBookDesigCode"].Value = InClass[i - 1, Int32.Parse(inboundNodes[j - 1].Attributes["RPH"].Value) - 1].Substring(iClass, 1);

                                            prepareChild = inboundNodes[j - 1].OuterXml;
                                            if (NegoCode[i - 1, Int32.Parse(inboundNodes[j - 1].Attributes["RPH"].Value) - 1] != null && NegoCode[i - 1, Int32.Parse(inboundNodes[j - 1].Attributes["RPH"].Value) - 1] != "")
                                            {
                                                prepareChild = prepareChild.Replace("<TPA_Extensions>", "<TPA_Extensions PricingSource=\"" + PricingSource[i - 1, Int32.Parse(inboundNodes[j - 1].Attributes["RPH"].Value) - 1] + "\" NegotiatedFareCode=\"" + NegoCode[i - 1, Int32.Parse(inboundNodes[j - 1].Attributes["RPH"].Value) - 1] + "\">");
                                            }
                                            else
                                            {
                                                prepareChild = prepareChild.Replace("<TPA_Extensions>", "<TPA_Extensions PricingSource=\"" + PricingSource[i - 1, Int32.Parse(inboundNodes[j - 1].Attributes["RPH"].Value) - 1] + "\">");
                                            }
                                            //prepareChild = prepareChild.Replace("</TPA_Extensions>", "<OriginClass Index=\"1\" Cabin=\"" + cabinpref + "\">" + OutClass[i - 1, Int32.Parse(inboundNodes[j - 1].Attributes["RPH"].Value) - 1] + "</OriginClass>" + "</TPA_Extensions>");
                                            prepareChild = prepareChild.Replace("</TPA_Extensions>", strOriginClasses2[i - 1, Int32.Parse(inboundNodes[j - 1].Attributes["RPH"].Value) - 1] + "</TPA_Extensions>");

                                            string fareBasis = "";
                                            //fareBasis = fareBasisCodes[i - 1].OuterXml;
                                            for (int k = 0; k < fareBasisCodes[Int32.Parse(inboundNodes[j - 1].Attributes["RPH"].Value) - 1].SelectNodes("PTC_FareBreakdown").Count; k++)
                                            {

                                                if (fareBasisCodes[Int32.Parse(inboundNodes[j - 1].Attributes["RPH"].Value) - 1].SelectNodes("PTC_FareBreakdown").Count > 0)
                                                {
                                                    fareBasis += "<FareBasisCodes PassengerType=\"" + fareBasisCodes[Int32.Parse(inboundNodes[j - 1].Attributes["RPH"].Value) - 1].SelectNodes("PTC_FareBreakdown")[k].SelectSingleNode("PassengerTypeQuantity").Attributes["Code"].Value + "\">";

                                                    for (int y = 0; y < fareBasisCodes[Int32.Parse(inboundNodes[j - 1].Attributes["RPH"].Value) - 1].SelectNodes("PTC_FareBreakdown")[k].SelectSingleNode("FareBasisCodes").SelectNodes("FareBasisCode").Count; y++)
                                                    {
                                                        fareBasis += "<FareBasisCode>" + fareBasisCodes[Int32.Parse(inboundNodes[j - 1].Attributes["RPH"].Value) - 1].SelectNodes("PTC_FareBreakdown")[k].SelectSingleNode("FareBasisCodes").SelectNodes("FareBasisCode")[y].InnerText + "</FareBasisCode>";
                                                    }
                                                    fareBasis += "</FareBasisCodes>";
                                                }

                                            }

                                            string strFares = BaseFare[i - 1, Int32.Parse(inboundNodes[j - 1].Attributes["RPH"].Value) - 1].OuterXml.Replace("BaseFare", "FromTotalBaseFare") + TotalTax[i - 1, Int32.Parse(inboundNodes[j - 1].Attributes["RPH"].Value) - 1].OuterXml.Replace("Tax", "FromTotalTax") + TotalFare[i - 1, Int32.Parse(inboundNodes[j - 1].Attributes["RPH"].Value) - 1].OuterXml.Replace("TotalFare", "FromTotalFare");
                                            prepareChild = prepareChild.Replace("</TPA_Extensions>", strFares + fareBasis + "</TPA_Extensions>");
                                            test = test + prepareChild;
                                            //tmpDoc.LoadXml(priceTags[i - 1, j - 1]);
                                            //inboundNodes[j-1].SelectSingleNode("TPA_Extensions").AppendChild(tmpDoc);
                                            //inboundNodes[j-1].SelectSingleNode("TPA_Extensions").AppendChild(BaseFare[i-1,j-1]);
                                            //inboundNodes[j-1].SelectSingleNode("TPA_Extensions").AppendChild(TotalFare[i-1,j-1]);
                                            //inboundNodes[j - 1].SelectSingleNode("TPA_Extensions").AppendChild(TotalTax[i-1, j-1]);
                                        }
                                        else
                                        {
                                            inboundNodes[j - 1].Attributes["ResBookDesigCode"].Value = "";
                                            test = test + inboundNodes[j - 1].OuterXml;
                                        }
                                    }
                                    test = test + "</OriginDestinationOption>";
                                }
                                test = test + "</OriginDestinationOptions>";
                                test = test + "</AirItinerary>";
                                if (i <= outboundcnt) //&& isReturn)|| !isReturn)
                                {
                                    if (TicketTimeLimit[i - 1, 0] == "2000-12-11T23:59:00")
                                    {
                                        for (int m = 1; m < outboundcnt; m++)
                                        {
                                            if (TicketTimeLimit[i - 1, m] != "2000-12-11T23:59:00")
                                            {
                                                test = test + "<TicketingInfo TicketTimeLimit=\"" + TicketTimeLimit[i - 1, m] + "\"/>";
                                                break;
                                            }
                                        }
                                    }
                                    else
                                        test = test + "<TicketingInfo TicketTimeLimit=\"" + TicketTimeLimit[i - 1, 0] + "\"/>";
                                }
                                test = test + "</PricedItinerary>";
                                prevPriceIt = i;
                            }

                            test = test + "</PricedItineraries>";
                            prepareChild = oPRoot.OuterXml;
                            prepareChild = prepareChild.Replace("</OTA_AirLowFareSearchFlightsRS>", test + "</OTA_AirLowFareSearchFlightsRS>");

                            strResponse = prepareChild;
                        }

                    }
                }
                #endregion
                #region "old code without Avianca"
                else
                {
                    if (oRootResp.SelectSingleNode("Air_MultiAvailabilityReply/singleCityPairInfo/flightInfo").InnerXml != "")
                    {
                        string tt = oRootResp.SelectSingleNode("Air_MultiAvailabilityReply/singleCityPairInfo/flightInfo").InnerXml;
                        foreach (XmlNode oNodeResp in oRootResp)
                        {
                            strFirstFlight += "<OD>";
                            oNode = oNodeResp.SelectSingleNode("singleCityPairInfo/flightInfo[1]");
                            strFirstFlight += oNode != null ? oNode.OuterXml : string.Empty;

                            if (oNode != null && oNode.SelectSingleNode("basicFlightInfo") != null)
                            {



                                if (oNode.SelectSingleNode("basicFlightInfo/productTypeDetail/productIndicators").InnerText == "S")
                                {
                                    strFirstFlight += oNodeResp.SelectSingleNode("singleCityPairInfo/flightInfo[position()=2]").OuterXml;

                                    if (oNodeResp.SelectSingleNode("singleCityPairInfo/flightInfo[position()=2]/basicFlightInfo/productTypeDetail/productIndicators").InnerText == "S"
                                        || oNodeResp.SelectSingleNode("singleCityPairInfo/flightInfo[position()=2]/basicFlightInfo/productTypeDetail/productIndicators").InnerText == "C")
                                    {
                                        strFirstFlight += oNodeResp.SelectSingleNode("singleCityPairInfo/flightInfo[position()=3]").OuterXml;

                                        if (oNodeResp.SelectSingleNode("singleCityPairInfo/flightInfo[position()=3]/basicFlightInfo/productTypeDetail/productIndicators").InnerText == "S"
                                            || oNodeResp.SelectSingleNode("singleCityPairInfo/flightInfo[position()=3]/basicFlightInfo/productTypeDetail/productIndicators").InnerText == "C")
                                        {
                                            strFirstFlight += oNodeResp.SelectSingleNode("singleCityPairInfo/flightInfo[position()=4]").OuterXml;
                                        }
                                    }
                                }
                            }
                            strFirstFlight += "</OD>";
                        }

                        // ********************************************************************
                        //  Transform Native Amadeus response into OTA air price request      *
                        // ******************************************************************** 
                        strRequest = mstrRequest.Replace("</OTA_AirLowFareSearchFlightsRQ>", strFirstFlight + "</OTA_AirLowFareSearchFlightsRQ>");

                        if (oRoot.SelectSingleNode("SpecificFlightInfo/BookingClassPref") == null)
                        {
                            sb.Append(mstrVersion).Append("AmadeusWS_LowFareFlights1RQ.xsl");
                            strRequest = CoreLib.TransformXML(strRequest, mstrXslPath, sb.ToString(), false);
                            sb.Remove(0, sb.Length);

                            //if (ttProviderSystems.SessionPool)
                            //{
                            //    strResponse = ttAA.SendMessageV3(strRequest, "", "http://webservices.amadeus.com/" + ttProviderSystems.Profile + "/" + ttProviderSystems.AmadeusWSSchema.Fare_InformativeBestPricingWithoutPNR, ConversationID);
                            //}
                            //else
                            //{
                            strResponse = ttAA.SendMessage(strRequest, "", "http://webservices.amadeus.com/" + ttProviderSystems.Profile + "/" + ttProviderSystems.AmadeusWSSchema.Fare_InformativeBestPricingWithoutPNR, ConversationID);
                            //}
                            strResponse = strResponse.Replace(" xmlns=\"http://xml.amadeus.com/" + ttProviderSystems.AmadeusWSSchema.Fare_InformativeBestPricingWithoutPNRReply + "\"", "");

                            ConversationID = UpdateSessionID(ConversationID);

                            sb.Append(mstrVersion).Append("AmadeusWS_LowFareFlights1RS.xsl");

                            strResponse = CoreLib.TransformXML("<FIP>" + strRequest + strResponse + "</FIP>", mstrXslPath, sb.ToString(), false);
                            sb.Remove(0, sb.Length);

                            strResponse = strResponse.Replace("</Fare_InformativeBestPricingWithoutPNRReply>", oRoot.SelectSingleNode("TravelerInfoSummary/AirTravelerAvail").OuterXml + strFirstFlight + "</Fare_InformativeBestPricingWithoutPNRReply>");

                            strFinalResponse = "<FS>" + strAvailResponses + strResponse + "</FS>";
                            sb.Append(mstrVersion).Append("AmadeusWS_LowFareFlightsRS.xsl");
                            strResponse = CoreLib.TransformXML(strFinalResponse, mstrXslPath, sb.ToString(), false);
                            sb.Remove(0, sb.Length);

                            strResponse = strResponse.Replace("<OTA_AirLowFareSearchFlightsRS", "<OTA_AirLowFareSearchFlightsRS EchoToken=\"FLTS\"");
                            EchoToken = "FLTS";
                        }
                        else
                        {
                            sb.Remove(0, sb.Length);
                            strFirstFlight = sb.Append("<AirAvail>").Append(strFirstFlight).Append("</AirAvail>").ToString();
                            sb.Remove(0, sb.Length);
                            //string tst = "<AirAvail><OD><flightInfo><basicFlightInfo><flightDetails><departureDate>210411</departureDate><departureTime>1210</departureTime><arrivalDate>210411</arrivalDate><arrivalTime>1650</arrivalTime></flightDetails><departureLocation><cityAirport>JED</cityAirport></departureLocation><arrivalLocation><cityAirport>LHR</cityAirport></arrivalLocation><marketingCompany><identifier>SV</identifier></marketingCompany><flightIdentification><number>105</number></flightIdentification><productTypeDetail><productIndicators>D</productIndicators></productTypeDetail><lineItemNumber>1</lineItemNumber></basicFlightInfo><infoOnClasses><productClassDetail><serviceClass>E</serviceClass><availabilityStatus>30</availabilityStatus></productClassDetail></infoOnClasses><infoOnClasses><productClassDetail><serviceClass>D</serviceClass><availabilityStatus>30</availabilityStatus></productClassDetail></infoOnClasses><additionalFlightInfo><flightDetails><typeOfAircraft>77L</typeOfAircraft><numberOfStops>0</numberOfStops><legDuration>0640</legDuration></flightDetails><departureStation><terminal>SV</terminal></departureStation><arrivalStation><terminal>4</terminal></arrivalStation><productFacilities><type>1A</type></productFacilities></additionalFlightInfo><negoSpaceDetails><ownerDetails><code>SHWEU01</code></ownerDetails><tourName>SAUDIAWORLD</tourName><negoStatus>INTERACTIVE</negoStatus></negoSpaceDetails></flightInfo></OD><OD><flightInfo><basicFlightInfo><flightDetails><departureDate>230411</departureDate><departureTime>2045</departureTime><arrivalDate>240411</arrivalDate><arrivalTime>0440</arrivalTime></flightDetails><departureLocation><cityAirport>LHR</cityAirport></departureLocation><arrivalLocation><cityAirport>JED</cityAirport></arrivalLocation><marketingCompany><identifier>SV</identifier></marketingCompany><flightIdentification><number>116</number></flightIdentification><productTypeDetail><productIndicators>D</productIndicators></productTypeDetail><lineItemNumber>1</lineItemNumber></basicFlightInfo><infoOnClasses><productClassDetail><serviceClass>A</serviceClass><availabilityStatus>4</availabilityStatus></productClassDetail></infoOnClasses><infoOnClasses><productClassDetail><serviceClass>E</serviceClass><availabilityStatus>4</availabilityStatus></productClassDetail></infoOnClasses><additionalFlightInfo><flightDetails><typeOfAircraft>77L</typeOfAircraft><numberOfStops>0</numberOfStops><legDuration>0555</legDuration></flightDetails><departureStation><terminal>4</terminal></departureStation><arrivalStation><terminal>SV</terminal></arrivalStation><productFacilities><type>1A</type></productFacilities></additionalFlightInfo><negoSpaceDetails><ownerDetails><code>SHWEU01</code></ownerDetails><tourName>SAUDIAWORLD</tourName><negoStatus>INTERACTIVE</negoStatus></negoSpaceDetails></flightInfo></OD></AirAvail>";    

                            oDocResp.LoadXml(strFirstFlight);
                            oRootResp = oDocResp.DocumentElement;
                            int countD = 1;

                            foreach (XmlNode oNodeResp in oRootResp.SelectNodes("OD[1]/flightInfo/infoOnClasses"))
                            {
                                if (oNodeResp.SelectSingleNode("productClassDetail/serviceClass") != null)
                                    FiltClasses.Add(oNodeResp.SelectSingleNode("productClassDetail/serviceClass").InnerText);
                            }

                            for (int j = 0; j < FiltClasses.Count; j++)
                            {
                                oDocResp.LoadXml(strFirstFlight);
                                oRootResp = oDocResp.DocumentElement;
                                oRootNewResp = oDocResp.DocumentElement;

                                List<string> RemoveList = new List<string>();
                                RemoveList.AddRange(FiltClasses);
                                strResponse = "";
                                FilterCount = 0;

                                RemoveList.Remove(FiltClasses[j].ToString());

                                if (RemoveList.Count > 0)
                                {
                                    foreach (XmlNode oNodeResp in oRootResp)
                                    {
                                        string str12 = oNodeResp.OuterXml;

                                        int XMLClassCount = oNodeResp.SelectNodes("flightInfo/infoOnClasses").Count;
                                        FilterCount++;

                                        if (XMLClassCount > 0)
                                        {
                                            for (int i = 1; i <= XMLClassCount; i++)
                                            {
                                                if (oNodeResp.SelectSingleNode("flightInfo/infoOnClasses[position()=" + i.ToString() + "]").InnerText != "")
                                                {
                                                    string tst1 = oNodeResp.SelectSingleNode("flightInfo/infoOnClasses[position()=" + i.ToString() + "]/productClassDetail/serviceClass").InnerText;
                                                    if (RemoveList.Contains(oNodeResp.SelectSingleNode("flightInfo/infoOnClasses[position()=" + i.ToString() + "]/productClassDetail/serviceClass").InnerText))
                                                    {
                                                        oRootNewResp.SelectSingleNode("OD[position()=" + FilterCount.ToString() + "]/flightInfo/infoOnClasses[position()=" + i.ToString() + "]").RemoveAll();

                                                    }
                                                }


                                            }
                                        }


                                    }
                                }



                                strRequest = oRootNewResp.OuterXml;

                                strRequest = strRequest.Substring((strRequest.IndexOf("<AirAvail>") + 10), strRequest.IndexOf("</AirAvail>") - 10);

                                strRequest = mstrRequest.Replace("</OTA_AirLowFareSearchFlightsRQ>", strRequest + "</OTA_AirLowFareSearchFlightsRQ>");

                                sb.Append(mstrVersion).Append("AmadeusWS_LowFareFlights2RQ.xsl");
                                strRequest = CoreLib.TransformXML(strRequest, mstrXslPath, sb.ToString(), false);
                                sb.Remove(0, sb.Length);

                                strResponse = ttAA.SendMessage(strRequest, "", "http://webservices.amadeus.com/" + ttProviderSystems.Profile + "/" + ttProviderSystems.AmadeusWSSchema.Fare_InformativePricingWithoutPNR, ConversationID);

                                strResponse = strResponse.Replace(" xmlns=\"http://xml.amadeus.com/" + ttProviderSystems.AmadeusWSSchema.Fare_InformativePricingWithoutPNRReply + "\"", "");

                                ConversationID = UpdateSessionID(ConversationID);

                                //sb.Append(mstrVersion).Append("AmadeusWS_LowFareFlights2RS.xsl");
                                //strResponse = CoreLib.TransformXML("<FIP>" + strRequest + strResponse + "</FIP>", mstrXslPath, sb.ToString(), false);
                                //sb.Remove(0, sb.Length);

                                strResponse = strResponse.Replace("</Fare_InformativePricingWithoutPNRReply>", oRoot.SelectSingleNode("TravelerInfoSummary/AirTravelerAvail").OuterXml + strFirstFlight + "</Fare_InformativePricingWithoutPNRReply>");

                                strFinalResponse = "<FS>" + strAvailResponses + strResponse + "</FS>";


                                sb.Append(mstrVersion).Append("AmadeusWS_LowFareFlights3RS.xsl");
                                strResponse = CoreLib.TransformXML(strFinalResponse, mstrXslPath, sb.ToString(), false);
                                sb.Remove(0, sb.Length);



                                if (j == 0)
                                {
                                    strFirstResponse = strResponse.Replace("<OTA_AirLowFareSearchFlightsRS", "<OTA_AirLowFareSearchFlightsRS EchoToken=\"NEGO\"");
                                    strFirstResponse = RemoveDuplicate(strFirstResponse);
                                    oDocResp.LoadXml(strFirstResponse);
                                    oRootFinal = oDocResp.DocumentElement;

                                    EchoToken = "NEGO";
                                }
                                else
                                {
                                    strNewResponse = strResponse.Replace("<OTA_AirLowFareSearchFlightsRS", "<OTA_AirLowFareSearchFlightsRS EchoToken=\"NEGO\"");
                                    strNewResponse = RemoveDuplicate(strNewResponse);
                                    oDocResp.LoadXml(strNewResponse);
                                    oRootResp = oDocResp.DocumentElement;
                                    EchoToken = "NEGO";

                                    if (oRootFinal.SelectSingleNode("Errors") != null)
                                    {
                                        oDocResp.LoadXml(strNewResponse);
                                        oRootFinal = oDocResp.DocumentElement;
                                    }

                                    sb.Remove(0, sb.Length);

                                    XmlElement oRootSeq = null;

                                    foreach (XmlNode oNodeResp in oRootResp.SelectNodes("PricedItineraries/PricedItinerary[@SequenceNumber!='']"))
                                    {
                                        countD++;
                                        PricedItinerary = oNodeResp.InnerXml;
                                        PricedItinerary = sb.Append("<PricedItinerary SequenceNumber='" + countD.ToString() + "'>").Append(PricedItinerary).Append("</PricedItinerary>").ToString();
                                        oDocResp.LoadXml(PricedItinerary);
                                        oRootSeq = oDocResp.DocumentElement;
                                        string testroot = oRootSeq.OuterXml;
                                        oRootFinal.SelectSingleNode("PricedItineraries").AppendChild(oRootSeq);
                                        string tr = oRootFinal.OuterXml;
                                        sb.Remove(0, sb.Length);
                                    }
                                }
                                countD++;

                            }

                            if (countD == 1)
                                strResponse = strFirstResponse;
                            else
                                strResponse = oRootFinal.OuterXml;

                            //sb.Append(mstrVersion).Append("AmadeusWS_LowFareFlights2RQ.xsl");
                            //strRequest = CoreLib.TransformXML(strRequest, mstrXslPath, sb.ToString(), false);
                            //sb.Remove(0, sb.Length);

                            ////if (ttProviderSystems.SessionPool)
                            ////{
                            ////    strResponse = ttAA.SendMessageV3(strRequest, "", "http://webservices.amadeus.com/" + ttProviderSystems.Profile + "/" + ttProviderSystems.AmadeusWSSchema.Fare_InformativePricingWithoutPNR, ConversationID);
                            ////}
                            ////else
                            ////{
                            //strResponse = ttAA.SendMessage(strRequest, "", "http://webservices.amadeus.com/" + ttProviderSystems.Profile + "/" + ttProviderSystems.AmadeusWSSchema.Fare_InformativePricingWithoutPNR, ConversationID);
                            ////}
                            //strResponse = strResponse.Replace(" xmlns=\"http://xml.amadeus.com/" + ttProviderSystems.AmadeusWSSchema.Fare_InformativePricingWithoutPNRReply + "\"", "");

                            //ConversationID = UpdateSessionID(ConversationID);

                            ////sb.Append(mstrVersion).Append("AmadeusWS_LowFareFlights2RS.xsl");
                            ////strResponse = CoreLib.TransformXML("<FIP>" + strRequest + strResponse + "</FIP>", mstrXslPath, sb.ToString(), false);
                            ////sb.Remove(0, sb.Length);


                            //strResponse = strResponse.Replace("</Fare_InformativePricingWithoutPNRReply>", oRoot.SelectSingleNode("TravelerInfoSummary/AirTravelerAvail").OuterXml + strFirstFlight + "</Fare_InformativePricingWithoutPNRReply>");

                            //strFinalResponse = "<FS>" + strAvailResponses + strResponse + "</FS>";
                            //sb.Append(mstrVersion).Append("AmadeusWS_LowFareFlights3RS.xsl");
                            //strResponse = CoreLib.TransformXML(strFinalResponse, mstrXslPath, sb.ToString(), false);
                            //sb.Remove(0, sb.Length);

                            //strResponse = strResponse.Replace("<OTA_AirLowFareSearchFlightsRS", "<OTA_AirLowFareSearchFlightsRS EchoToken=\"NEGO\"");
                        }
                    }
                }
                #endregion
            }
            #region "else parts"
            else if ((oRoot.SelectSingleNode("TravelPreferences/VendorPref/@Code") == null || (oRoot.SelectSingleNode("TravelPreferences/VendorPref/@Code") != null && (oRoot.SelectSingleNode("TravelPreferences/VendorPref/@Code").InnerText != "AV" || oRoot.SelectSingleNode("TravelPreferences/VendorPref/@Code").InnerText != "TA" || oRoot.SelectSingleNode("TravelPreferences/VendorPref/@Code").InnerText != "UL")))
                && (oRoot.SelectSingleNode("TravelPreferences/@AvailableFlightsOnly") == null || (oRoot.SelectSingleNode("TravelPreferences/@AvailableFlightsOnly") != null && oRoot.SelectSingleNode("TravelPreferences/@AvailableFlightsOnly").InnerText == "false"))
                && ((oRoot.SelectSingleNode("TravelPreferences/VendorPref/@Code") != null) && (oRoot.SelectSingleNode("TravelPreferences/VendorPref/@Code").InnerText != "AV" && oRoot.SelectSingleNode("TravelPreferences/VendorPref/@Code").InnerText != "TA" && oRoot.SelectSingleNode("TravelPreferences/VendorPref/@Code").InnerText != "UL")))
            {
                try
                {

                    strSecondRequest = strSecondRequest.Replace("OTA_AirLowFareSearchFlightsRQ", "OTA_AirLowFareSearchScheduleRQ");

                    oDoc.LoadXml(strSecondRequest);
                    oRoot = oDoc.DocumentElement;
                    bool testb = false;
                    string FTTage = "";
                    if (oRoot.Attributes["PriorityDirectFlights"] != null)
                        testb = bool.Parse(oRoot.Attributes["PriorityDirectFlights"].Value);

                    if (oRoot.SelectSingleNode("TravelPreferences/FlightTypePref") != null
                        && oRoot.SelectSingleNode("TravelPreferences/FlightTypePref").Attributes["FlightType"] != null)
                        FTTage = oRoot.SelectSingleNode("TravelPreferences/FlightTypePref").Attributes["FlightType"].Value;

                    int ReqValue = 1;
                    strResponse = "";
                    XmlElement oRootFT = null;
                    string finalStrResponse = "";
                    int SuccessCount = 0;
                    int SeqCount, k = 0;

                    if (testb && FTTage.ToLower() != "nonstop")
                    {
                        ReqValue = 2;
                    }

                    if (oRoot.Attributes["FlexToken"] != null)
                        FlexToken = oRoot.Attributes["FlexToken"].InnerText.ToString();


                    for (k = 0; k < ReqValue; k++)
                    {


                        if (testb)
                        {
                            if (oRoot.SelectSingleNode("TravelPreferences") != null)
                            {
                                string tt1 = oRoot.OuterXml;
                                if (k == 0)
                                    oDoc.LoadXml("<FT><FlightTypePref FlightType='Direct'/></FT>");
                                else if (k == 1)
                                    oDoc.LoadXml("<FT><FlightTypePref FlightType=''/></FT>");
                                oRootFT = oDoc.DocumentElement;
                                tt1 = oRootFT.SelectSingleNode("FlightTypePref").OuterXml;
                                oRoot.SelectSingleNode("TravelPreferences").AppendChild(oRootFT.SelectSingleNode("FlightTypePref"));
                                string tt = oRoot.OuterXml;
                                strSecondRequest = oRoot.OuterXml;
                                oRoot.SelectSingleNode("TravelPreferences/FlightTypePref").RemoveAll();
                                tt = oRoot.OuterXml;
                            }
                            else
                            {
                                if (k == 0)
                                    oDoc.LoadXml("<FT><TravelPreferences><FlightTypePref FlightType='Direct'/></TravelPreferences></FT>");
                                else if (k == 1)
                                    oDoc.LoadXml("<FT><TravelPreferences><FlightTypePref FlightType=''/></TravelPreferences></FT>");

                                oRootFT = oDoc.DocumentElement;
                                oRoot.AppendChild(oRootFT.SelectSingleNode("TravelPreferences"));
                                //strSndRequest.Add(oRoot.InnerXml);
                                strSecondRequest = oRoot.OuterXml;
                                oRoot.SelectSingleNode("TravelPreferences/FlightTypePref").RemoveAll();
                            }
                        }

                        if (FlexToken != "MPC")
                        {
                            sb.Append(mstrVersion).Append("AmadeusWS_LowFareScheduleRQ.xsl");
                            strRequest = CoreLib.TransformXML(strSecondRequest, mstrXslPath, sb.ToString(), false);
                            sb.Remove(0, sb.Length);
                            strMessage = strRequest;

                            //if (ttProviderSystems.SessionPool)
                            //{
                            //    strResponse = ttAA.SendMessageV3(strRequest, "", "http://webservices.amadeus.com/" + ttProviderSystems.Profile + "/" + ttProviderSystems.AmadeusWSSchema.Fare_MasterPricerTravelBoardSearch, ConversationID);
                            //}
                            //else
                            //{

                            strResponse = ttAA.SendMessage(strRequest, "", "http://webservices.amadeus.com/" + ttProviderSystems.Profile + "/" + ttProviderSystems.AmadeusWSSchema.Fare_MasterPricerTravelBoardSearch, ConversationID);
                            //}
                            strResponse = strResponse.Replace(" xmlns=\"http://xml.amadeus.com/" + ttProviderSystems.AmadeusWSSchema.Fare_MasterPricerTravelBoardSearchReply + "\"", "");
                            ConversationID = UpdateSessionID(ConversationID);
                            sb.Append(strMessage).Append(strResponse);
                            strMessage = sb.ToString();
                            sb.Remove(0, sb.Length);

                            sb.Append(mstrVersion).Append("AmadeusWS_LowFareScheduleRS.xsl");
                            strResponse = CoreLib.TransformXML(strResponse, mstrXslPath, sb.ToString(), false);
                            sb.Remove(0, sb.Length);
                        }
                        else
                        {
                            strSecondRequest = strSecondRequest.Replace("<OTA_AirLowFareSearchScheduleRQ", "<OTA_AirLowFareSearchMatrixRQ");
                            strSecondRequest = strSecondRequest.Replace("</OTA_AirLowFareSearchScheduleRQ", "</OTA_AirLowFareSearchMatrixRQ");
                            strSecondRequest = strSecondRequest.Replace("Private", "Both");

                            // *****************************************************************
                            //  Transform OTA LowFareMatrix Request into Native Amadeus Request     *
                            // ***************************************************************** 
                            sb.Append(mstrVersion).Append("AmadeusWS_LowFareMatrixRQ.xsl");
                            strRequest = CoreLib.TransformXML(strSecondRequest, mstrXslPath, sb.ToString(), false);
                            sb.Remove(0, sb.Length);
                            strMessage = strRequest;


                            strResponse = ttAA.SendMessage(strRequest, "", "http://webservices.amadeus.com/" + ttProviderSystems.Profile + "/" + ttProviderSystems.AmadeusWSSchema.Fare_MasterPricerCalendar, ConversationID);

                            strResponse = strResponse.Replace(" xmlns=\"http://xml.amadeus.com/" + ttProviderSystems.AmadeusWSSchema.Fare_MasterPricerCalendarReply + "\"", "");

                            ConversationID = UpdateSessionID(ConversationID);

                            sb.Append(strMessage).Append(strResponse);
                            strMessage = sb.ToString();
                            sb.Remove(0, sb.Length);


                            //strResponse = strResponse.Replace(" xmlns=\"http://xml.amadeus.com/" + ttProviderSystems.AmadeusWSSchema.Fare_MasterPricerCalendarReply + "\"", "");
                            //sb.Append(strMessage).Append(strResponse);
                            //strMessage = sb.ToString();
                            //sb.Remove(0, sb.Length);

                            // ********************************************************************
                            //  Transform Native Amadeus LowFareMatrix Response into OTA Response   *
                            //  This transformation better organizes the Amadeus response to make *
                            //  easier to create and filter the final response                    *
                            // ******************************************************************** 
                            sb.Append(mstrVersion).Append("AmadeusWS_LowFareMatrix1RS.xsl");
                            strResponse = CoreLib.TransformXML(strResponse, mstrXslPath, sb.ToString(), false);
                            sb.Remove(0, sb.Length);

                            // ********************************************************************
                            //  Transform Native Amadeus LowFareMatrix Response into OTA Response   *
                            // ******************************************************************** 
                            sb.Append(mstrVersion).Append("AmadeusWS_LowFareMatrix2RS.xsl");
                            strResponse = CoreLib.TransformXML(strResponse, mstrXslPath, sb.ToString(), false);
                            sb.Remove(0, sb.Length);

                            // ***********************************************
                            //  process output business logic if necessary   *
                            // *********************************************** 
                            sb.Append("TransactionIdentifier=\"Amadeus-").Append(ttProviderSystems.PCC);
                            strResponse = strResponse.Replace("TransactionIdentifier=\"Amadeus", sb.ToString());
                            sb.Remove(0, sb.Length);

                            strResponse = strResponse.Replace("<OTA_AirLowFareSearchMatrixRS", "<OTA_AirLowFareSearchScheduleRS");
                            strResponse = strResponse.Replace("</OTA_AirLowFareSearchMatrixRS", "</OTA_AirLowFareSearchScheduleRS");

                        }

                        if (strResponse.IndexOf("<Error") == -1)
                        {
                            SuccessCount++;
                            if (SuccessCount == 1)
                                finalStrResponse = strResponse;
                            else if (SuccessCount == 2)
                            {
                                oDocResp.LoadXml(finalStrResponse);
                                oRootFinal = oDocResp.DocumentElement;

                                XmlElement oRootSeq = null;

                                oDocResp.LoadXml(strResponse);
                                oRootResp = oDocResp.DocumentElement;

                                SeqCount = oRootFinal.SelectNodes("PricedItineraries/PricedItinerary[@SequenceNumber!='']").Count;
                                foreach (XmlNode oNodeResp in oRootResp.SelectNodes("PricedItineraries/PricedItinerary[@SequenceNumber!='']"))
                                {
                                    SeqCount++;
                                    PricedItinerary = oNodeResp.InnerXml;
                                    PricedItinerary = sb.Append("<PricedItinerary SequenceNumber='" + SeqCount.ToString() + "'>").Append(PricedItinerary).Append("</PricedItinerary>").ToString();
                                    oDocResp.LoadXml(PricedItinerary);
                                    oRootSeq = oDocResp.DocumentElement;
                                    string testroot = oRootSeq.OuterXml;
                                    string tstrt = oRootFinal.OuterXml;
                                    oRootFinal.SelectSingleNode("PricedItineraries").AppendChild(oRootSeq);
                                    string tr = oRootFinal.OuterXml;
                                    sb.Remove(0, sb.Length);
                                }

                                finalStrResponse = oRootFinal.OuterXml;
                            }


                        }

                        if (finalStrResponse == "" && k == 1)
                            finalStrResponse = strResponse;
                        //throw new Exception(sb.Append("Error in MasterPricerTravelBoardSearch.").Append("\r\n").Append("").ToString());


                    }

                    if (k == 2)
                        strResponse = finalStrResponse;

                    if (FlexToken != "MPC")
                    {
                        strResponse = strResponse.Replace("<OTA_AirLowFareSearchScheduleRS", "<OTA_AirLowFareSearchFlightsRS EchoToken=\"LFSC\"");
                        EchoToken = "LFSC";
                    }
                    else
                    {
                        strResponse = strResponse.Replace("<OTA_AirLowFareSearchScheduleRS", "<OTA_AirLowFareSearchFlightsRS EchoToken=\"LFSCC\"");
                        EchoToken = "LFSCC";
                    }
                    strResponse = strResponse.Replace("</OTA_AirLowFareSearchScheduleRS>", "</OTA_AirLowFareSearchFlightsRS>");

                }
                catch (Exception ex)
                {
                    throw new Exception(sb.Append("Error in MasterPricerTravelBoardSearch.").Append("\r\n").Append(ex.Message).ToString());
                    sb.Remove(0, sb.Length);
                }
            }
            else
            {
                if (((oRoot.SelectSingleNode("TravelPreferences/VendorPref/@Code") != null) && (oRoot.SelectSingleNode("TravelPreferences/VendorPref/@Code").InnerText == "AV" || oRoot.SelectSingleNode("TravelPreferences/VendorPref/@Code").InnerText == "TA" || oRoot.SelectSingleNode("TravelPreferences/VendorPref/@Code").InnerText == "UL")))
                {
                    throw new Exception("NO AVAILABILITY FOR SELECTED PREFERENCE");
                }

                strFinalResponse = "<FS>" + strAvailResponses + "</FS>";
                sb.Append(mstrVersion).Append("AmadeusWS_LowFareFlightsRS.xsl");
                strResponse = CoreLib.TransformXML(strFinalResponse, mstrXslPath, sb.ToString(), false);
                sb.Remove(0, sb.Length);

                strResponse = strResponse.Replace("<OTA_AirLowFareSearchFlightsRS", "<OTA_AirLowFareSearchFlightsRS EchoToken=\"FLTS\"");
                // strResponse = RemoveDuplicate(strResponse);
                EchoToken = "FLTS";
            }
            #endregion

            if (EchoToken != "LFSC" && EchoToken != "LFSCC" && EchoToken != "FLTS")
                strResponse = RemoveDuplicate(strResponse);
            //if (ttProviderSystems.SessionPool)
            //{
            //    ConversationID = SubSessionID(ConversationID);
            //    ttAA.CloseSessionFromPool(ConversationID);
            //}
            //else
            //{
            ttAA.CloseSession(ConversationID);
            //}
            ttAA = null;

            // ***********************************************
            //  process output business logic if necessary   *
            // *********************************************** 
            sb.Append("TransactionIdentifier=\"Amadeus-").Append(ttProviderSystems.PCC);
            string t = sb.ToString();
            strResponse = strResponse.Replace("TransactionIdentifier=\"Amadeus", sb.ToString());
            sb.Remove(0, sb.Length);

            #region "BL section"
            if (ttProviderSystems.BLFile != "")
            {
                oDoc = new XmlDocument();
                //  Load Access Control List into memory
                oDoc.Load(ttProviderSystems.BLFile);

                oRoot = oDoc.DocumentElement;
                oNode = oRoot.SelectSingleNode("Message[@Name=\'LowFare\'][@Direction=\'Out\']");

                if (!(oNode == null))
                {
                    //  check if non ticketable flights/fares to eliminate
                    sb.Append("NoTktAirline[@Name=\'Amadeus\'][@System=\'").Append(ttProviderSystems.System).Append("\'][@PCC=\'").Append(ttProviderSystems.PCC).Append("\']");
                    oBLNode = oNode.SelectSingleNode(sb.ToString());
                    sb.Remove(0, sb.Length);

                    if (!(oBLNode == null))
                    {
                        sb.Append(modCore.gXslPath).Append("BL\\");
                        strResponse = BusinessLogic(strResponse, oBLNode.OuterXml, sb.ToString(), "BL_LowFareNoTktRS.xsl");
                        sb.Remove(0, sb.Length);
                    }

                    //  check if no mix airline to eliminate
                    sb.Append("NoMixAirline[@Name=\'Amadeus\'][@System=\'").Append(ttProviderSystems.System).Append("\'][@PCC=\'").Append(ttProviderSystems.PCC).Append("\']");
                    oBLNode = oNode.SelectSingleNode(sb.ToString());
                    sb.Remove(0, sb.Length);

                    if (!(oBLNode == null))
                    {
                        sb.Append(modCore.gXslPath).Append("BL\\");
                        strResponse = BusinessLogic(strResponse, oBLNode.OuterXml, sb.ToString(), "BL_LowFareNoMixRS.xsl");
                        sb.Remove(0, sb.Length);
                    }

                    //  add fare markup if needed
                    sb.Append("ProviderBL[@Name=\'Amadeus\'][@System=\'").Append(ttProviderSystems.System).Append("\'][@PCC=\'").Append(ttProviderSystems.PCC).Append("\']");
                    oBLNode = oNode.SelectSingleNode(sb.ToString());
                    sb.Remove(0, sb.Length);

                    if (!(oBLNode == null))
                    {
                        sb.Append(modCore.gXslPath).Append("BL\\");
                        strResponse = BusinessLogic(strResponse, oBLNode.OuterXml, sb.ToString(), "BL_LowFareRS.xsl");
                        sb.Remove(0, sb.Length);
                    }
                }
            }
            #endregion
            strResponse = strResponse.Replace(" xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\"", "");

            oPDoc = new XmlDocument();
            oPDoc.LoadXml(strResponse);
            oPRoot = oPDoc.DocumentElement;

            if (!strResponse.Contains("Errors"))
            {
                for (int i = 0; i < oPDoc.GetElementsByTagName("PricedItinerary").Count; i++)
                {

                    //for (int k = 0; k < oPDoc.GetElementsByTagName("PricedItinerary").Item(i).SelectSingleNode("AirItinerary").SelectSingleNode("OriginDestinationOptions").SelectNodes("OriginDestinationOption").Count; k++)
                    //{
                    int k = 1;
                    if (!isReturn)
                    {
                        k = 0;
                    }
                    for (int j = oPDoc.GetElementsByTagName("PricedItinerary").Item(i).SelectSingleNode("AirItinerary").SelectSingleNode("OriginDestinationOptions").SelectNodes("OriginDestinationOption")[k].SelectNodes("FlightSegment").Count - 1; j >= 0; j--)
                    {
                        if (oPDoc.GetElementsByTagName("PricedItinerary").Item(i).SelectSingleNode("AirItinerary").SelectSingleNode("OriginDestinationOptions").SelectNodes("OriginDestinationOption")[k].SelectNodes("FlightSegment").Item(j).Attributes["ResBookDesigCode"].Value == "1" || oPDoc.GetElementsByTagName("PricedItinerary").Item(i).SelectSingleNode("AirItinerary").SelectSingleNode("OriginDestinationOptions").SelectNodes("OriginDestinationOption")[k].SelectNodes("FlightSegment").Item(j).Attributes["ResBookDesigCode"].Value == "0")
                        {
                            oPDoc.GetElementsByTagName("PricedItinerary").Item(i).SelectSingleNode("AirItinerary").SelectSingleNode("OriginDestinationOptions").SelectNodes("OriginDestinationOption")[k].SelectNodes("FlightSegment").Item(j).ParentNode.RemoveChild(oPDoc.GetElementsByTagName("PricedItinerary").Item(i).SelectSingleNode("AirItinerary").SelectSingleNode("OriginDestinationOptions").SelectNodes("OriginDestinationOption")[k].SelectNodes("FlightSegment")[j]);


                        }
                    }
                    // }


                }
                try
                {
                    string asd = oPDoc.OuterXml;
                    for (int i = 0; i < oPDoc.GetElementsByTagName("PricedItinerary").Count; i++)
                    {
                        if (isReturn)
                        {
                            for (int j = 0; j < oPDoc.GetElementsByTagName("PricedItinerary").Item(i).SelectSingleNode("AirItinerary").SelectSingleNode("OriginDestinationOptions").SelectNodes("OriginDestinationOption")[0].SelectNodes("FlightSegment").Count; j++)
                            {
                                if (oPDoc.GetElementsByTagName("PricedItinerary").Item(i).SelectSingleNode("AirItinerary").SelectSingleNode("OriginDestinationOptions").SelectNodes("OriginDestinationOption")[0].SelectNodes("FlightSegment")[j].SelectSingleNode("TPA_Extensions").SelectSingleNode("FromTotalBaseFare") != null && oPDoc.GetElementsByTagName("PricedItinerary").Item(i).SelectSingleNode("AirItinerary").SelectSingleNode("OriginDestinationOptions").SelectNodes("OriginDestinationOption")[0].SelectNodes("FlightSegment")[j].SelectSingleNode("TPA_Extensions").SelectSingleNode("FromTotalBaseFare").Attributes["Amount"].Value == "00000")
                                {
                                    oPDoc.GetElementsByTagName("PricedItinerary").Item(i).SelectSingleNode("AirItinerary").SelectSingleNode("OriginDestinationOptions").SelectNodes("OriginDestinationOption")[0].SelectNodes("FlightSegment")[j].SelectSingleNode("TPA_Extensions").SelectSingleNode("FromTotalBaseFare").ParentNode.RemoveChild(oPDoc.GetElementsByTagName("PricedItinerary").Item(i).SelectSingleNode("AirItinerary").SelectSingleNode("OriginDestinationOptions").SelectNodes("OriginDestinationOption")[0].SelectNodes("FlightSegment")[j].SelectSingleNode("TPA_Extensions").SelectSingleNode("FromTotalBaseFare"));
                                    oPDoc.GetElementsByTagName("PricedItinerary").Item(i).SelectSingleNode("AirItinerary").SelectSingleNode("OriginDestinationOptions").SelectNodes("OriginDestinationOption")[0].SelectNodes("FlightSegment")[j].SelectSingleNode("TPA_Extensions").SelectSingleNode("FromTotalTax").ParentNode.RemoveChild(oPDoc.GetElementsByTagName("PricedItinerary").Item(i).SelectSingleNode("AirItinerary").SelectSingleNode("OriginDestinationOptions").SelectNodes("OriginDestinationOption")[0].SelectNodes("FlightSegment")[j].SelectSingleNode("TPA_Extensions").SelectSingleNode("FromTotalTax"));
                                    oPDoc.GetElementsByTagName("PricedItinerary").Item(i).SelectSingleNode("AirItinerary").SelectSingleNode("OriginDestinationOptions").SelectNodes("OriginDestinationOption")[0].SelectNodes("FlightSegment")[j].SelectSingleNode("TPA_Extensions").SelectSingleNode("FromTotalFare").ParentNode.RemoveChild(oPDoc.GetElementsByTagName("PricedItinerary").Item(i).SelectSingleNode("AirItinerary").SelectSingleNode("OriginDestinationOptions").SelectNodes("OriginDestinationOption")[0].SelectNodes("FlightSegment")[j].SelectSingleNode("TPA_Extensions").SelectSingleNode("FromTotalFare"));

                                    try
                                    {
                                        oPDoc.GetElementsByTagName("PricedItinerary").Item(i).SelectSingleNode("AirItinerary").SelectSingleNode("OriginDestinationOptions").SelectNodes("OriginDestinationOption")[0].SelectNodes("FlightSegment")[j].SelectSingleNode("TPA_Extensions").SelectSingleNode("FareBasisCodes").ParentNode.RemoveChild(oPDoc.GetElementsByTagName("PricedItinerary").Item(i).SelectSingleNode("AirItinerary").SelectSingleNode("OriginDestinationOptions").SelectNodes("OriginDestinationOption")[0].SelectNodes("FlightSegment")[j].SelectSingleNode("TPA_Extensions").SelectSingleNode("FareBasisCodes"));
                                    }
                                    catch (Exception) { }
                                    oPDoc.GetElementsByTagName("PricedItinerary").Item(i).SelectSingleNode("AirItinerary").SelectSingleNode("OriginDestinationOptions").SelectNodes("OriginDestinationOption")[0].SelectNodes("FlightSegment")[j].Attributes["ResBookDesigCode"].Value = "";
                                }
                            }
                            if (!oPDoc.GetElementsByTagName("PricedItinerary").Item(i).SelectSingleNode("AirItinerary").SelectSingleNode("OriginDestinationOptions").SelectNodes("OriginDestinationOption")[1].HasChildNodes)
                            {
                                XmlNode testnode = oPDoc.GetElementsByTagName("PricedItinerary").Item(i);
                                testnode.ParentNode.RemoveChild(testnode);
                                //oPDoc.GetElementsByTagName("PricedItinerary").Item(i).ParentNode.RemoveChild(oPDoc.GetElementsByTagName("PricedItinerary").Item(i));
                            }

                        }
                        else
                        {
                            if (!oPDoc.GetElementsByTagName("PricedItinerary").Item(i).SelectSingleNode("AirItinerary").SelectSingleNode("OriginDestinationOptions").SelectNodes("OriginDestinationOption")[0].HasChildNodes)
                            {
                                oPDoc.GetElementsByTagName("PricedItinerary").Item(i).ParentNode.RemoveChild(oPDoc.GetElementsByTagName("PricedItinerary").Item(i));
                            }
                        }

                    }
                    Console.Write(oPDoc.OuterXml);
                    for (int i = 0; i < oPDoc.GetElementsByTagName("PricedItinerary").Count; i++)
                    {
                        if (isReturn)
                        {
                            for (int j = 0; j < oPDoc.GetElementsByTagName("PricedItinerary").Item(i).SelectSingleNode("AirItinerary").SelectSingleNode("OriginDestinationOptions").SelectNodes("OriginDestinationOption")[0].SelectNodes("FlightSegment").Count; j++)
                            {
                                if (oPDoc.GetElementsByTagName("PricedItinerary").Item(i).SelectSingleNode("AirItinerary").SelectSingleNode("OriginDestinationOptions").SelectNodes("OriginDestinationOption")[0].SelectNodes("FlightSegment")[j].SelectSingleNode("TPA_Extensions").SelectSingleNode("FromTotalBaseFare") != null && oPDoc.GetElementsByTagName("PricedItinerary").Item(i).SelectSingleNode("AirItinerary").SelectSingleNode("OriginDestinationOptions").SelectNodes("OriginDestinationOption")[0].SelectNodes("FlightSegment")[j].SelectSingleNode("TPA_Extensions").SelectSingleNode("FromTotalBaseFare").Attributes["Amount"].Value == "00000")
                                {
                                    oPDoc.GetElementsByTagName("PricedItinerary").Item(i).SelectSingleNode("AirItinerary").SelectSingleNode("OriginDestinationOptions").SelectNodes("OriginDestinationOption")[0].SelectNodes("FlightSegment")[j].SelectSingleNode("TPA_Extensions").SelectSingleNode("FromTotalBaseFare").ParentNode.RemoveChild(oPDoc.GetElementsByTagName("PricedItinerary").Item(i).SelectSingleNode("AirItinerary").SelectSingleNode("OriginDestinationOptions").SelectNodes("OriginDestinationOption")[0].SelectNodes("FlightSegment")[j].SelectSingleNode("TPA_Extensions").SelectSingleNode("FromTotalBaseFare"));
                                    oPDoc.GetElementsByTagName("PricedItinerary").Item(i).SelectSingleNode("AirItinerary").SelectSingleNode("OriginDestinationOptions").SelectNodes("OriginDestinationOption")[0].SelectNodes("FlightSegment")[j].SelectSingleNode("TPA_Extensions").SelectSingleNode("FromTotalTax").ParentNode.RemoveChild(oPDoc.GetElementsByTagName("PricedItinerary").Item(i).SelectSingleNode("AirItinerary").SelectSingleNode("OriginDestinationOptions").SelectNodes("OriginDestinationOption")[0].SelectNodes("FlightSegment")[j].SelectSingleNode("TPA_Extensions").SelectSingleNode("FromTotalTax"));
                                    oPDoc.GetElementsByTagName("PricedItinerary").Item(i).SelectSingleNode("AirItinerary").SelectSingleNode("OriginDestinationOptions").SelectNodes("OriginDestinationOption")[0].SelectNodes("FlightSegment")[j].SelectSingleNode("TPA_Extensions").SelectSingleNode("FromTotalFare").ParentNode.RemoveChild(oPDoc.GetElementsByTagName("PricedItinerary").Item(i).SelectSingleNode("AirItinerary").SelectSingleNode("OriginDestinationOptions").SelectNodes("OriginDestinationOption")[0].SelectNodes("FlightSegment")[j].SelectSingleNode("TPA_Extensions").SelectSingleNode("FromTotalFare"));
                                    try
                                    {
                                        oPDoc.GetElementsByTagName("PricedItinerary").Item(i).SelectSingleNode("AirItinerary").SelectSingleNode("OriginDestinationOptions").SelectNodes("OriginDestinationOption")[0].SelectNodes("FlightSegment")[j].SelectSingleNode("TPA_Extensions").SelectSingleNode("FareBasisCodes").ParentNode.RemoveChild(oPDoc.GetElementsByTagName("PricedItinerary").Item(i).SelectSingleNode("AirItinerary").SelectSingleNode("OriginDestinationOptions").SelectNodes("OriginDestinationOption")[0].SelectNodes("FlightSegment")[j].SelectSingleNode("TPA_Extensions").SelectSingleNode("FareBasisCodes"));
                                    }
                                    catch (Exception) { }
                                    oPDoc.GetElementsByTagName("PricedItinerary").Item(i).SelectSingleNode("AirItinerary").SelectSingleNode("OriginDestinationOptions").SelectNodes("OriginDestinationOption")[0].SelectNodes("FlightSegment")[j].Attributes["ResBookDesigCode"].Value = "";
                                }
                            }
                            if (!oPDoc.GetElementsByTagName("PricedItinerary").Item(i).SelectSingleNode("AirItinerary").SelectSingleNode("OriginDestinationOptions").SelectNodes("OriginDestinationOption")[1].HasChildNodes)
                            {
                                XmlNode testnode = oPDoc.GetElementsByTagName("PricedItinerary").Item(i);
                                testnode.ParentNode.RemoveChild(testnode);
                                //oPDoc.GetElementsByTagName("PricedItinerary").Item(i).ParentNode.RemoveChild(oPDoc.GetElementsByTagName("PricedItinerary").Item(i));
                            }

                        }
                        else
                        {
                            if (!oPDoc.GetElementsByTagName("PricedItinerary").Item(i).SelectSingleNode("AirItinerary").SelectSingleNode("OriginDestinationOptions").SelectNodes("OriginDestinationOption")[0].HasChildNodes)
                            {
                                oPDoc.GetElementsByTagName("PricedItinerary").Item(i).ParentNode.RemoveChild(oPDoc.GetElementsByTagName("PricedItinerary").Item(i));
                            }
                        }

                    }
                }
                catch (Exception) { }
                try
                {
                    for (int i = 0; i < oPDoc.GetElementsByTagName("PricedItinerary").Count; i++)
                    {
                        if (isReturn)
                        {
                            for (int j = 0; j < oPDoc.GetElementsByTagName("PricedItinerary").Item(i).SelectSingleNode("AirItinerary").SelectSingleNode("OriginDestinationOptions").SelectNodes("OriginDestinationOption")[0].SelectNodes("FlightSegment").Count; j++)
                            {

                                try
                                {
                                    oPDoc.GetElementsByTagName("PricedItinerary").Item(i).SelectSingleNode("AirItinerary").SelectSingleNode("OriginDestinationOptions").SelectNodes("OriginDestinationOption")[0].SelectNodes("FlightSegment")[j].Attributes["ResBookDesigCode"].Value = oPDoc.GetElementsByTagName("PricedItinerary").Item(i).SelectSingleNode("AirItinerary").SelectSingleNode("OriginDestinationOptions").SelectNodes("OriginDestinationOption")[1].SelectNodes("FlightSegment")[0].SelectSingleNode("TPA_Extensions").SelectNodes("OriginClass")[j].InnerText;
                                    //if (oPDoc.GetElementsByTagName("PricedItinerary").Item(i).SelectSingleNode("AirItinerary").SelectSingleNode("OriginDestinationOptions").SelectNodes("OriginDestinationOption")[0].SelectNodes("FlightSegment")[j].SelectSingleNode("TPA_Extensions").SelectSingleNode("FromTotalBaseFare") != null)
                                    //{
                                    //    oPDoc.GetElementsByTagName("PricedItinerary").Item(i).SelectSingleNode("AirItinerary").SelectSingleNode("OriginDestinationOptions").SelectNodes("OriginDestinationOption")[0].SelectNodes("FlightSegment")[j].SelectSingleNode("TPA_Extensions").SelectSingleNode("FromTotalBaseFare").ParentNode.RemoveChild(oPDoc.GetElementsByTagName("PricedItinerary").Item(i).SelectSingleNode("AirItinerary").SelectSingleNode("OriginDestinationOptions").SelectNodes("OriginDestinationOption")[0].SelectNodes("FlightSegment")[j].SelectSingleNode("TPA_Extensions").SelectSingleNode("FromTotalBaseFare"));
                                    //}

                                    //    oPDoc.GetElementsByTagName("PricedItinerary").Item(i).SelectSingleNode("AirItinerary").SelectSingleNode("OriginDestinationOptions").SelectNodes("OriginDestinationOption")[0].SelectNodes("FlightSegment")[j].SelectSingleNode("TPA_Extensions").AppendChild(oPDoc.GetElementsByTagName("PricedItinerary").Item(i).SelectSingleNode("AirItinerary").SelectSingleNode("OriginDestinationOptions").SelectNodes("OriginDestinationOption")[1].SelectNodes("FlightSegment")[0].SelectSingleNode("TPA_Extensions").SelectSingleNode("FromTotalBaseFare"));

                                    //if (oPDoc.GetElementsByTagName("PricedItinerary").Item(i).SelectSingleNode("AirItinerary").SelectSingleNode("OriginDestinationOptions").SelectNodes("OriginDestinationOption")[0].SelectNodes("FlightSegment")[j].SelectSingleNode("TPA_Extensions").SelectSingleNode("FromTotalTax") != null)
                                    //{
                                    //    oPDoc.GetElementsByTagName("PricedItinerary").Item(i).SelectSingleNode("AirItinerary").SelectSingleNode("OriginDestinationOptions").SelectNodes("OriginDestinationOption")[0].SelectNodes("FlightSegment")[j].SelectSingleNode("TPA_Extensions").SelectSingleNode("FromTotalTax").ParentNode.RemoveChild(oPDoc.GetElementsByTagName("PricedItinerary").Item(i).SelectSingleNode("AirItinerary").SelectSingleNode("OriginDestinationOptions").SelectNodes("OriginDestinationOption")[0].SelectNodes("FlightSegment")[j].SelectSingleNode("TPA_Extensions").SelectSingleNode("FromTotalTax"));
                                    //}
                                    //oPDoc.GetElementsByTagName("PricedItinerary").Item(i).SelectSingleNode("AirItinerary").SelectSingleNode("OriginDestinationOptions").SelectNodes("OriginDestinationOption")[0].SelectNodes("FlightSegment")[j].SelectSingleNode("TPA_Extensions").AppendChild(oPDoc.GetElementsByTagName("PricedItinerary").Item(i).SelectSingleNode("AirItinerary").SelectSingleNode("OriginDestinationOptions").SelectNodes("OriginDestinationOption")[1].SelectNodes("FlightSegment")[0].SelectSingleNode("TPA_Extensions").SelectSingleNode("FromTotalTax"));
                                    //if (oPDoc.GetElementsByTagName("PricedItinerary").Item(i).SelectSingleNode("AirItinerary").SelectSingleNode("OriginDestinationOptions").SelectNodes("OriginDestinationOption")[0].SelectNodes("FlightSegment")[j].SelectSingleNode("TPA_Extensions").SelectSingleNode("FromTotalFare") != null)
                                    //{
                                    //    oPDoc.GetElementsByTagName("PricedItinerary").Item(i).SelectSingleNode("AirItinerary").SelectSingleNode("OriginDestinationOptions").SelectNodes("OriginDestinationOption")[0].SelectNodes("FlightSegment")[j].SelectSingleNode("TPA_Extensions").SelectSingleNode("FromTotalFare").ParentNode.RemoveChild(oPDoc.GetElementsByTagName("PricedItinerary").Item(i).SelectSingleNode("AirItinerary").SelectSingleNode("OriginDestinationOptions").SelectNodes("OriginDestinationOption")[0].SelectNodes("FlightSegment")[j].SelectSingleNode("TPA_Extensions").SelectSingleNode("FromTotalFare"));
                                    //}
                                    //oPDoc.GetElementsByTagName("PricedItinerary").Item(i).SelectSingleNode("AirItinerary").SelectSingleNode("OriginDestinationOptions").SelectNodes("OriginDestinationOption")[0].SelectNodes("FlightSegment")[j].SelectSingleNode("TPA_Extensions").AppendChild(oPDoc.GetElementsByTagName("PricedItinerary").Item(i).SelectSingleNode("AirItinerary").SelectSingleNode("OriginDestinationOptions").SelectNodes("OriginDestinationOption")[1].SelectNodes("FlightSegment")[0].SelectSingleNode("TPA_Extensions").SelectSingleNode("FromTotalFare"));
                                }
                                catch (Exception ex)
                                {


                                }


                            }
                        }
                    }
                }
                catch (Exception)
                {


                }


            }

            string finalResp = oPDoc.OuterXml;
            if (EchoToken == "NEGO")
            {
                string modifiedStr = finalResp;
                XmlDocument oReqDoc = new XmlDocument();
                oReqDoc.LoadXml(modifiedStr);
                XmlElement oNegoRoot = oReqDoc.DocumentElement;

                if (oNegoRoot.SelectSingleNode("Success") != null)
                {
                    if (oNegoRoot.SelectSingleNode("PricedItineraries").SelectNodes("PricedItinerary").Count > 1)
                    {
                        foreach (XmlNode nd in oNegoRoot.SelectSingleNode("PricedItineraries").SelectNodes("PricedItinerary")[1].SelectSingleNode("AirItinerary").SelectSingleNode("OriginDestinationOptions").SelectNodes("OriginDestinationOption")[1].SelectNodes("FlightSegment"))
                        {
                            nd.Attributes["RPH"].Value = (Int32.Parse(nd.Attributes["RPH"].Value) + 1).ToString();
                            oNegoRoot.SelectSingleNode("PricedItineraries").SelectNodes("PricedItinerary")[0].SelectSingleNode("AirItinerary").SelectSingleNode("OriginDestinationOptions").SelectNodes("OriginDestinationOption")[1].AppendChild(nd.Clone());
                        }
                        XmlNode tmpND = oNegoRoot.SelectSingleNode("PricedItineraries").SelectNodes("PricedItinerary")[1].SelectSingleNode("AirItinerary").SelectSingleNode("OriginDestinationOptions").SelectNodes("OriginDestinationOption")[1].SelectNodes("FlightSegment")[0];
                        foreach (XmlNode nd in oNegoRoot.SelectSingleNode("PricedItineraries").SelectNodes("PricedItinerary")[0].SelectSingleNode("AirItinerary").SelectSingleNode("OriginDestinationOptions").SelectNodes("OriginDestinationOption")[1].SelectNodes("FlightSegment"))
                        {
                            if (Int32.Parse(nd.Attributes["RPH"].Value) == 1)
                            {
                                oNegoRoot.SelectSingleNode("PricedItineraries").SelectNodes("PricedItinerary")[1].SelectSingleNode("AirItinerary").SelectSingleNode("OriginDestinationOptions").SelectNodes("OriginDestinationOption")[1].InsertBefore(nd.Clone(), tmpND);
                            }


                        }

                    }
                }
                string test = oNegoRoot.OuterXml;
                finalResp = test;

            }
            return finalResp;
        }
        catch (Exception ex)
        {
            sb.Append(sb.Append("Exception Error.").Append("\r\n").Append(ex.Message).ToString());
            throw new Exception(sb.ToString());
        }
        finally
        {
            if (!(oNode == null))
            {
                oNode = null;
            }
            if (!(oRoot == null))
            {
                oRoot = null;
            }
            if (!(oDoc == null))
            {
                oDoc = null;
            }
            if ((!(ConversationID == null) && !(ttAA == null)))
            {
                if ((ConversationID.Length > 0))
                {
                    //if (ttProviderSystems.SessionPool)
                    //{
                    //    ConversationID = SubSessionID(ConversationID);
                    //    ttAA.CloseSessionFromPool(ConversationID);
                    //}
                    //else
                    //{
                    ttAA.CloseSession(ConversationID);
                    //}
                }
            }
            if (!(ttAA == null))
            {
                ttAA = null;
            }
            oBLNode = null;
        }
    }

    public string LowFareSchedule()
    {
        AmadeusWSAdapter ttAA = null;
        string strRequest = "";
        string strResponse = "";
        XmlDocument oDoc = null;
        XmlElement oRoot = null;
        XmlNode oNode = null;
        DateTime RequestTime;
        DateTime ResponseTime;
        string strMessage = "";
        StringBuilder sb = new StringBuilder();


        // ************************************************************
        //  Get the Filtering Elements from OTA LowFareSchedule Request   *
        // ************************************************************
        try
        {
            RequestTime = DateTime.Now;
            strRequest = mstrRequest;
            oDoc = new XmlDocument();
            oDoc.LoadXml(strRequest);
            oRoot = oDoc.DocumentElement;
            oNode = oRoot.SelectSingleNode("POS/Source/@PseudoCityCode");

            if (!(oNode == null))
            {
                oNode.InnerText = ttProviderSystems.PCC;
                strRequest = oRoot.OuterXml;
            }

            // *****************************************************************
            //  Transform OTA LowFarePlus Request into Native Amadeus Request     *
            // ***************************************************************** 
            sb.Append(mstrVersion).Append("AmadeusWS_LowFareScheduleRQ.xsl");
            strRequest = CoreLib.TransformXML(strRequest, mstrXslPath, sb.ToString(), false);
            sb.Remove(0, sb.Length);
            strMessage = strRequest;

            if (strRequest.Length == 0)
            {
                throw new Exception("Transformation produced empty xml.");
            }

            // *******************************************************************************
            //  Send Transformed Request to the Amadeus Adapter and Getting Native Response  *
            // ******************************************************************************* 
            //ttAA = new AmadeusWSAdapter(ttProviderSystems);
            //strResponse = ttAA.SendMessage(strRequest, "", "http://webservices.amadeus.com/" + ttProviderSystems.Profile + "/" + ttProviderSystems.AmadeusWSSchema.Fare_MasterPricerTravelBoardSearch, "");

            if (ttProviderSystems.SessionPool)
            {
                int waitTime = 0;
                Random r = new Random();
                waitTime = r.Next(1, 1000);
                Thread.Sleep(waitTime);

                ttAA = new AmadeusWSAdapter(ttProviderSystems, "V1");
                ttAA.isSOAP2 = ttProviderSystems.SOAP2;
                strResponse = ttAA.SendMessageV3(strRequest, "", "http://webservices.amadeus.com/" + ttProviderSystems.Profile + "/" + ttProviderSystems.AmadeusWSSchema.Fare_MasterPricerTravelBoardSearch, "");
            }
            else
            {
                ttAA = new AmadeusWSAdapter(ttProviderSystems);
                ttAA.isSOAP2 = ttProviderSystems.SOAP2;
                strResponse = ttAA.SendMessage(strRequest, "", "http://webservices.amadeus.com/" + ttProviderSystems.Profile + "/" + ttProviderSystems.AmadeusWSSchema.Fare_MasterPricerTravelBoardSearch, "");
            }

            strResponse = strResponse.Replace(" xmlns=\"http://xml.amadeus.com/" + ttProviderSystems.AmadeusWSSchema.Fare_MasterPricerTravelBoardSearchReply + "\"", "");
            sb.Append(strMessage).Append(strResponse);
            strMessage = sb.ToString();
            sb.Remove(0, sb.Length);

            // ********************************************************************
            //  Transform Native Amadeus LowFarePlus Response into OTA Response   *
            //  This transformation better organizes the Amadeus response to make *
            //  easier to create and filter the final response                    *
            // ******************************************************************** 
            sb.Append(mstrVersion).Append("AmadeusWS_LowFareScheduleRS.xsl");
            strResponse = CoreLib.TransformXML(strResponse, mstrXslPath, sb.ToString(), false);
            sb.Remove(0, sb.Length);

            // ***********************************************
            //  process output business logic if necessary   *
            // *********************************************** 
            sb.Append("TransactionIdentifier=\"Amadeus-").Append(ttProviderSystems.PCC);
            strResponse = strResponse.Replace("TransactionIdentifier=\"Amadeus", sb.ToString());
            sb.Remove(0, sb.Length);

            ResponseTime = DateTime.Now;

            if (ttProviderSystems.LogNative)
            {
                TripXMLTools.TripXMLLog.LogMessage("LowFareSchedule", ref strMessage, RequestTime, ResponseTime, "Native", ttProviderSystems.Provider, ttProviderSystems.System, ttProviderSystems.UserName);
                //LogMessageToFile("LowFarePlus", strMessage, RequestTime, ResponseTime);
            }

            if (modCore.NonDirectFlights)
            {


                if (strResponse.IndexOf("<Error") != -1)
                {
                    ErrorReq = strResponse;
                    strResponse = "";
                    RequestCount++;

                }

                if (modCore.LFSchRequestCount == RequestCount)
                {
                    strResponse = ErrorReq;
                }
            }

            return strResponse;
        }
        catch (Exception ex)
        {
            sb.Append(sb.Append("Exception Error.").Append("\r\n").Append(ex.Message).ToString());
            throw new Exception(sb.ToString());
        }
        finally
        {
            if (!(oNode == null))
            {
                oNode = null;
            }
            if (!(oRoot == null))
            {
                oRoot = null;
            }
            if (!(oDoc == null))
            {
                oDoc = null;
            }
            if (!(ttAA == null))
            {
                ttAA = null;
            }
        }
    }

    public string FareInfo()
    {
        AmadeusWSAdapter ttAA = null;
        string strRequest = "";
        string strResponse = "";
        string strRespNative = "";
        string[] AirFareInfoRS = null;
        XmlDocument oDoc = null;
        XmlElement oRoot = null;
        XmlNode oNode = null;
        XmlDocument oDocResp = null;
        XmlElement oRootResp = null;
        XmlDocument oDocNative = null;
        XmlElement oRootNative = null;
        // XmlNode oNodeNative = null;
        string ConversationID = "";
        string currency = "";
        string DepartureDate = "";
        string ArrivalDate = "";
        string DepartureLocation = "";
        string ArrivalLocation = "";
        string AirlineCode = "";
        string TicketDate = "";
        int i = 0;
        StringBuilder sb2 = null;

        try
        {
            try
            {
                strRequest = mstrRequest;
                sb.Append(mstrVersion).Append("AmadeusWS_FareInfoRQ.xsl");
                strRespNative = CoreLib.TransformXML(strRequest, mstrXslPath, sb.ToString(), false);
                sb.Remove(0, sb.Length);
            }
            catch (Exception ex)
            {
                sb.Append(sb.Append("Error Transforming OTA Request. ").Append(ex.Message).ToString());
                throw new Exception(sb.ToString());
                sb.Remove(0, sb.Length);
            }

            if (strRespNative.Length == 0)
            {
                throw new Exception("Transformation produced empty xml.");
            }

            //  *******************
            //  Create Session    *
            //  *******************

            try
            {
                if (ttProviderSystems.SessionPool)
                {
                    ttAA = new AmadeusWSAdapter(ttProviderSystems, "V1");
                    ttAA.isSOAP2 = ttProviderSystems.SOAP2;
                    ConversationID = ttAA.CheckSessionV2();
                }
                else
                {
                    ttAA = new AmadeusWSAdapter(ttProviderSystems);
                    ttAA.isSOAP2 = ttProviderSystems.SOAP2;
                    ConversationID = ttAA.CreateSession();
                }
            }
            catch (Exception ex)
            {
                throw new Exception(sb.Append("Error Creating Session.").Append("\r\n").Append(ex.Message).ToString());
                sb.Remove(0, sb.Length);
            }

            // *******************************************************************************
            //  Send Transformed Request to the Amadeus Adapter and Getting Native Response  *
            // ******************************************************************************* 
            oDocNative = new XmlDocument();
            oDocNative.LoadXml(strRespNative);
            oRootNative = oDocNative.DocumentElement;
            i = 0;

            AirFareInfoRS = new string[oRootNative.ChildNodes.Count];

            foreach (XmlNode oNodeNative in oRootNative.ChildNodes)
            {
                try
                {
                    if (ttProviderSystems.SessionPool)
                    {
                        AirFareInfoRS[i] = ttAA.SendMessageV3(oNodeNative.OuterXml, "", "http://webservices.amadeus.com/" + ttProviderSystems.Profile + "/" + ttProviderSystems.AmadeusWSSchema.Command_Cryptic, ConversationID);
                    }
                    else
                    {
                        AirFareInfoRS[i] = ttAA.SendMessage(oNodeNative.OuterXml, "", "http://webservices.amadeus.com/" + ttProviderSystems.Profile + "/" + ttProviderSystems.AmadeusWSSchema.Command_Cryptic, ConversationID);
                    }
                    AirFareInfoRS[i] = AirFareInfoRS[i].Replace(" xmlns=\"http://xml.amadeus.com/" + ttProviderSystems.AmadeusWSSchema.Command_CrypticReply + "\"", "");
                    ConversationID = UpdateSessionID(ConversationID);
                }
                catch (Exception ex)
                {
                    throw ex;
                }

                if (AirFareInfoRS[i].IndexOf("MessagesOnly_Reply") != -1)
                {
                    sb.Append(mstrVersion).Append("AmadeusWS_FareInfoRS.xsl");
                    strRespNative = CoreLib.TransformXML(AirFareInfoRS[i], mstrXslPath, sb.ToString(), false);
                    sb.Remove(0, sb.Length);
                    return strRespNative;
                }

                if ((AirFareInfoRS[i].IndexOf("NO VALID FARE") != -1))
                {
                    throw new Exception("NO VALID FARE/RULE COMBINATIONS FOR PRICING");
                }

                if (AirFareInfoRS[i].Substring((AirFareInfoRS[i].IndexOf(" PAGE ") + 7), 1) != AirFareInfoRS[i].Substring((AirFareInfoRS[i].IndexOf(" PAGE ") + 10), 1))
                {
                    strRequest = "<Command_Cryptic><messageAction><messageFunctionDetails><messageFunction>M</messageFunction></messageFunctionDetails></messageAction><longTextString><textStringDetails>MD</textStringDetails></longTextString></Command_Cryptic>";
                    try
                    {
                        if (ttProviderSystems.SessionPool)
                        {
                            strResponse = ttAA.SendMessageV3(strRequest, "", "http://webservices.amadeus.com/" + ttProviderSystems.Profile + "/" + ttProviderSystems.AmadeusWSSchema.Command_Cryptic, ConversationID);
                        }
                        else
                        {
                            strResponse = ttAA.SendMessage(strRequest, "", "http://webservices.amadeus.com/" + ttProviderSystems.Profile + "/" + ttProviderSystems.AmadeusWSSchema.Command_Cryptic, ConversationID);
                        }
                        strResponse = strResponse.Replace(" xmlns=\"http://xml.amadeus.com/" + ttProviderSystems.AmadeusWSSchema.Command_CrypticReply + "\"", "").Replace("<textStringDetails>/$", "<textStringDetails>");
                        ConversationID = UpdateSessionID(ConversationID);
                    }
                    catch (Exception ex)
                    {
                        throw ex;
                    }

                    if ((strResponse.IndexOf("MessagesOnly_Reply") != -1))
                    {
                        sb.Append(mstrVersion).Append("AmadeusWS_FareInfoRS.xsl");
                        strRespNative = CoreLib.TransformXML(strResponse, mstrXslPath, sb.ToString(), false);
                        sb.Remove(0, sb.Length);
                        return strRespNative;
                    }
                    strResponse = strResponse.Replace("<Command_CrypticReply><longTextString><textStringDetails>", "");
                    strResponse = strResponse.Replace("</textStringDetails></longTextString></Command_CrypticReply>", "");
                    sb.Append(strResponse).Append("</textStringDetails></longTextString></Command_CrypticReply>");
                    AirFareInfoRS[i] = AirFareInfoRS[i].Replace("</textStringDetails></longTextString></Command_CrypticReply>", sb.ToString());
                    sb.Remove(0, sb.Length);
                }
                i = (i + 1);
            }
            //  Close Session
            if ((ConversationID != ""))
            {
                if (ttProviderSystems.SessionPool)
                {
                    ConversationID = SubSessionID(ConversationID);
                    ttAA.CloseSessionFromPool(ConversationID);
                }
                else
                {
                    ttAA.CloseSession(ConversationID);
                }
            }
            ttAA = null;
            ConversationID = "";
            oDoc = new XmlDocument();
            oDoc.LoadXml(mstrRequest);
            oRoot = oDoc.DocumentElement;
            oNode = oRoot.SelectSingleNode("TravelPreferences/FareRestrictPref/@FareDisplayCurrency");

            if (!(oNode == null))
            {
                currency = oNode.InnerText;
            }
            else
            {
                currency = "USD";
            }

            oNode = oRoot.SelectSingleNode("OriginDestinationInformation[1]/FlightSegment[1]/@DepartureDateTime");
            if (!(oNode == null))
            {
                DepartureDate = oNode.InnerText;
            }
            oNode = oRoot.SelectSingleNode("OriginDestinationInformation[1]/FlightSegment[1]/DepartureAirport/@LocationCode");

            if (!(oNode == null))
            {
                DepartureLocation = oNode.InnerText;
            }
            oNode = oRoot.SelectSingleNode("OriginDestinationInformation[position()=last()]/FlightSegment[position()=last()]/@DepartureDateTime");

            if (!(oNode == null))
            {
                ArrivalDate = oNode.InnerText;
            }
            oNode = oRoot.SelectSingleNode("OriginDestinationInformation[position()=last()]/FlightSegment[position()=last()]/ArrivalAirport/@LocationCode");

            if (!(oNode == null))
            {
                ArrivalLocation = oNode.InnerText;
            }

            AirlineCode = AirFareInfoRS[0].Substring((AirFareInfoRS[0].IndexOf("VALIDATING CARRIER") + 19), 2);
            TicketDate = AirFareInfoRS[0].Substring((AirFareInfoRS[0].IndexOf("LAST TKT DTE") + 13), 7);
            DateTime ddate;
            ddate = Convert.ToDateTime(TicketDate);
            TicketDate = ddate.ToString("yyyy-MM-dd");
            strResponse = "";

            for (i = 0; i <= (AirFareInfoRS.Length - 1); i++)
            {
                try
                {
                    oDocResp = new XmlDocument();
                    oDocResp.LoadXml(AirFareInfoRS[i]);
                    oRootResp = oDocResp.DocumentElement;
                    if (oRootResp == null)
                    {
                        throw new Exception("Unable to load AirFareInfo response xml");
                    }
                    // *******************************
                    // * Execute parsing funcion     *
                    // *******************************
                    sb.Append("TravelerInfoSummary/PassengerTypeQuantity[position()=").Append(((i + 1)).ToString()).Append("]/@Code");
                    AirFareInfoRS[i] = ParseAirFareInfoRS(currency, DepartureDate, ArrivalDate, DepartureLocation, ArrivalLocation, AirlineCode, TicketDate, oRootResp.SelectSingleNode("longTextString/textStringDetails").InnerText, i, oRoot.SelectSingleNode(sb.ToString()).InnerText);
                    sb.Remove(0, sb.Length);

                    if ((AirFareInfoRS[i].IndexOf("MessagesOnly_Reply") != -1))
                    {
                        sb.Append(mstrVersion).Append("AmadeusWS_FareInfoRS.xsl");
                        strRespNative = CoreLib.TransformXML(AirFareInfoRS[i], mstrXslPath, sb.ToString(), false);
                        sb.Remove(0, sb.Length);
                        return strRespNative;
                    }
                    sb.Append(strResponse).Append(AirFareInfoRS[i]);
                    strResponse = sb.ToString();
                    sb.Remove(0, sb.Length);
                }
                catch (Exception ex)
                {
                    if ((ConversationID != ""))
                    {
                        if (ttProviderSystems.SessionPool)
                        {
                            ConversationID = SubSessionID(ConversationID);
                            ttAA.CloseSessionFromPool(ConversationID);
                        }
                        else
                        {
                            ttAA.CloseSession(ConversationID);
                        }
                    }
                    ttAA = null;
                    ConversationID = "";
                    string strError = "";
                    sb.Append("Error *** Parsing AirFareInfoRespose:").Append(ex.Message);
                    strError = sb.ToString();
                    sb = new StringBuilder();
                    sb.Append("<MessagesOnly_Reply><CAPI_Messages>");
                    sb.Append("<ErrorCode>9999</ErrorCode>");
                    sb.Append("<Text>").Append(ex.Message).Append("</Text>");
                    sb.Append("</CAPI_Messages></MessagesOnly_Reply>");
                    sb2 = new StringBuilder();
                    sb2.Append(mstrVersion).Append("AmadeusWS_FareInfoRS.xsl");
                    strRespNative = CoreLib.TransformXML(sb.ToString(), mstrXslPath, sb2.ToString(), false);
                    sb2.Remove(0, sb2.Length);
                    sb.Remove(0, sb.Length);
                    return strRespNative;
                }
            }
            sb.Append("<OTA_AirFareInfoRS><Success/><FareDisplayInfos>").Append(strResponse).Append("</FareDisplayInfos></OTA_AirFareInfoRS>");
            strResponse = sb.ToString();
            sb.Remove(0, sb.Length);
            return strResponse;
        }
        catch (Exception ex)
        {
            if ((ConversationID != ""))
            {
                if (ttProviderSystems.SessionPool)
                {
                    ConversationID = SubSessionID(ConversationID);
                    ttAA.CloseSessionFromPool(ConversationID);
                }
                else
                {
                    ttAA.CloseSession(ConversationID);
                }
            }
            ttAA = null;
            ConversationID = "";
            string strError = "";
            sb.Append("Error *** Parsing AirFareInfoRespose:").Append(ex.Message);
            strError = sb.ToString();
            sb.Remove(0, sb.Length);
            sb.Append("<MessagesOnly_Reply><CAPI_Messages>");
            sb.Append("<ErrorCode>9999</ErrorCode>");
            sb.Append("<Text>").Append(ex.Message).Append("</Text>");
            sb.Append("</CAPI_Messages></MessagesOnly_Reply>");
            sb2 = new StringBuilder();
            sb2.Append(mstrVersion).Append("AmadeusWS_FareInfoRS.xsl");
            strRespNative = CoreLib.TransformXML(sb.ToString(), mstrXslPath, sb2.ToString(), false);
            sb.Remove(0, sb.Length);
            sb2 = null;
            return strRespNative;
        }
    }
    public string AirSchedule()
    {
        AmadeusWSAdapter ttAA = null;
        string strRequest = "";
        string strResponse = "";
        try
        {
            strRequest = mstrRequest;
            sb.Append(mstrVersion).Append("AmadeusWS_AirScheduleRQ.xsl");
            strRequest = CoreLib.TransformXML(strRequest, mstrXslPath, sb.ToString(), false);
            sb.Remove(0, sb.Length);
        }
        catch (Exception ex)
        {
            throw new Exception(sb.Append("Error Transforming OTA Request. ").Append(ex.Message).ToString());

        }
        finally
        {
            sb.Remove(0, sb.Length);
        }
        if ((strRequest.Length == 0))
        {
            throw new Exception("Transformation produced empty xml.");
        }
        //*******************************************************************************
        // Send Transformed Request to the AmadeusWS Adapter and Getting Native Response  *
        //******************************************************************************* 
        try
        {
            if (ttProviderSystems.SessionPool)
            {
                ttAA = new AmadeusWSAdapter(ttProviderSystems, "V1");
                ttAA.isSOAP2 = ttProviderSystems.SOAP2;
                strResponse = ttAA.SendMessageV3(strRequest, "", "http://webservices.amadeus.com/" + ttProviderSystems.Profile + "/" + ttProviderSystems.AmadeusWSSchema.Air_MultiAvailability, "");
            }
            else
            {
                ttAA = new AmadeusWSAdapter(ttProviderSystems);
                ttAA.isSOAP2 = ttProviderSystems.SOAP2;
                strResponse = ttAA.SendMessage(strRequest, "", "http://webservices.amadeus.com/" + ttProviderSystems.Profile + "/" + ttProviderSystems.AmadeusWSSchema.Air_MultiAvailability, "");
            }
            strResponse = strResponse.Replace(" xmlns=\"http://xml.amadeus.com/" + ttProviderSystems.AmadeusWSSchema.Air_MultiAvailabilityReply + "\"", "");
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            ttAA = null;
        }
        //*****************************************************************
        // Transform Native AmadeusWS AirSchedule Response into OTA Response   *
        //***************************************************************** 
        try
        {
            sb.Append(mstrVersion).Append("AmadeusWS_AirScheduleRS.xsl");
            strResponse = CoreLib.TransformXML(strResponse, mstrXslPath, sb.ToString(), false);
            sb.Remove(0, sb.Length);
        }
        catch (Exception ex)
        {
            throw new Exception(sb.Append("Error Transforming Native Response.").Append("\r\n").Append(ex.Message).ToString());
        }
        finally
        {
            sb = null;
        }
        return strResponse;
    }

    public string BusinessLogic(string strResponse, string strBusiness, string xslPath, string xslFile)
    {
        StringBuilder sb1 = new StringBuilder();
        if (strResponse.IndexOf("<Success />") != -1 || strResponse.IndexOf("<Success></Success>") != -1)
        {
            sb1.Append(strBusiness).Append("<Success />");
            strResponse = strResponse.Replace("<Success />", sb1.ToString());
            strResponse = strResponse.Replace("<Success/>", sb1.ToString());
            sb1.Remove(0, sb.Length);
            sb1.Append(strBusiness).Append("<Success></Success>");
            strResponse = strResponse.Replace("<Success></Success>", sb1.ToString());
            sb1.Remove(0, sb.Length);
            strResponse = CoreLib.TransformXML(strResponse, xslPath, (mstrVersion + xslFile), false);
        }
        sb1 = null;
        return strResponse;
    }

    //public string GetDecodeValue(ref DataView oDV, ref string strCode)
    // {
    //     int i;
    //     i = oDV.Find(strCode);
    //     if (i > -1)
    //     {
    //         return oDV.Item[i].Item["Name"].ToString;
    //     }
    //     else
    //     {
    //         return "";
    //     }
    // }

    private string ParseAirFareInfoRS(string pCurrency, string pDepartureDate, string pArrivalDate, string pDepLocation, string pArrLocation, string pAirline, string pTicketDate, string pResponseXML, int fareRPH, string paxType)
    {
        // **************************
        // * Variable definition    *
        // **************************
        string OTAResponseXML = "";
        string strError = "";
        string[] AirFareInfo = null;
        int intCount = 0;
        int intChars = 0;
        string BaseFare = "";
        string TaxAmount = "";
        string TotalFare = "";
        ArrayList Amounts = new ArrayList();
        int DashCount = 0;
        int NumDecimals = 0;
        int TotalTax = 0;
        int i = 0;
        int x = 0;
        int z = 0;
        int y = 0;
        string strTemp = "";

        sb.Remove(0, sb.Length);
        string itin = "";
        try
        {
            DashCount = pResponseXML.IndexOf("---------");
            // Find where end of header starts
            intChars = (pResponseXML.Length - DashCount);
            pResponseXML = pResponseXML.Substring(DashCount, intChars);
            // Get rid of header lines
            intChars = pResponseXML.IndexOf("NVA   BG");
            // Find out beginning of itin description 
            if ((intChars == -1))
            {
                // If not found  
                throw new Exception("Invalid AirFareInfo response msg");
                // Send Error Reponse
            }
            intCount = pResponseXML.IndexOf(pCurrency);
            // Find out first currency instance 
            if ((intCount == -1))
            {
                // If not found  
                throw new Exception("Invalid AirFareInfo response msg");
                // Send Error Reponse
            }
            itin = pResponseXML.Substring((intChars + 9), (intCount
                            - (intChars + 9)));
            // get itin info only
            itin = parseItin(itin, mstrRequest);
            //  extract itinerary data
            intChars = (pResponseXML.Length - intCount);
            // Calculate relevant fare info character count
            pResponseXML = pResponseXML.Substring(intCount, intChars);
            // Extract relevant fare info 
            intCount = pResponseXML.IndexOf(">");
            // Removes the end line of 1st screen
            if (intCount > -1)
            {
                // If is found  
                intChars = pResponseXML.IndexOf(">", (intCount + 1));
                // find the 2nd >
                if (intChars > -1)
                {
                    sb.Append(pResponseXML.Substring(0, (intCount - 1))).Append("\r").Append(pResponseXML.Substring((intChars + 1)));
                    pResponseXML = sb.ToString();
                    // Remove everything between the 2 > chars
                    sb.Remove(0, sb.Length);
                }
            }
            string tempResp = "";
            string newTax = "";
            ArrayList taxTable = new ArrayList();
            tempResp = pResponseXML.Substring(3);
            //  skip first currency code
            tempResp = tempResp.Substring(tempResp.IndexOf(pCurrency));
            //  point to next currency code
            while (tempResp.Length > 0)
            {
                if (tempResp.Substring(0, 3) == pCurrency)
                {
                    if ((tempResp.Substring(12, 1) != " ")
                                && ((tempResp.Substring(12, 1) != "\r")
                                && (((tempResp.Substring(14, 1) == " ")
                                || (tempResp.Substring(14, 1) == "\r"))
                                && (tempResp.Substring(12, 2) != "XT"))))
                    {
                        // tax code found
                        sb.Append(newTax).Append(tempResp.Substring(0, 14));
                        newTax = sb.ToString();
                        sb.Remove(0, sb.Length);
                    }
                }
                else
                {
                    break;
                }
                tempResp = tempResp.Substring((tempResp.IndexOf("\r") + 1));
            }
            tempResp = pResponseXML.Substring(3);
            //  skip first currency code
            tempResp = tempResp.Substring(tempResp.IndexOf(pCurrency));
            //  point to next currency code
            while (tempResp.Length > 0)
            {
                if (tempResp.Substring(0, 3) == pCurrency)
                {
                    if (tempResp.IndexOf("\r") > 17)
                    {
                        if ((tempResp.IndexOf("XT ") > 17)
                                    && (tempResp.IndexOf("XT ") < tempResp.IndexOf("\r")))
                        {
                            sb.Append(newTax).Append(tempResp.Substring((tempResp.IndexOf("XT ") + 3), (tempResp.IndexOf("\r")
                                                - (tempResp.IndexOf("XT ") - 3))));
                            newTax = sb.ToString();
                            sb.Remove(0, sb.Length);
                        }
                        else if (tempResp.Substring(16, 2) == "  ")
                        {
                            sb.Append(newTax).Append(tempResp.Substring(17, (tempResp.IndexOf("\r") - 17)));
                            newTax = sb.ToString();
                            sb.Remove(0, sb.Length);
                        }
                    }
                }
                else if (tempResp.Substring(0, 3) == "   ")
                {
                    sb.Append(newTax).Append(tempResp.Substring(17, (tempResp.IndexOf("\r") - 17)));
                    newTax = sb.ToString();
                    sb.Remove(0, sb.Length);
                }
                else
                {
                    break;
                }
                tempResp = tempResp.Substring((tempResp.IndexOf("\r") + 1));
            }
            AirFareInfo = Regex.Split(pResponseXML, pCurrency);
            // split fare info using currency as delimeter
            // ********************************
            // * Extract the base fare amount *
            // ********************************
            for (i = 0; (i <= (AirFareInfo.Length - 1)); i++)
            {
                if (AirFareInfo[i] != "")
                {
                    strTemp = AirFareInfo[i].Replace("\r", "").Replace("\n", "").Trim();
                    x = strTemp.IndexOf(" ");
                    // Find where the end base amount is
                    if (x == -1)
                    {
                        BaseFare = strTemp;
                        // Extract Fare Base amount
                        // Throw New Exception("invalid base fare amount")
                    }
                    else
                    {
                        BaseFare = strTemp.Substring(0, x);
                        // Extract Fare Base amount
                    }
                    break;
                }
            }
            // ********************************
            // * Build an xml from the taxes  *
            // ********************************
            string strTempResp = "";
            string strXFResp = "";
            string[] strFareInfo = null;
            string[] strNewFareInfo = null;
            string[] strXFInfo = null;
            string[] strNewXFInfo = null;
            int j = 0;
            int k = 0;
            pResponseXML = pResponseXML.Substring(3);
            //  skip first currency code
            strTempResp = pResponseXML.Substring(pResponseXML.IndexOf(pCurrency));
            strTempResp = newTax;
            strFareInfo = Regex.Split(strTempResp, pCurrency);
            // split fare info using currency as delimeter

            strNewFareInfo = new string[strFareInfo.Length];

            for (i = 0; (i <= (strFareInfo.Length - 1)); i++)
            {
                strTemp = strFareInfo[i].Replace("\r", "").Replace("\n", "");
                strTemp = strTemp.Trim();

                if (strTemp.IndexOf("PAGE ") != -1)
                {
                    strTemp = strTemp.Substring(0, strTemp.IndexOf("PAGE ")) + strTemp.Substring(strTemp.IndexOf("PAGE ") + 10);
                    strTemp = strTemp.Trim();
                }

                if ((strTemp != "") && !(AllDigits(strTemp)))
                {
                    if (strTemp.IndexOf(" ") != -1)
                    {
                        if (IsNumeric(strTemp.Substring(0, strTemp.IndexOf(" ")))
                                    && (strTemp.IndexOf("XF ") == -1))
                        {
                            strTemp = strTemp.Substring(0, (strTemp.IndexOf(" ") + 3));
                            strTemp = strTemp.Replace(" ", "");
                        }
                        else
                        {
                            if (strTemp.IndexOf("XF ") != -1)
                            {
                                strXFResp = strTemp.Substring((strTemp.IndexOf("XF ") + 3));
                                strXFResp = strXFResp.Replace(" ", "");
                                strXFInfo = strXFResp.Split(char.Parse("."));
                                strNewXFInfo = new string[strXFInfo.Length - 1];

                                for (k = 0; (k <= (strNewXFInfo.Length - 1)); k++)
                                {
                                    strNewXFInfo[k] = strXFResp.Substring(0, 3);
                                    strXFResp = strXFResp.Substring(3);
                                    sb.Append(strNewXFInfo[k]).Append(strXFResp.Substring(0, (strXFResp.IndexOf(".") + 3)));
                                    strNewXFInfo[k] = sb.ToString();
                                    sb.Remove(0, sb.Length);
                                    strXFResp = strXFResp.Substring((strXFResp.IndexOf(".") + 3));
                                }
                            }
                            if (strTemp.IndexOf(" XF") != -1)
                            {
                                strTemp = strTemp.Replace(" XF", "XF");
                            }
                            strTemp = strTemp.Substring(0, strTemp.IndexOf(" "));
                        }
                    }
                    strNewFareInfo[j] = strTemp.Trim();
                    j = (j + 1);
                }
            }
            for (i = 0; (i <= (strNewFareInfo.Length - 1)); i++)
            {
                if (!(strNewFareInfo[i] == null))
                {
                    Amounts.Add(strNewFareInfo[i]);
                }
            }
            // **********************************
            // * Calculate decimal places       *
            // **********************************
            intChars = BaseFare.IndexOf(".");

            if (intChars == -1)
                NumDecimals = 0;
            else
                NumDecimals = BaseFare.Length - (intChars + 1);

            BaseFare = BaseFare.Replace(".", "");
            // **********************************
            // * Build the xml response         *
            // ***********r**********************
            sb.Append("<FareDisplayInfo>");
            sb.Append("<TravelDates/>");
            sb.Append("<ValidatingAirline/>");
            sb.Append("<DepartureLocation/>");
            sb.Append("<ArrivalLocation/>");
            sb.Append("<LastTicketing/>");
            sb.Append(itin);
            sb.Append("<PricingInfo><BaseFare></BaseFare><Taxes></Taxes><TotalFare></TotalFare></PricingInfo>");
            sb.Append("</FareDisplayInfo>");
            XmlDocument xmlDoc = new XmlDocument();
            // Instantiate an xml document    
            XmlNode Root = null;
            XmlNode node = null;
            XmlNode nItem = null;
            XmlAttribute Attribute = null;
            xmlDoc.LoadXml(sb.ToString());
            Root = xmlDoc.DocumentElement;
            if (Root == null)
            {
                throw new Exception("Unable to load CBC Response");
            }
            // *******************************************
            // *  Process FareDisplayInfo node           *
            // *******************************************
            Attribute = xmlDoc.CreateAttribute("FareRPH");
            Attribute.Value = (fareRPH + 1).ToString();
            Root.Attributes.Append(Attribute);
            // Attribute = xmlDoc.CreateAttribute("ResBookDesigCode")
            // 'Attribute.Value = "1"
            // node.Attributes.Append(Attribute)
            // *******************************************
            // *  Process TravelDates node               *
            // *******************************************
            node = Root.SelectSingleNode("TravelDates");
            Attribute = xmlDoc.CreateAttribute("DepartureDate");
            Attribute.Value = pDepartureDate;
            node.Attributes.Append(Attribute);
            Attribute = xmlDoc.CreateAttribute("ArrivalDate");
            Attribute.Value = pArrivalDate;
            node.Attributes.Append(Attribute);
            // *******************************************
            // *  Process ValidatingAirline node          *
            // *******************************************
            node = Root.SelectSingleNode("ValidatingAirline");
            Attribute = xmlDoc.CreateAttribute("Code");
            Attribute.Value = pAirline;
            node.Attributes.Append(Attribute);
            // *******************************************
            // *  Process DepartureLocation node         *
            // *******************************************
            node = Root.SelectSingleNode("DepartureLocation");
            Attribute = xmlDoc.CreateAttribute("LocationCode");
            Attribute.Value = pDepLocation;
            node.Attributes.Append(Attribute);
            // *******************************************
            // *  Process ArrivalLocation node           *    
            // *******************************************
            node = Root.SelectSingleNode("ArrivalLocation");
            Attribute = xmlDoc.CreateAttribute("LocationCode");
            Attribute.Value = pArrLocation;
            node.Attributes.Append(Attribute);
            // *******************************************
            // *  Process LastTicketingDate node          *
            // *******************************************
            node = Root.SelectSingleNode("LastTicketing");
            Attribute = xmlDoc.CreateAttribute("Date");
            Attribute.Value = pTicketDate;
            node.Attributes.Append(Attribute);
            // *******************************************
            // *  Add passenger type info               *
            // *******************************************
            node = Root.SelectSingleNode("PricingInfo");
            Attribute = xmlDoc.CreateAttribute("PassengerTypeCode");
            Attribute.Value = paxType;
            node.Attributes.Append(Attribute);
            // *******************************************
            // *  Process PricingInfo/BaseFare node      *
            // *******************************************
            node = Root.SelectSingleNode("PricingInfo/BaseFare");
            Attribute = xmlDoc.CreateAttribute("Amount");
            Attribute.Value = BaseFare;
            node.Attributes.Append(Attribute);
            Attribute = xmlDoc.CreateAttribute("CurrencyCode");
            Attribute.Value = pCurrency;
            node.Attributes.Append(Attribute);
            Attribute = xmlDoc.CreateAttribute("DecimalPlaces");
            Attribute.Value = NumDecimals.ToString();
            node.Attributes.Append(Attribute);
            // *******************************************
            // *  Process PricingInfo/Taxes node         *
            // *******************************************
            node = Root.SelectSingleNode("PricingInfo/Taxes");
            for (i = 0; (i <= (Amounts.Count - 1)); i++)
            {
                TaxAmount = Amounts[i].ToString();
                // *******************************************
                // *  Process PricingInfo/Taxes/Tax node     *
                // *******************************************
                nItem = xmlDoc.CreateElement("Tax");
                Attribute = xmlDoc.CreateAttribute("TaxCode");
                Attribute.Value = TaxAmount.Substring((TaxAmount.Length - 2));
                nItem.Attributes.Append(Attribute);
                Attribute = xmlDoc.CreateAttribute("Amount");
                Attribute.Value = TaxAmount.Substring(0, (TaxAmount.Length - 2)).Replace(".", "");
                nItem.Attributes.Append(Attribute);
                Attribute = xmlDoc.CreateAttribute("CurrencyCode");
                Attribute.Value = pCurrency;
                nItem.Attributes.Append(Attribute);
                Attribute = xmlDoc.CreateAttribute("DecimalPlaces");
                Attribute.Value = NumDecimals.ToString();
                nItem.Attributes.Append(Attribute);
                if (TaxAmount.Substring((TaxAmount.Length - 2)) == "XF")
                {
                    XmlNode nXFItem = null;
                    XmlAttribute XFAttribute = null;
                    for (k = 0; (k <= (strNewXFInfo.Length - 1)); k++)
                    {
                        nXFItem = xmlDoc.CreateElement("SegTax");
                        XFAttribute = xmlDoc.CreateAttribute("CityCode");
                        XFAttribute.Value = strNewXFInfo[k].Substring(0, 3);
                        nXFItem.Attributes.Append(XFAttribute);
                        XFAttribute = xmlDoc.CreateAttribute("Amount");
                        XFAttribute.Value = strNewXFInfo[k].Substring(3).Replace(".", "");
                        nXFItem.Attributes.Append(XFAttribute);
                        nItem.AppendChild(nXFItem);
                    }
                }
                node.AppendChild(nItem);
                // *******************************************
                // * Calculate total tax amount              *
                // *******************************************
                TotalTax = (TotalTax + Convert.ToInt32(TaxAmount.Substring(0, (TaxAmount.Length - 2)).Replace(".", "")));
            }
            // *******************************************
            // *  Process PricingInfo/TotalFare node     *
            // *******************************************  
            TotalFare = ((Convert.ToInt32(BaseFare) + TotalTax)).ToString();
            node = Root.SelectSingleNode("PricingInfo/TotalFare");
            Attribute = xmlDoc.CreateAttribute("Amount");
            Attribute.Value = TotalFare;
            node.Attributes.Append(Attribute);
            Attribute = xmlDoc.CreateAttribute("CurrencyCode");
            Attribute.Value = pCurrency;
            node.Attributes.Append(Attribute);
            Attribute = xmlDoc.CreateAttribute("DecimalPlaces");
            Attribute.Value = NumDecimals.ToString();
            node.Attributes.Append(Attribute);
            OTAResponseXML = Root.OuterXml;
        }
        catch (Exception ex)
        {
            sb.Append("Error *** Parsing AirFareInfoRespose:").Append(ex.Message);
            strError = sb.ToString();
            sb.Remove(0, sb.Length);
            sb.Append("<MessagesOnly_Reply><CAPI_Messages>");
            sb.Append("<ErrorCode>9999</ErrorCode>");
            sb.Append("<Text>").Append(ex.Message).Append("</Text>");
            sb.Append("</CAPI_Messages></MessagesOnly_Reply>");
            OTAResponseXML = sb.ToString();
            sb.Remove(0, sb.Length);
        }
        return OTAResponseXML;
    }

    private bool AllDigits(string txt)
    {
        string ch;
        int i;
        bool allDigits = true;

        for (i = 1; (i <= txt.Length); i++)
        {
            //  See if the next character is a non-digit.
            ch = txt.Substring((i - 1), 1);
            if ((string.Compare(ch, "0") < 0 || string.Compare(ch, "9") > 0) && (ch != "."))
            {
                //  This is not a digit.
                allDigits = false;
                break;
            }
        }

        return allDigits;
    }

    private string parseItin(string itin, string request)
    {
        XmlDocument oDoc = null;
        XmlElement oRoot = null;
        XmlNodeList oNodeSegList = null;
        XmlNode oNodeNew = null;
        XmlNode node = null;
        string strTemp = "";
        string strValue = "";
        XmlAttribute Attribute = null;

        oDoc = new XmlDocument();
        oDoc.LoadXml(request);
        oRoot = oDoc.DocumentElement;
        itin = itin.Substring(5);
        oNodeSegList = oRoot.SelectNodes("OriginDestinationInformation/FlightSegment");

        foreach (XmlNode oNode in oNodeSegList)
        {
            strTemp = oNode.SelectSingleNode("ArrivalAirport/@LocationCode").InnerText;
            // i = itin.IndexOf(strTemp & " ")
            // If i <> -1 Then
            //     itin = itin.Substring(i - 1)
            // End If
            if ((itin.IndexOf("S U R F A C E") == 10))
            {
                itin = itin.Substring(24);
                // Continue For
            }
            //  class of service
            strValue = itin.Substring(14, 1);
            node = oNode.SelectSingleNode("MarketingAirline");
            Attribute = oDoc.CreateAttribute("ClassOfService");
            Attribute.Value = strValue;
            node.Attributes.Append(Attribute);
            //  fare basis code
            strValue = itin.Substring(31, itin.Substring(31).IndexOf(" "));
            oNodeNew = oDoc.CreateElement("FareBasis");
            Attribute = oDoc.CreateAttribute("FareBasisCode");
            Attribute.Value = strValue;
            oNodeNew.Attributes.Append(Attribute);
            oNode.AppendChild(oNodeNew);
            //  validity before
            strValue = itin.Substring(47, 5);
            if ((strValue != "     "))
            {
                oNodeNew = oDoc.CreateElement("FareValidity");
                Attribute = oDoc.CreateAttribute("ValidityReason");
                Attribute.Value = "Before";
                oNodeNew.Attributes.Append(Attribute);
                Attribute = oDoc.CreateAttribute("ValidityDate");
                Attribute.Value = oNode.SelectSingleNode("@DepartureDateTime").InnerText;
                oNodeNew.Attributes.Append(Attribute);
                oNode.AppendChild(oNodeNew);
            }
            //  validity after
            strValue = itin.Substring(52, 5);
            if ((strValue != "     "))
            {
                oNodeNew = oDoc.CreateElement("FareValidity");
                Attribute = oDoc.CreateAttribute("ValidityReason");
                Attribute.Value = "After";
                oNodeNew.Attributes.Append(Attribute);
                Attribute = oDoc.CreateAttribute("ValidityDate");
                Attribute.Value = oNode.SelectSingleNode("@DepartureDateTime").InnerText;
                oNodeNew.Attributes.Append(Attribute);
                oNode.AppendChild(oNodeNew);
            }
            //  bag allowance
            strValue = itin.Substring(58, 2);
            oNodeNew = oDoc.CreateElement("BagAllowance");
            if (strValue == "PC")
            {
                Attribute = oDoc.CreateAttribute("Quantity");
                Attribute.Value = "1";
                oNodeNew.Attributes.Append(Attribute);
                Attribute = oDoc.CreateAttribute("Type");
                Attribute.Value = "Piece";
                oNodeNew.Attributes.Append(Attribute);
                oNode.AppendChild(oNodeNew);
            }
            else if (strValue == "1P")
            {
                Attribute = oDoc.CreateAttribute("Quantity");
                Attribute.Value = "1";
                oNodeNew.Attributes.Append(Attribute);
                Attribute = oDoc.CreateAttribute("Type");
                Attribute.Value = "Piece";
                oNodeNew.Attributes.Append(Attribute);
                oNode.AppendChild(oNodeNew);
            }
            else if (strValue == "2P")
            {
                Attribute = oDoc.CreateAttribute("Quantity");
                Attribute.Value = "2";
                oNodeNew.Attributes.Append(Attribute);
                Attribute = oDoc.CreateAttribute("Type");
                Attribute.Value = "Piece";
                oNodeNew.Attributes.Append(Attribute);
                oNode.AppendChild(oNodeNew);
            }
            else
            {
                Attribute = oDoc.CreateAttribute("Weight");
                Attribute.Value = strValue;
                oNodeNew.Attributes.Append(Attribute);
                Attribute = oDoc.CreateAttribute("Type");
                Attribute.Value = "Weight";
                oNodeNew.Attributes.Append(Attribute);
                oNode.AppendChild(oNodeNew);
            }
            itin = itin.Substring(61);
        }
        request = oDoc.OuterXml;
        request = request.Substring(request.IndexOf("<OriginDestinationInformation RPH=\"1\">"), (request.IndexOf("<TravelPreferences>") - request.IndexOf("<OriginDestinationInformation RPH=\"1\">")));
        return request;
    }

    public void LogMessageToFile(string MsgType, string Message, DateTime RequestTime, DateTime ResponseTime)
    {
        string strLine = "";
        try
        {
            sb.Append("<Message").Append(" Type=\'").Append(MsgType).Append("\'").Append(" RequestTime=\'");
            sb.Append(RequestTime.ToString("dd MMM yyyy HH:mm:ss")).Append("\'").Append(" ResponseTime=\'");
            sb.Append(ResponseTime.ToString("dd MMM yyyy HH:mm:ss")).Append("\'");
            TimeSpan dur;
            dur = (ResponseTime - RequestTime);
            sb.Append(" Duration=\'").Append(dur.TotalSeconds.ToString()).Append("\'>");
            sb.Append("<AmadeusMessage>").Append(Message).Append("</AmadeusMessage>");
            sb.Append("</Message>");
            strLine = sb.ToString();
            sb.Remove(0, sb.Length);
            sb = null;

            addLog(strLine, ttProviderSystems.UserID);
        }
        catch (Exception ex)
        {
            //  
        }
    }

    static bool IsNumeric(object Expression)
    {
        // Variable to collect the Return value of the TryParse method.
        bool isNum;

        // Define variable to collect out parameter of the TryParse method. If the conversion fails, the out parameter is zero.
        double retNum;

        // The TryParse method converts a string in a specified style and culture-specific format to its double-precision floating point number equivalent.
        // The TryParse method does not generate an exception if the conversion fails. If the conversion passes, True is returned. If it does not, False is returned.
        isNum = Double.TryParse(Convert.ToString(Expression), System.Globalization.NumberStyles.Any, System.Globalization.NumberFormatInfo.InvariantInfo, out retNum);
        return isNum;
    }

    private string UpdateSessionID(string SessionID)
    {
        string[] sessionid;
        int intSession = 0;


        sb.Remove(0, sb.Length);
        sessionid = SessionID.Split(char.Parse("|"));

        if (ttProviderSystems.SOAP2)
        {
            intSession = Convert.ToInt32(sessionid[2]);
            intSession += 1;
            SessionID = sb.Append(sessionid[0]).Append("|").Append(sessionid[1]).Append("|").Append(intSession.ToString()).ToString();
            sb.Remove(0, sb.Length);
        }
        else
        {

            intSession = Convert.ToInt32(sessionid[1]);
            intSession += 1;
            SessionID = sb.Append(sessionid[0]).Append("|").Append(intSession.ToString()).ToString();
            sb.Remove(0, sb.Length);
        }

        return SessionID;
    }

    private string SubSessionID(string SessionID)
    {
        string[] sessionid;
        int intSession = 0;

        sb.Remove(0, sb.Length);
        sessionid = SessionID.Split(char.Parse("|"));



        if (ttProviderSystems.SOAP2)
        {
            intSession = Convert.ToInt32(sessionid[2]);
            intSession -= 1;
            SessionID = sb.Append(sessionid[0]).Append("|").Append(sessionid[1]).Append("|").Append(intSession.ToString()).ToString();
            sb.Remove(0, sb.Length);
        }
        else
        {
            intSession = Convert.ToInt32(sessionid[1]);
            intSession -= 1;
            SessionID = sb.Append(sessionid[0]).Append("|").Append(intSession.ToString()).ToString();

        }
        sb.Remove(0, sb.Length);
        return SessionID;
    }
    private string RemoveDuplicate(string xml)
    {
        //StringReader reader = new StringReader(xml);
        XmlDocument TravelBuildResult = new XmlDocument();
        TravelBuildResult.LoadXml(xml);

        List<RemovableFlights> lsRMFlights = new List<RemovableFlights>();

        try
        {
            XmlNodeList node = TravelBuildResult.GetElementsByTagName("OTA_AirLowFareSearchFlightsRS");
            node = node[0].SelectSingleNode("PricedItineraries").SelectNodes("PricedItinerary");
            foreach (XmlNode nd in node)
            {
                if (nd.Attributes["SequenceNumber"].Value == "1")
                {
                    XmlNodeList node2 = nd.SelectSingleNode("AirItinerary").SelectSingleNode("OriginDestinationOptions").SelectNodes("OriginDestinationOption");
                    foreach (XmlNode nd1 in node2)
                    {
                        XmlNodeList node3 = nd1.SelectNodes("FlightSegment");
                        foreach (XmlNode nd2 in node3)
                        {
                            RemovableFlights rf = new RemovableFlights();
                            rf.DepartureDateTime = nd2.Attributes["DepartureDateTime"].Value;
                            rf.FlightNumber = nd2.Attributes["FlightNumber"].Value;
                            rf.ResBookDesigCode = nd2.Attributes["ResBookDesigCode"].Value;
                            lsRMFlights.Add(rf);
                        }
                    }
                }

            }
            for (int i = 0; i < TravelBuildResult.GetElementsByTagName("OTA_AirLowFareSearchFlightsRS")[0].SelectSingleNode("PricedItineraries").SelectNodes("PricedItinerary").Count; i++)
            {
                if (TravelBuildResult.GetElementsByTagName("OTA_AirLowFareSearchFlightsRS")[0].SelectSingleNode("PricedItineraries").SelectNodes("PricedItinerary")[i].Attributes["SequenceNumber"].Value != "1")
                {
                    for (int j = 0; j < TravelBuildResult.GetElementsByTagName("OTA_AirLowFareSearchFlightsRS")[0].SelectSingleNode("PricedItineraries").SelectNodes("PricedItinerary")[i].SelectSingleNode("AirItinerary").SelectSingleNode("OriginDestinationOptions").SelectNodes("OriginDestinationOption").Count; j++)
                    {
                        //int cnt = 1;
                        int RPH = 0;
                        for (int k = 0; k < TravelBuildResult.GetElementsByTagName("OTA_AirLowFareSearchFlightsRS")[0].SelectSingleNode("PricedItineraries").SelectNodes("PricedItinerary")[i].SelectSingleNode("AirItinerary").SelectSingleNode("OriginDestinationOptions").SelectNodes("OriginDestinationOption")[j].SelectNodes("FlightSegment").Count; k++)
                        {

                            XmlNode xmNode = TravelBuildResult.GetElementsByTagName("OTA_AirLowFareSearchFlightsRS")[0].SelectSingleNode("PricedItineraries").SelectNodes("PricedItinerary")[i].SelectSingleNode("AirItinerary").SelectSingleNode("OriginDestinationOptions").SelectNodes("OriginDestinationOption")[j].SelectNodes("FlightSegment")[k];
                            //if (lsRMFlights.FindAll(o => o.DepartureDateTime == xmNode.Attributes["DepartureDateTime"].Value && o.FlightNumber == xmNode.Attributes["FlightNumber"].Value && o.ResBookDesigCode == xmNode.Attributes["ResBookDesigCode"].Value).Count > 0)
                            if (lsRMFlights.FindAll(o => o.DepartureDateTime == xmNode.Attributes["DepartureDateTime"].Value && o.FlightNumber == xmNode.Attributes["FlightNumber"].Value).Count > 0)
                            {
                                RPH = Int32.Parse(TravelBuildResult.GetElementsByTagName("OTA_AirLowFareSearchFlightsRS")[0].SelectSingleNode("PricedItineraries").SelectNodes("PricedItinerary")[i].SelectSingleNode("AirItinerary").SelectSingleNode("OriginDestinationOptions").SelectNodes("OriginDestinationOption")[j].SelectNodes("FlightSegment")[k].Attributes["RPH"].Value);
                                TravelBuildResult.GetElementsByTagName("OTA_AirLowFareSearchFlightsRS")[0].SelectSingleNode("PricedItineraries").SelectNodes("PricedItinerary")[i].SelectSingleNode("AirItinerary").SelectSingleNode("OriginDestinationOptions").SelectNodes("OriginDestinationOption")[j].RemoveChild(TravelBuildResult.GetElementsByTagName("OTA_AirLowFareSearchFlightsRS")[0].SelectSingleNode("PricedItineraries").SelectNodes("PricedItinerary")[i].SelectSingleNode("AirItinerary").SelectSingleNode("OriginDestinationOptions").SelectNodes("OriginDestinationOption")[j].SelectNodes("FlightSegment")[k]);
                            }

                        }
                        for (int k = 0; k < TravelBuildResult.GetElementsByTagName("OTA_AirLowFareSearchFlightsRS")[0].SelectSingleNode("PricedItineraries").SelectNodes("PricedItinerary")[i].SelectSingleNode("AirItinerary").SelectSingleNode("OriginDestinationOptions").SelectNodes("OriginDestinationOption")[j].SelectNodes("FlightSegment").Count; k++)
                        {

                            XmlNode xmNode = TravelBuildResult.GetElementsByTagName("OTA_AirLowFareSearchFlightsRS")[0].SelectSingleNode("PricedItineraries").SelectNodes("PricedItinerary")[i].SelectSingleNode("AirItinerary").SelectSingleNode("OriginDestinationOptions").SelectNodes("OriginDestinationOption")[j].SelectNodes("FlightSegment")[k];
                            //if (lsRMFlights.FindAll(o => o.DepartureDateTime == xmNode.Attributes["DepartureDateTime"].Value && o.FlightNumber == xmNode.Attributes["FlightNumber"].Value && o.ResBookDesigCode == xmNode.Attributes["ResBookDesigCode"].Value).Count > 0)
                            if (lsRMFlights.FindAll(o => o.DepartureDateTime == xmNode.Attributes["DepartureDateTime"].Value && o.FlightNumber == xmNode.Attributes["FlightNumber"].Value).Count > 0)
                            {
                                RPH = Int32.Parse(TravelBuildResult.GetElementsByTagName("OTA_AirLowFareSearchFlightsRS")[0].SelectSingleNode("PricedItineraries").SelectNodes("PricedItinerary")[i].SelectSingleNode("AirItinerary").SelectSingleNode("OriginDestinationOptions").SelectNodes("OriginDestinationOption")[j].SelectNodes("FlightSegment")[k].Attributes["RPH"].Value);
                                TravelBuildResult.GetElementsByTagName("OTA_AirLowFareSearchFlightsRS")[0].SelectSingleNode("PricedItineraries").SelectNodes("PricedItinerary")[i].SelectSingleNode("AirItinerary").SelectSingleNode("OriginDestinationOptions").SelectNodes("OriginDestinationOption")[j].RemoveChild(TravelBuildResult.GetElementsByTagName("OTA_AirLowFareSearchFlightsRS")[0].SelectSingleNode("PricedItineraries").SelectNodes("PricedItinerary")[i].SelectSingleNode("AirItinerary").SelectSingleNode("OriginDestinationOptions").SelectNodes("OriginDestinationOption")[j].SelectNodes("FlightSegment")[k]);
                            }
                            else
                            {
                                int temp = Int32.Parse(TravelBuildResult.GetElementsByTagName("OTA_AirLowFareSearchFlightsRS")[0].SelectSingleNode("PricedItineraries").SelectNodes("PricedItinerary")[i].SelectSingleNode("AirItinerary").SelectSingleNode("OriginDestinationOptions").SelectNodes("OriginDestinationOption")[j].SelectNodes("FlightSegment")[k].Attributes["RPH"].Value);
                                temp = temp - RPH;
                                if (temp > 0)
                                {
                                    TravelBuildResult.GetElementsByTagName("OTA_AirLowFareSearchFlightsRS")[0].SelectSingleNode("PricedItineraries").SelectNodes("PricedItinerary")[i].SelectSingleNode("AirItinerary").SelectSingleNode("OriginDestinationOptions").SelectNodes("OriginDestinationOption")[j].SelectNodes("FlightSegment")[k].Attributes["RPH"].Value = temp.ToString();
                                }

                                //cnt++;
                            }
                        }



                    }
                }
            }
            return TravelBuildResult.InnerXml;

        }
        catch (Exception ex)
        {
            return xml;
        }

    }

    private void SearchFares()
    {
        string req = strRequestTotal;
        int fareindex = iFareSearches;
        AmadeusWSAdapter ttAAPrice = new AmadeusWSAdapter(ttProviderSystems);
        //string ConversationID = ttAAPrice.CreateSession();
        string avTempResponse = "";
        if (ttProviderSystems.SessionPool)
        {
            ttAAPrice = new AmadeusWSAdapter(ttProviderSystems, "V1");
            ttAAPrice.isSOAP2 = ttProviderSystems.SOAP2;
            avTempResponse = ttAAPrice.SendMessageV3(req, "", "http://webservices.amadeus.com/" + ttProviderSystems.Profile + "/" + ttProviderSystems.AmadeusWSSchema.Fare_InformativeBestPricingWithoutPNR, "");
        }
        else
        {
            ttAAPrice = new AmadeusWSAdapter(ttProviderSystems);
            ttAAPrice.isSOAP2 = ttProviderSystems.SOAP2;
            avTempResponse = ttAAPrice.SendMessage(req, "", "http://webservices.amadeus.com/" + ttProviderSystems.Profile + "/" + ttProviderSystems.AmadeusWSSchema.Fare_InformativeBestPricingWithoutPNR, "");
        }
        if (req != null)
        {
            if (fareindex < OTAPriceTotal.Length && fareindex < OTAReqTotal.Length && fareindex < avTempResponseTotal.Length)
            {


                OTAPriceTotal[fareindex] = "<OTA_AirPriceRS Version=\"2003.2\"><Errors><Error Type=\"Amadeus\" Code=\"911\">NO FARE FOR BOOKING CODE-TRY OTHER PRICING OPTIONS</Error></Errors></OTA_AirPriceRS>";
                OTAReqTotal[fareindex] = req;
                avTempResponse = avTempResponse.Replace(" xmlns=\"http://xml.amadeus.com/" + ttProviderSystems.AmadeusWSSchema.Fare_InformativeBestPricingWithoutPNRReply + "\"", "");

                avTempResponseTotal[fareindex] = avTempResponse;
                ttAAPrice = null;

                sb.Remove(0, sb.Length);
                sb.Append(mstrVersion).Append("AmadeusWS_LowFareFlights1RS.xsl");

                avTempResponse = CoreLib.TransformXML("<FIP>" + req + avTempResponse + "</FIP>", mstrXslPath, sb.ToString(), false);
                sb.Remove(0, sb.Length);

                if (avTempResponse != null && avTempResponse.Length > 0)
                {
                    OTAPriceTotal[fareindex] = CoreLib.TransformXML(avTempResponse, mstrXslPath, "AmadeusWS_AirPriceRS.xsl", false);
                }
                else
                {
                    OTAPriceTotal[fareindex] = "<OTA_AirPriceRS Version=\"2003.2\"><Errors><Error Type=\"Amadeus\" Code=\"911\">NO FARE FOR BOOKING CODE-TRY OTHER PRICING OPTIONS</Error></Errors></OTA_AirPriceRS>";
                }

                if (OTAPriceTotal[fareindex] == null || OTAPriceTotal[fareindex].Length == 0)
                {
                    OTAPriceTotal[fareindex] = "<OTA_AirPriceRS Version=\"2003.2\"><Errors><Error Type=\"Amadeus\" Code=\"911\">NO FARE FOR BOOKING CODE-TRY OTHER PRICING OPTIONS</Error></Errors></OTA_AirPriceRS>";
                }

                iFinishedPrices += 1;
            }
        }
        //    catch (Exception)
        //    {
        //        throw new Exception("Request Time out occured");
        //    }
    }

    private class RemovableFlights
    {
        public string SectorSequence { get; set; }
        public string DepartureDateTime { get; set; }
        public string FlightNumber { get; set; }
        public string ResBookDesigCode { get; set; }

    }

    public static void addLogStat(string msg, string username, string PCC, DateTime myDTFI, DateTime myDTFIR, TimeSpan dur)
    {
        try
        {
            string FilePath = "log\\" + username + "_LFP_" + DateTime.Today.ToString("dd-MM-yyyy");
            string DirPath = "C:\\TripXML\\log";
            FilePath = "C:\\TripXML\\" + FilePath + ".txt";

            if (!Directory.Exists(DirPath))
            {
                Directory.CreateDirectory(DirPath);
            }
            if (!File.Exists(FilePath))
            {
                using (StreamWriter sw = File.CreateText(FilePath))
                {
                    sw.WriteLine("created On - " + DateTime.Now.ToString() + "\r\n");
                    sw.Flush();
                    sw.Close();
                }
            }
            using (StreamWriter sw = File.AppendText(FilePath))
            {
                sw.WriteLine("<S>" + myDTFI.ToString("dd MMM yyyy HH:mm:ss") + "</S><E>" + myDTFIR.ToString("dd MMM yyyy HH:mm:ss") + "</E>");
                sw.WriteLine("<D>" + dur.TotalSeconds.ToString() + "</D><P>" + PCC + "</P>");
                sw.WriteLine(msg + "\r\n");
                sw.Flush();
                sw.Close();
            }
        }
        catch (Exception)
        {
        }
    }

    public static void addLog(string msg, string username)
    {
        try
        {
            string FilePath = "log\\" + username + "_" + DateTime.Today.ToString("dd-MM-yyyy") + "_" + DateTime.Now.Hour.ToString();
            string DirPath = "C:\\TripXML\\log";
            FilePath = "C:\\TripXML\\" + FilePath + ".txt";

            if (!Directory.Exists(DirPath))
            {
                Directory.CreateDirectory(DirPath);
            }
            if (!File.Exists(FilePath))
            {
                using (StreamWriter sw = File.CreateText(FilePath))
                {
                    sw.WriteLine("created On - " + DateTime.Now.ToString() + "\r\n");
                    sw.Flush();
                    sw.Close();
                }
            }
            using (StreamWriter sw = File.AppendText(FilePath))
            {
                DateTimeFormatInfo myDTFI = new CultureInfo("fr-FR", true).DateTimeFormat;
                sw.WriteLine(DateTime.UtcNow.ToString(myDTFI).Substring(11) + " GMT - " + msg + "\r\n");
                sw.Flush();
                sw.Close();
            }
        }
        catch (Exception)
        {
        }
    }

    private string formatAmadeus(string strDisp)
    {
        int i;
        int a;
        int b;
        string strDisp1 = "";
        string scr = "";
        sb.Remove(0, sb.Length);
        try
        {
            strDisp = strDisp.Replace("\r\n", "\r");
            for (i = 1; i < strDisp.Length; i++)
            {
                b = strDisp.Substring(i - 1).Length;

                if (b < 81)
                    scr = strDisp.Substring(i - 1);
                else
                    scr = strDisp.Substring((i - 1), 81);

                a = (scr.IndexOf("\r", 0) + 1);
                if ((a == 0))
                {
                    i = (i + 80);
                    sb.Append("<Line>").Append(scr.Replace("&", "&").Replace("<", "<").Replace(">", ">")).Append("</Line>");
                }
                else
                {
                    sb.Append("<Line>").Append(scr.Substring(0, (a - 1)).Replace("&", "&").Replace("<", "<").Replace(">", ">")).Append("</Line>");
                    i = (i + (a - 1));
                }
            }

            sb.Append("<Line>&gt;</Line>");
            strDisp1 = sb.ToString();
            sb.Remove(0, sb.Length);
            return strDisp1;
        }
        catch (Exception ex)
        {
            return "";
        }
    }

    private string formatBreakPoint(string strScreen1)
    {
        XmlDocument oDocScreen = new XmlDocument();
        oDocScreen.LoadXml(strScreen1);
        XmlElement oRootScreen = oDocScreen.DocumentElement;
        string strScreen = "";
        string strBreakPoint = "<BreakPoint>";

        for (int i = 5; i < oRootScreen.SelectNodes("Line").Count; i++)
        {
            if (oRootScreen.SelectNodes("Line").Item(i).InnerText != "")
            {
                if (oRootScreen.SelectNodes("Line").Item(i).InnerText.Substring(0, 5) != "     ")
                {
                    if (oRootScreen.SelectNodes("Line").Item(i).InnerText.Substring(0, 4) != " Q: ")
                    {
                        strScreen = strScreen + "<Line>" + oRootScreen.SelectNodes("Line").Item(i).InnerText + "</Line>";
                    }
                }
            }

            if (oRootScreen.SelectNodes("Line").Item(i).InnerText.Contains("TOTAL FARE CALCULATION"))
            {
                strScreen = "<Screen>" + strScreen + "</Screen>";
                oDocScreen.LoadXml(strScreen);
                oRootScreen = oDocScreen.DocumentElement;
                break;
            }
        }

        for (int i = 0; i < oRootScreen.SelectNodes("Line").Count; i++)
        {
            XmlNode oNodeScreen = oRootScreen.SelectNodes("Line").Item(i);

            if (oNodeScreen.InnerText.IndexOf(" FARE BASIS") == -1)
            {
                if (oRootScreen.SelectNodes("Line").Item(i + 1).InnerText.IndexOf(" FARE BASIS") == -1)
                {
                    if (oRootScreen.SelectNodes("Line").Item(i + 2).InnerText.IndexOf(" FARE BASIS") == -1)
                    {
                        strBreakPoint = strBreakPoint + "N";
                    }
                    else
                    {
                        strBreakPoint = strBreakPoint + "Y";
                    }
                }
                else if (oRootScreen.SelectNodes("Line").Item(i + 2).InnerText.Contains("TOTAL FARE CALCULATION"))
                {
                    break;
                }
                else
                {
                    if (oRootScreen.SelectNodes("Line").Item(i + 2).InnerText.IndexOf(" FARE BASIS") == -1)
                    {
                        if (oRootScreen.SelectNodes("Line").Item(i + 3).InnerText.IndexOf(" FARE BASIS") == -1)
                        {
                            strBreakPoint = strBreakPoint + "N";
                        }
                        else
                        {
                            strBreakPoint = strBreakPoint + "Y";
                        }
                    }
                }
            }
        }

        strBreakPoint = strBreakPoint + "</BreakPoint>";

        return strBreakPoint;

        //        <Screen>
        //    <Line>FQH1</Line>
        //    <Line/>
        //    <Line/>
        //    <Line/>
        //    <Line>  FCP  AL  BK TPM   MPM   EMA  EMS R GI CC  NVB  NVA    BG</Line>
        //    <Line>  WAS</Line>
        //    <Line>  DKR  SA  W                       R AT SA 10APR10APR   2P</Line>
        //    <Line> FARE BASIS:WKPXZA3         AMOUNT IN NUC:         539.50</Line>
        //    <Line>  ABJ  DN  W  1132  1358           M EH DN              2P</Line>
        //    <Line> FARE BASIS:W               AMOUNT IN NUC:         377.61</Line>
        //    <Line>X DKR  KQ  M                                            2P</Line>
        //    <Line>  WAS  SA  K  5097  6116           M AT YY 10MAY10MAY   2P</Line>
        //    <Line> FARE BASIS:YIF             AMOUNT IN NUC:        2628.00</Line>
        //    <Line/>
        //    <Line> TOTAL FARE CALCULATION:                          3545.11</Line>
        //    <Line> ROE: 1.000000                     FARE USD:      3545.00</Line>
        //    <Line> TAX: YRVA          435.00   YQAC           31.57</Line>
        //    <Line>      YCAE            5.50   USAP           17.20</Line>
        //    <Line>      USAS           17.20   XACO            5.00</Line>
        //    <Line>      XYCR            7.00   AYSE            2.50</Line>
        //    <Line>      HPDE          138.82   KQEA            5.92</Line>
        //    <Line>                                                  PAGE  1/ 2</Line>
        //    <Line>&gt;</Line>
        //</Screen>
    }
}

